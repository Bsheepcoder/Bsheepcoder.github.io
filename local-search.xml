<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于VS code如何下载并配置C语言（windows）</title>
    <link href="/2021/10/03/%E5%85%B3%E4%BA%8EVS%20code%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD%E5%B9%B6%E9%85%8D%E7%BD%AEC%E8%AF%AD%E8%A8%80%EF%BC%88windows%EF%BC%89/"/>
    <url>/2021/10/03/%E5%85%B3%E4%BA%8EVS%20code%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD%E5%B9%B6%E9%85%8D%E7%BD%AEC%E8%AF%AD%E8%A8%80%EF%BC%88windows%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="关于VS-code如何下载并配置C语言（windows）"><a href="#关于VS-code如何下载并配置C语言（windows）" class="headerlink" title="关于VS code如何下载并配置C语言（windows）"></a>关于VS code如何下载并配置C语言（windows）</h3><h3 id="0x01-下载VS-code"><a href="#0x01-下载VS-code" class="headerlink" title="0x01  下载VS code"></a>0x01  下载VS code</h3><p><strong>1.</strong><a href="https://code.visualstudio.com/"><strong>VS code官网</strong></a> </p><p><a href="https://imgchr.com/i/rq9RVe"><img src="https://s3.ax1x.com/2020/12/29/rq9RVe.png" alt="rq9RVe.png"></a></p><p><strong>2</strong>.点击后无需操作，等待下载弹窗</p><p><strong>3</strong>.下载后找到安装包，打开</p><p><a href="https://imgchr.com/i/rq9WUH"><img src="https://s3.ax1x.com/2020/12/29/rq9WUH.png" alt="rq9WUH.png"></a></p><h3 id="0x02-安装VS-code"><a href="#0x02-安装VS-code" class="headerlink" title="0x02  安装VS code"></a>0x02  安装VS code</h3><p>**1.**按照下图流程操作</p><p><a href="https://imgchr.com/i/rq9f5d"><img src="https://s3.ax1x.com/2020/12/29/rq9f5d.png" alt="rq9f5d.png" style="zoom:150%;" /></a></p><p><a href="https://imgchr.com/i/rq94PA"><img src="https://s3.ax1x.com/2020/12/29/rq94PA.png" alt="rq94PA.png" style="zoom: 150%;" /></a></p><p><a href="https://imgchr.com/i/rq958I"><img src="https://s3.ax1x.com/2020/12/29/rq958I.png" alt="rq958I.png" style="zoom:150%;" /></a></p><p><a href="https://imgchr.com/i/rq9oxP"><img src="https://s3.ax1x.com/2020/12/29/rq9oxP.png" alt="rq9oxP.png" style="zoom:150%;" /></a></p><p><strong>2</strong>.本人已经装过了，所以没有<strong>自定义安装地址</strong></p><h3 id="0x03-下载及安装MinGW"><a href="#0x03-下载及安装MinGW" class="headerlink" title="0x03  下载及安装MinGW"></a>0x03  下载及安装MinGW</h3><p>​    <a href="%5B**https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/**%5D(https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/)"><strong>MinGW官网</strong></a>   进入后一直翻，找到下图的位置</p><p><a href="https://imgchr.com/i/rq96KK"><img src="https://s3.ax1x.com/2020/12/29/rq96KK.jpg" alt="rq96KK.jpg"></a></p><p>​    <a href="%5B**https://pan.baidu.com/s/1g3BEDOh65r58OhwM7eMgeQ**%5D(https://pan.baidu.com/s/1g3BEDOh65r58OhwM7eMgeQ)"><strong>百度网盘</strong></a>    <strong>提取码：e42m</strong></p><p>​    下载解压即可，并找到并进入<strong>bin文件夹</strong>，记住路径</p><h3 id="0x04-配置环境变量"><a href="#0x04-配置环境变量" class="headerlink" title="0x04  配置环境变量"></a>0x04  配置环境变量</h3><p><strong>1.</strong> 设置中找到 <strong>编辑系统环境变量</strong> ，或者如下图找到并单击</p><p><a href="https://imgchr.com/i/rq97Kf"><img src="https://s3.ax1x.com/2020/12/29/rq97Kf.png" alt="rq97Kf.png" style="zoom:150%;" /></a></p><p><strong>2</strong>.如下图提示依次操作</p><p><a href="https://imgchr.com/i/rq9LVg"><img src="https://s3.ax1x.com/2020/12/29/rq9LVg.png" alt="rq9LVg.png"></a></p><p><a href="https://imgchr.com/i/rq9X5j"><img src="https://s3.ax1x.com/2020/12/29/rq9X5j.png" alt="rq9X5j.png" style="zoom:150%;" /></a></p><p><strong>3</strong>.找到Path变量并点击，再点击编辑</p><p><a href="https://imgchr.com/i/rq9vPs"><img src="https://s3.ax1x.com/2020/12/29/rq9vPs.png" alt="rq9vPs.png" style="zoom:150%;" /></a></p><p><strong>4</strong>.复制之前解压的mingw到bin的链接</p><p><a href="https://imgchr.com/i/rbloOe"><img src="https://s3.ax1x.com/2020/12/29/rbloOe.jpg" alt="rbloOe.jpg"></a></p><p><a href="https://imgchr.com/i/rbl7eH"><img src="https://s3.ax1x.com/2020/12/29/rbl7eH.jpg" alt="rbl7eH.jpg"></a></p><p><strong>5</strong>.接下来一直点确定，直到窗口关闭</p><p><strong>6</strong>.<strong>点击 输入cmd 点击打开cmd，也可用快捷键win + R 输入cmd 打开</strong></p><img src="https://s3.ax1x.com/2020/12/29/rq97Kf.png" alt="rq97Kf.png" style="zoom:150%;" /><p><a href="https://imgchr.com/i/rq9xGn"><img src="https://s3.ax1x.com/2020/12/29/rq9xGn.png" alt="rq9xGn.png" style="zoom:150%;" /></a></p><p><strong>5</strong>.测试计算机能否找到 gcc，有下方的输出表明配置正确，如果没有说明之前的配置有误，再去查看一下变量的地址、mingw的地址等。测试正确关闭即可。</p><p><a href="https://imgchr.com/i/rq9z2q"><img src="https://s3.ax1x.com/2020/12/29/rq9z2q.png" alt="rq9z2q.png" style="zoom:150%;" /></a></p><h3 id="0x05-设置VS-Code"><a href="#0x05-设置VS-Code" class="headerlink" title="0x05  设置VS Code"></a>0x05  设置VS Code</h3><p><strong>1.</strong> 打开vs code</p><p><a href="https://imgchr.com/i/rqC9MV"><img src="https://s3.ax1x.com/2020/12/29/rqC9MV.png" alt="rqC9MV.png"></a></p><p><strong>2</strong>.<strong>输入chin，点击后，点安装。之后重启 vscode 你会发现界面变为中文</strong></p><p><a href="https://imgchr.com/i/rqCCrT"><img src="https://s3.ax1x.com/2020/12/29/rqCCrT.png" alt="rqCCrT.png"></a></p><p> <strong>再次搜索C/C++，安装</strong> </p><p><a href="https://imgchr.com/i/rqC1de"><img src="https://s3.ax1x.com/2020/12/29/rqC1de.png" alt="rqC1de.png"></a></p><p> <strong>再次搜索code runner，安装</strong> </p><p><a href="https://imgchr.com/i/rqCGid"><img src="https://s3.ax1x.com/2020/12/29/rqCGid.png" alt="rqCGid.png"></a></p><p><strong>3</strong>.<strong>新建一个文件夹，并新建文件</strong></p><p><a href="https://imgchr.com/i/rqCJJA"><img src="https://s3.ax1x.com/2020/12/29/rqCJJA.png" alt="rqCJJA.png" style="zoom:150%;" /></a></p><p><a href="https://imgchr.com/i/rqCUQP"><img src="https://s3.ax1x.com/2020/12/29/rqCUQP.png" alt="rqCUQP.png" style="zoom:150%;" /></a></p><p><strong>4</strong>.<strong>写一段测试代码，(复制下方即可)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br>      <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5</strong>.<strong>运行在下方输出，输出正确即无误</strong></p><p><a href="https://imgchr.com/i/rqCdL8"><img src="https://s3.ax1x.com/2020/12/29/rqCdL8.png" alt="rqCdL8.png"></a></p><h3 id="0x06-重要问题解决"><a href="#0x06-重要问题解决" class="headerlink" title="0x06  重要问题解决"></a>0x06  重要问题解决</h3><p><strong>1.Vscode一开始只能在输出看结果，我们要调整到终端看结果这样就可以输入了</strong></p><p><a href="https://imgchr.com/i/rqCBdg"><img src="https://s3.ax1x.com/2020/12/29/rqCBdg.png" alt="rqCBdg.png"></a></p><p><strong>点击，然后下滑，直到找到下图这一项并点击</strong></p><p><a href="https://imgchr.com/i/rqCDoQ"><img src="https://s3.ax1x.com/2020/12/29/rqCDoQ.png" alt="rqCDoQ.png"></a></p><p><strong>2.先复制下方代码，然后粘贴到{ }内的合适位置</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;code-runner.runInTerminal&quot;</span>: <span class="hljs-literal">true</span>,<br></code></pre></td></tr></table></figure><p><strong>（这里容易出错，因为可能你设置过的话内容会和下图不同，多试几次不同位置。）</strong></p><p><a href="https://imgchr.com/i/rqCsij"><img src="https://s3.ax1x.com/2020/12/29/rqCsij.png" alt="rqCsij.png"></a></p><p><strong>粘贴后关闭即可，下面运行刚才的代码，会发现程序在终端输出。</strong></p><p><strong>3.再写一个可以输入输出的代码如上法，测试一下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> d, h, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;d, &amp;h, &amp;m);<br>    m = d * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> + h * <span class="hljs-number">60</span> + m;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;这是中文%d&quot;</span>,m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>你会发现中文部分输出的是乱码</strong></p><p><a href="https://imgchr.com/i/rqCyJs"><img src="https://s3.ax1x.com/2020/12/29/rqCyJs.png" alt="rqCyJs.png" style="zoom:150%;" /></a></p><p><strong>点击UTF-8</strong></p><p><a href="https://imgchr.com/i/rqCczq"><img src="https://s3.ax1x.com/2020/12/29/rqCczq.png" alt="rqCczq.png"></a></p><p>找到GBK （中文编码）</p><p><a href="https://imgchr.com/i/rqC2Q0"><img src="https://s3.ax1x.com/2020/12/29/rqC2Q0.png" alt="rqC2Q0.png"></a></p><p><strong>下滑找到点击</strong></p><p><strong>再次运行</strong></p><p><a href="https://imgchr.com/i/rqCWLT"><img src="https://s3.ax1x.com/2020/12/29/rqCWLT.png" alt="rqCWLT.png"></a></p><p><strong>4.设置完毕，但是你下次打开此文件，代码中的中文还是会显示乱码。</strong></p><p><a href="https://imgchr.com/i/rqC4wF"><img src="https://s3.ax1x.com/2020/12/29/rqC4wF.png" alt="rqC4wF.png" style="zoom:150%;" /></a></p><p><strong>将默认设置为GBK ，这样下次打开就是默认中文编码。</strong></p><p><strong>5.另外按 ctrl + shift + p 后，输入tasks，找到tasks.json文件</strong></p><p><strong>在下图位置，加划线那行代码，并且上一行尾要加逗号！！</strong></p><p><a href="https://imgchr.com/i/rqC7WR"><img src="https://s3.ax1x.com/2020/12/29/rqC7WR.jpg" alt="rqC7WR.jpg"></a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;-fexec-charset=GBK&quot;</span> <span class="hljs-comment">//解决中文乱码 </span><br></code></pre></td></tr></table></figure><p><strong>修改代码后记得ctrl + S 保存后，重启即可。</strong></p><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><p>1.在调用函数库的时候可能会出现编辑器找不到的情况，需要尽可能多的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span> </span><br></code></pre></td></tr></table></figure><p>例如在使用 <strong>time.h</strong> 时，需先写出<strong>stdlib.h</strong></p><p>2.另外对编译的语法也有不同的要求，修改语法可以排除一些编译报错。</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于VS code如何下载并配置C语言（windows）</title>
    <link href="/2021/10/03/C%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <url>/2021/10/03/C%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 20  <span class="hljs-comment">//定义一个时间以s为单位，要求时间至少够做5题</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  程序名：算数游戏 </span><br><span class="hljs-comment">  时间：2020.12.24 </span><br><span class="hljs-comment">  制作人：Bsheepcoder </span><br><span class="hljs-comment">  内容： 用户需在规定时间内尽可能多的做题，</span><br><span class="hljs-comment">         题目内容是完成两个10以内数相加和相减。           </span><br><span class="hljs-comment">*/</span> <br><span class="hljs-function">struct  tm  * <span class="hljs-title">GetTime</span><span class="hljs-params">( <span class="hljs-keyword">time_t</span>  *t)</span>    <span class="hljs-comment">//声明一个获取时间的结构指针 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">tm</span>  * <span class="hljs-title">loctm</span>;</span><br>time (t);                <span class="hljs-comment">//获取Unix时间戳。</span><br>loctm = localtime  (t);   <span class="hljs-comment">//转为时间结构。</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NewNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1, <span class="hljs-keyword">int</span> *p2)</span></span>;  <span class="hljs-comment">//生成两个10以内随机数 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a , <span class="hljs-keyword">int</span> b)</span></span>;            <span class="hljs-comment">//两数和 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Minus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a , <span class="hljs-keyword">int</span> b)</span></span>;          <span class="hljs-comment">//两数差的绝对值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sum,<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> minus,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> *k)</span></span>;   <span class="hljs-comment">//判断用户输入的结果是否正确 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">TimeCnt</span><span class="hljs-params">( struct  tm  *localtime,struct  tm  begintime)</span></span>; <span class="hljs-comment">//返回剩余答题时间</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">InTime</span><span class="hljs-params">(struct  tm  *lt1 ,<span class="hljs-keyword">time_t</span>  t , <span class="hljs-keyword">int</span> *pn, <span class="hljs-keyword">int</span> *pk)</span></span>; <span class="hljs-comment">//答题时间内的操作，输入两个数。 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">AwardLangurage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *cnt,<span class="hljs-keyword">int</span> *k)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><br> <span class="hljs-keyword">time_t</span>  T;  <br> <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span> ;  <span class="hljs-comment">//</span><br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;  %ds时间，准备开始了吗?\n&quot;</span>,N);<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;  按enter 开始  ||  输任意值退出\n&quot;</span>,N);<br>     <span class="hljs-keyword">if</span>(getchar() == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>     &#123;<br>            <span class="hljs-comment">//定义一个时间变量 </span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">tm</span>  *<span class="hljs-title">lt1</span>;</span>   <span class="hljs-comment">//定义一个时间结构体指针 </span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">tm</span>  <span class="hljs-title">begin</span>;</span><br>        <span class="hljs-keyword">int</span> time;          <span class="hljs-comment">//定义一个时间差 </span><br>     lt1 =  GetTime(&amp;T);    <span class="hljs-comment">//指针指向此时时间 </span><br>     begin = * lt1;     <span class="hljs-comment">//记录开始的时间指针的时间 </span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>time =  TimeCnt(lt1,begin);   <span class="hljs-comment">//传入开始时间 ，返回剩余时间 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;—————剩余 %ds——————&lt;\t\n&quot;</span>,time);<br><span class="hljs-keyword">if</span>(time &gt;= <span class="hljs-number">0</span>)<br>&#123;<br>                InTime(lt1,T,&amp;cnt,&amp;k);    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;  停！时间到！\t\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;  共 %d 题， 答对 %d 题\t\n&quot;</span>,cnt,k);<br>   <span class="hljs-keyword">switch</span> (AwardLangurage(&amp;cnt,&amp;k))<br>   &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;完全正确！你太厉害了！&quot;</span>);<br>   <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;优秀！我看好你！&quot;</span>);<br>   <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;良好！你很有潜力！&quot;</span>);<br>   <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;一般，你需要多练习！&quot;</span>);<br>   <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加油，不要放弃！&quot;</span>);<br>   <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你完美的躲过了正确答案！&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">default</span>:<br>   <span class="hljs-keyword">break</span>;<br>   &#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;  按任意键退出\t\n&quot;</span>,N);<br><span class="hljs-keyword">break</span>; <br>&#125;<br>&#125; <br>getchar();<br>getchar(); <span class="hljs-comment">//防止程序闪退 </span><br> &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NewNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1, <span class="hljs-keyword">int</span> *p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> born ;<br>srand((<span class="hljs-keyword">unsigned</span>)time(<span class="hljs-literal">NULL</span>));<br>*p1 = (rand()+<span class="hljs-number">2</span> * rand())%<span class="hljs-number">10</span>;   <span class="hljs-comment">//取一个随机数 p1 </span><br>*p2 = (rand() * rand()+rand())%<span class="hljs-number">10</span>;   <span class="hljs-comment">// 取一个随机数 p2 </span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a , <span class="hljs-keyword">int</span> b)</span>   <span class="hljs-comment">//两数和 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> sum;<br>sum = a + b;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Minus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a , <span class="hljs-keyword">int</span> b)</span>   <span class="hljs-comment">//两数差的绝对值 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> minus;<br><span class="hljs-keyword">if</span>(a &lt; b)&#123;<br>minus = b - a;<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>minus = a - b;<br>&#125;<br><span class="hljs-keyword">return</span> minus;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sum,<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> minus,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> *k)</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-keyword">if</span>(a == sum &amp;&amp; b == minus)<br>        &#123;<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; 正确！\n&quot;</span>);<br>           *k = *k + <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; 错误！\n&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   功能：判断时间差，以此为依据退出循环</span><br><span class="hljs-comment">   参数：时间结构指针、开始时间</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">TimeCnt</span><span class="hljs-params">( struct  tm  *localtime,struct  tm   begintime)</span> <span class="hljs-comment">//传入</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span>  minus;<br><span class="hljs-keyword">if</span>(localtime-&gt;tm_min &gt; begintime.tm_min)<br>&#123;<br>minus = localtime-&gt;tm_sec + <span class="hljs-number">60</span> - begintime.tm_sec ;<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>minus = localtime-&gt;tm_sec - begintime.tm_sec ;<br>&#125;<br><span class="hljs-keyword">return</span> (N - minus) ;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   功能：规定时间内的动作</span><br><span class="hljs-comment">   参数：时间结构指针、时间变量、计题数、计答对题数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">InTime</span><span class="hljs-params">(struct  tm  *lt1 ,<span class="hljs-keyword">time_t</span>  t , <span class="hljs-keyword">int</span> *pn, <span class="hljs-keyword">int</span> *pk)</span>  </span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-keyword">int</span> new1, new2, answer1, answer2;<br>        <span class="hljs-keyword">int</span> i,sum, begin , minus;<br>     NewNumber(&amp;new1,&amp;new2);<br> sum = Sum(new1,new2);<br> minus = Minus(new1,new2);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   &gt;&gt;  %d  +/- %d = ?\t\n&quot;</span>,new1 ,new2);<br> *pn = *pn + <span class="hljs-number">1</span>;<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;answer1, &amp;answer2);<br> Judge(sum,answer1,minus,answer2,pk);<br> lt1 =  GetTime(&amp;t);<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   功能：用答错的题数来判断评价</span><br><span class="hljs-comment">   参数：题数、答对的题数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">AwardLangurage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *cnt,<span class="hljs-keyword">int</span> *k)</span>    </span><br><span class="hljs-function"> </span>&#123;<br><span class="hljs-keyword">int</span> LangurageStand;<br><span class="hljs-keyword">int</span> error =  *cnt - *k ; <span class="hljs-comment">// 错误的题数</span><br><span class="hljs-keyword">if</span>(*cnt &gt; <span class="hljs-number">10</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (error == <span class="hljs-number">0</span> )     <span class="hljs-comment">//0%以内</span><br>&#123; <br>LangurageStand = <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(error &lt; (*cnt)/<span class="hljs-number">5</span>)  <span class="hljs-comment">//20%</span><br>&#123;<br>LangurageStand = <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(error &lt; <span class="hljs-number">2</span>*(*cnt)/<span class="hljs-number">5</span>)  <span class="hljs-comment">//40%</span><br>&#123;<br>LangurageStand = <span class="hljs-number">2</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(error &lt; <span class="hljs-number">4</span>*(*cnt)/<span class="hljs-number">5</span>)   <span class="hljs-comment">//80%</span><br>&#123;<br>LangurageStand = <span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(error &lt; *cnt)         <span class="hljs-comment">//100%</span><br>&#123;<br>LangurageStand = <span class="hljs-number">4</span>;<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>LangurageStand = <span class="hljs-number">5</span>;<br>&#125;<br><br>&#125;<span class="hljs-keyword">else</span>   <span class="hljs-comment">//  5个题以内</span><br>&#123;<br><span class="hljs-keyword">if</span> (error == <span class="hljs-number">0</span> )     <br>&#123; <br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;完全正确！你太厉害了！&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(error &lt; *cnt)<br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;还需努力！&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你需要更多练习！&quot;</span>);<br>&#125;<br>LangurageStand = <span class="hljs-number">6</span>;<br>&#125;<br><span class="hljs-keyword">return</span> LangurageStand;<br>&#125;   <br></code></pre></td></tr></table></figure><p>不是很难，不过很适合小盆友来学习算数</p><p>还可以写成乘法算数类型</p><p>哈哈</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Fluid出现问题与解决</title>
    <link href="/2021/10/02/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/10/02/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>更多详请查看<a href="https://hexo.io/docs/">Hexo文档</a>、<a href="https://hexo.fluid-dev.com/docs/start/">Fluid主题文档</a>、<a href="https://hexo.fluid-dev.com/">Fluid主题展示和功能介绍</a></p><h2 id="hexo页面代码块格式错误"><a href="#hexo页面代码块格式错误" class="headerlink" title="hexo页面代码块格式错误"></a>hexo页面代码块格式错误</h2><ul><li><p>问题：</p><p>我自己有一个习惯，当我要写代码块的时候，我习惯这样写:</p><p><img src="https://i.loli.net/2021/10/02/ItQT6e43dmnNHgv.png" alt="image-20211002211755043"></p><p>这样在Typora中是支持的，但是部署到Hexo上时就会出现错误，导致代码块错位。</p></li><li><p>方法：</p><p>方法就是在写代码块的时候，避免用 - ，各一行也不会出错，或者直接不使用 - 分级。</p></li></ul><h2 id="hexo-s时提示4000端口被占用"><a href="#hexo-s时提示4000端口被占用" class="headerlink" title="hexo s时提示4000端口被占用"></a>hexo s时提示4000端口被占用</h2><ul><li><p>问题</p><p>有的时候在执行‘hexo sever’的命令时,提示以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">FATAL Port 4000 has been used. Try other port instead.<br></code></pre></td></tr></table></figure></li><li><p>方法：</p><p>出现问题的原因是4000端口被占用，这个端口是可以随意设置的不是固定的，可以输入以指定端口开启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server -p 4001<br></code></pre></td></tr></table></figure><p>或者在可以在站点下的文件_config.yml内加上如下代码更改hexo-server运行时的端口号：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">4001</span> <span class="hljs-comment">#端口号随意，默认是4000,可以更改为其他</span><br>  <span class="hljs-attr">compress:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">header:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（五）Python程序设计方法</title>
    <link href="/2021/10/02/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2021/10/02/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="程序设计方法"><a href="#程序设计方法" class="headerlink" title="程序设计方法"></a>程序设计方法</h2><p>理解掌握Python程序设计思维</p><p>编写更有设计感的程序</p><h3 id="0x1-实例-体育竞技分析"><a href="#0x1-实例-体育竞技分析" class="headerlink" title="0x1 实例 体育竞技分析"></a>0x1 实例 体育竞技分析</h3><p>需求：毫厘是多少，如何可选分析体育竞技比赛</p><p>模拟N场比赛</p><p>计算思维 ：抽象 + 自动化</p><p>模拟：抽象比赛过程+自动化执行N场比赛</p><p>N越大时，比赛结果分析会越科学</p><p>问题分析</p><p>比赛规则</p><p>双人击球比赛：A&amp;B，回合制，5局3胜</p><p>开始时一方先发球，直至判分，接下来胜者发球</p><p>球员只能在发球局得分，15分胜一局</p><p>自顶向下</p><p>将总问题表达为若干小问题的分析方法</p><p>是解决复杂问日的有效方法</p><p><a href="https://imgchr.com/i/sziYzd"><img src="https://s3.ax1x.com/2021/01/27/sziYzd.png" alt="sziYzd.png"></a></p><p>第一阶段</p><p>介绍内容，提高用户体验</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printIntro</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个程序模拟两个选手A和B的某种竞技比赛&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序运行需要A和B的能力值（以0到1之间的小数表示）&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getInputs</span>():</span><br>    a = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入选手A的能力值（0-1）：&quot;</span>))<br>    b = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入选手B的能力值（0-1）：&quot;</span>))<br>    n = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;模拟比赛场次：&quot;</span>))<br>    <span class="hljs-keyword">return</span> a,b,n<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printSummary</span>(<span class="hljs-params">winsA,winsB</span>):</span><br>    n = winsA + winsB<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;竞技开始分析，共模拟&#123;&#125;场比赛&quot;</span>.<span class="hljs-built_in">format</span>(n))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选手A获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(winsA,winsA/n))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选手B获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(winsB,winsB/n))<br></code></pre></td></tr></table></figure><p>第二阶段</p><p>N次比赛，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">simNGames</span>(<span class="hljs-params">n,probA,probB</span>):</span><br>    winsA,winsB = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        scoreA,scoreB = simOneGame(probA,probB)<br>        <span class="hljs-keyword">if</span> scoreA &gt; scoreB:<br>            winsA += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            winsB += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> winsA, winsB<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sim0neGame</span>(<span class="hljs-params">probA,probB</span>):</span><br>    scoreA,scoreB = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    serving = <span class="hljs-string">&quot;A&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> gameOver(scoreA,scoreB):<br>        <span class="hljs-keyword">if</span> serving == <span class="hljs-string">&quot;A&quot;</span>:<br>            <span class="hljs-keyword">if</span> random() &lt; probA:<br>                  scoreA += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                  serving = <span class="hljs-string">&quot;B&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> random() &lt; probB:<br>                  scoreB += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                  serving = <span class="hljs-string">&quot;A&quot;</span><br>    <span class="hljs-keyword">return</span> scoreA,scoreB<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gameOver</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">return</span> a==<span class="hljs-number">15</span> <span class="hljs-keyword">or</span> b==<span class="hljs-number">15</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    printIntro()<br>    probA,probB, n = getInputs()<br>    winsA,winsB = simNGames(n,probA,probB)<br>    printSummary(winsA,winsB)<br></code></pre></td></tr></table></figure><p>最终代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> random<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printIntro</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个程序模拟两个选手A和B的某种竞技比赛&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序运行需要A和B的能力值（以0到1之间的小数表示）&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getInputs</span>():</span><br>    a = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入选手A的能力值（0-1）：&quot;</span>))<br>    b = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入选手B的能力值（0-1）：&quot;</span>))<br>    n = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;模拟比赛场次：&quot;</span>))<br>    <span class="hljs-keyword">return</span> a,b,n<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printSummary</span>(<span class="hljs-params">winsA,winsB</span>):</span><br>    n = winsA + winsB<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;竞技开始分析，共模拟&#123;&#125;场比赛&quot;</span>.<span class="hljs-built_in">format</span>(n))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选手A获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(winsA,winsA/n))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选手B获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(winsB,winsB/n))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">simOneGame</span>(<span class="hljs-params">probA,probB</span>):</span><br>    scoreA,scoreB = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    serving = <span class="hljs-string">&quot;A&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> gameOver(scoreA,scoreB):<br>        <span class="hljs-keyword">if</span> serving == <span class="hljs-string">&quot;A&quot;</span>:<br>            <span class="hljs-keyword">if</span> random() &lt; probA:<br>                  scoreA += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                  serving = <span class="hljs-string">&quot;B&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> random() &lt; probB:<br>                  scoreB += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                  serving = <span class="hljs-string">&quot;A&quot;</span><br>    <span class="hljs-keyword">return</span> scoreA,scoreB<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gameOver</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">return</span> a==<span class="hljs-number">15</span> <span class="hljs-keyword">or</span> b==<span class="hljs-number">15</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">simNGames</span>(<span class="hljs-params">n,probA,probB</span>):</span><br>    winsA,winsB = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        scoreA,scoreB = simOneGame(probA,probB)<br>        <span class="hljs-keyword">if</span> scoreA &gt; scoreB:<br>            winsA += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            winsB += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> winsA, winsB<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    printIntro()<br>    probA,probB, n = getInputs()<br>    winsA,winsB = simNGames(n,probA,probB)<br>    printSummary(winsA,winsB)<br>main()<br><br><br>运行结果：<br><br>这个程序模拟两个选手A和B的某种竞技比赛<br>程序运行需要A和B的能力值（以<span class="hljs-number">0</span>到<span class="hljs-number">1</span>之间的小数表示）<br>请输入选手A的能力值（<span class="hljs-number">0</span>-<span class="hljs-number">1</span>）：<span class="hljs-number">0.45</span><br>请输入选手B的能力值（<span class="hljs-number">0</span>-<span class="hljs-number">1</span>）：<span class="hljs-number">0.5</span><br>模拟比赛场次：<span class="hljs-number">1000</span><br>竞技开始分析，共模拟<span class="hljs-number">1000</span>场比赛<br>选手A获胜<span class="hljs-number">381</span>场比赛，占比<span class="hljs-number">38.1</span>%<br>选手B获胜<span class="hljs-number">619</span>场比赛，占比<span class="hljs-number">61.9</span>%<br></code></pre></td></tr></table></figure><p>举一反三</p><p>理解自顶向下和自底向上</p><p>分而治之、模块化集成</p><p>自顶向下是系统思维</p><p>应用问题的扩展</p><p>增加其他能力值</p><p>通过胜率反推能力</p><h3 id="0x2-Python程序设计思维"><a href="#0x2-Python程序设计思维" class="headerlink" title="0x2 Python程序设计思维"></a>0x2 Python程序设计思维</h3><p>###计算思维与程序设计</p><p>计算思维</p><p>第三种人类思维特征</p><p>逻辑思维：推理演绎</p><p>实证思维：实验和验证</p><p>计算思维：设计和构造</p><p>特征</p><p>抽象问题和自动化求解</p><p>天气预报MM5模型，超算计算，进行预测天气</p><p>量化分析 股票</p><p>抽象计算过程，关注设计过程</p><h3 id="计算生态与python语言"><a href="#计算生态与python语言" class="headerlink" title="计算生态与python语言"></a>计算生态与python语言</h3><p>计算生态</p><p>先是科学装置</p><p>后来开源运动GUN</p><p>通用许可协议，自由软件时代到来</p><p>linux内核开源</p><p>网景浏览器开源，商业软件开源</p><p>开源思想深入演化和发展</p><p>没有顶层设计、以功能为单位</p><p>python语言</p><p>大量第三方库</p><p>库有竞争发展压力</p><p>爬虫requests库的简单易用，使过去的库被淘汰</p><p>库之间有广泛联系</p><p>Numpy库底层是C语言编写，接口是python</p><p>社区庞大</p><p>API 不等于 生态，API是由人设计的</p><p>计算生态价值</p><p>加速科技类应用创新的重要支撑</p><p>发展科技产品商业价值的重要模式</p><p>国家科技体系安全和稳固的基础</p><p>编程的起点</p><p>学会站在巨人的肩膀上</p><p>编程的起点不是算法而是系统</p><p>以计算生态为主要运用</p><p>优质计算生态 <a href="http://python123.io/">http://python123.io</a></p><h3 id="用户体验与软件产品"><a href="#用户体验与软件产品" class="headerlink" title="用户体验与软件产品"></a>用户体验与软件产品</h3><p>用户体验值用户对产品建立的主观感受和认识</p><p>提高用户体验的方法</p><p>增加进度展示  在程序需等待时，或者有若干步时、存在大量循环时</p><p>异常处理  判段输入合理性，当读写文件时，当需输入输出时</p><p>打印输出  输出程序过程，使用户了解自己的操作效果</p><h3 id="基本的程序设计模式"><a href="#基本的程序设计模式" class="headerlink" title="基本的程序设计模式"></a>基本的程序设计模式</h3><p>IPO</p><p>确定IPO:明确计算部分及功能边界</p><p>编写程序：将计算求解的计划变成现实</p><p>调试程序：确保程序按照正确逻辑能过正确运行</p><p>自顶向下设计</p><p>模块设计</p><p>主程序和子程序、分治</p><p>紧耦合、松耦合</p><p>配置化设计</p><p>程序引擎 + 数据配置文件</p><p>程序和参数分离，只改变参数，即可</p><p>应用开发</p><p>产品定义、系统架构、设计与实现、用户体验</p><p>定义产品 </p><p>应用需求充分理解和明确定义</p><p>产品定义，而不是功能定义，要考虑商业模式</p><p>系统架构</p><p>以系统方式思考产品的技术实现</p><p>系统架构，关注数据留、模块化、体系架构</p><p>设计与实现</p><p>结合架构完成关键设计及系统实现</p><p>结合可扩展性、灵活性等进行设计优化</p><p>用户体验</p><p>从用户角度思考，改善用户体验</p><h3 id="0x3-Python第三方库安装"><a href="#0x3-Python第三方库安装" class="headerlink" title="0x3 Python第三方库安装"></a>0x3 Python第三方库安装</h3><h4 id="python第三方库获得"><a href="#python第三方库获得" class="headerlink" title="python第三方库获得"></a>python第三方库获得</h4><p>全球第三方库社区 <a href="https://pypi.org/">https://pypi.org/</a></p><p>PyPI ： Python Package Index</p><p>PSF维护的展示全球的Python计算生态的主站</p><p>实例 开发与区块链相关</p><p>搜索 blockchain</p><p>挑选 适合开发目标的第三方库作为基础</p><p>完成 自己需要的功能</p><h4 id="第三方库的安装"><a href="#第三方库的安装" class="headerlink" title="第三方库的安装"></a>第三方库的安装</h4><h4 id="pip安装方法"><a href="#pip安装方法" class="headerlink" title="pip安装方法"></a>pip安装方法</h4><p>使用pip安装工具，最常用</p><p>需联网</p><p>三方平台均可</p><p>cmd 命令行</p><p>常用pip指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C">pip install -U 第三方库名 <br><span class="hljs-comment">//-使用—U标签更新已安装的指定第三方库</span><br>pip uninstall &lt;第三方库名&gt;<br><span class="hljs-comment">//卸载指定第三方库</span><br>pip dounload &lt;第三方库名&gt;<br><span class="hljs-comment">//下载但不安装指定的第三方库</span><br>pip show &lt;第三方库名&gt;  <br><span class="hljs-comment">//列出某个指定第三方库的详细信息</span><br>pip search &lt;关键词&gt;<br><span class="hljs-comment">//根据关键词在名称和介绍中搜索第三方库</span><br>如 ：pip search blockchain    <br></code></pre></td></tr></table></figure><p>出现错误一般与网络环境有关们可以换个网络连接，或者换个时间</p><h4 id="集成安装方法"><a href="#集成安装方法" class="headerlink" title="集成安装方法"></a>集成安装方法</h4><p>Anaconda 开发环境</p><p> https：//<a href="http://www.continuum.io/">www.continuum.io</a></p><p>支持近800个第三方库</p><p>包含多个主流工具</p><p>适合数据计算领域开发</p><h4 id="文件安装方法"><a href="#文件安装方法" class="headerlink" title="文件安装方法"></a>文件安装方法</h4><p>有些第三方库pip下载后，需要编译再安装</p><p>如果没有编译环境则只能下载不能安装</p><p>UCI页面  <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p>编译过的安装包</p><p>下载在指定文件夹后，pip 安装</p><h3 id="0x4-模块-os库的基本使用"><a href="#0x4-模块-os库的基本使用" class="headerlink" title="0x4 模块 os库的基本使用"></a>0x4 模块 os库的基本使用</h3><p>os库的基本介绍</p><p>与操作系统相关</p><p>Python标准函数、几百个函数</p><p>基本功能</p><p>路径操作：os.path子库，处理文件路径及信息</p><p>进程管理：启动系统中其他信息</p><p>环境参数：获得系统软硬件信息等环境参数</p><p>路径操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os.path<br>或者<br><span class="hljs-keyword">import</span> os.path <span class="hljs-keyword">as</span> op <span class="hljs-comment">#op 子库设置别名</span><br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/yS2yJH"><img src="https://s3.ax1x.com/2021/01/28/yS2yJH.png" alt="yS2yJH.png" border="0" /></a></p><p><a href="https://imgchr.com/i/yS2TYQ"><img src="https://s3.ax1x.com/2021/01/28/yS2TYQ.png" alt="yS2TYQ.png" border="0" /></a></p><p><a href="https://imgchr.com/i/ySRilR"><img src="https://s3.ax1x.com/2021/01/28/ySRilR.png" alt="ySRilR.png" border="0" /></a></p><p><a href="https://imgchr.com/i/ySRJ78"><img src="https://s3.ax1x.com/2021/01/28/ySRJ78.png" alt="ySRJ78.png" border="0" /></a></p><p><a href="https://imgchr.com/i/ySRsBV"><img src="https://s3.ax1x.com/2021/01/28/ySRsBV.png" alt="ySRsBV.png" border="0" /></a></p><p>进程管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.system(command)<br></code></pre></td></tr></table></figure><p>执行程序或命令command</p><p>在windows系统中，返回值为cmd的调用返回信息</p><p>实例 打开计算器程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.system(<span class="hljs-string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>)<br></code></pre></td></tr></table></figure><p>返回0，计算器被打开</p><p>环境参数</p><p>获取或改变操作系统中的环境信息</p><p><a href="https://imgchr.com/i/ySfAIO"><img src="https://s3.ax1x.com/2021/01/28/ySfAIO.png" alt="ySfAIO.png" border="0" /></a></p><p><a href="https://imgchr.com/i/ySfFZ6"><img src="https://s3.ax1x.com/2021/01/28/ySfFZ6.png" alt="ySfFZ6.png" border="0" /></a></p><p><a href="https://imgchr.com/i/ySfKsI"><img src="https://s3.ax1x.com/2021/01/28/ySfKsI.png" alt="ySfKsI.png" border="0" /></a></p><h3 id="0x5-实例第三方库安装脚本"><a href="#0x5-实例第三方库安装脚本" class="headerlink" title="0x5 实例第三方库安装脚本"></a>0x5 实例第三方库安装脚本</h3><p>第三方自动安装脚本</p><p>需求  自动执行pip，逐一安装第三方库</p><p>问题假设</p><p>将要安装20个第三方库</p><p><a href="https://imgchr.com/i/yShPpQ"><img src="https://s3.ax1x.com/2021/01/28/yShPpQ.png" alt="yShPpQ.png" border="0" /></a></p><p><a href="https://imgchr.com/i/yShmkT"><img src="https://s3.ax1x.com/2021/01/28/yShmkT.png" alt="yShmkT.png" border="0" /></a></p><p><a href="https://imgchr.com/i/yShMp4"><img src="https://s3.ax1x.com/2021/01/28/yShMp4.png" alt="yShMp4.png" border="0" /></a></p><p><a href="https://imgchr.com/i/yShw1H"><img src="https://s3.ax1x.com/2021/01/28/yShw1H.png" alt="yShw1H.png" border="0" /></a></p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>libs = &#123;<span class="hljs-string">&quot;numpy&quot;</span>,<span class="hljs-string">&quot;matplotlib&quot;</span>,<span class="hljs-string">&quot;pillow&quot;</span>,<span class="hljs-string">&quot;sklearn&quot;</span>,<span class="hljs-string">&quot;requests&quot;</span>,\<br>        <span class="hljs-string">&quot;jieba&quot;</span>,<span class="hljs-string">&quot;beautifulsoup4&quot;</span>,<span class="hljs-string">&quot;wheel&quot;</span>,<span class="hljs-string">&quot;networkx&quot;</span>,<span class="hljs-string">&quot;sympy&quot;</span>,\<br>        <span class="hljs-string">&quot;pyinstaller&quot;</span>,<span class="hljs-string">&quot;django&quot;</span>,<span class="hljs-string">&quot;flask&quot;</span>,<span class="hljs-string">&quot;werobot&quot;</span>,<span class="hljs-string">&quot;pyqt5&quot;</span>,<br>        <span class="hljs-string">&quot;pandas&quot;</span>,<span class="hljs-string">&quot;pypopengl&quot;</span>,<span class="hljs-string">&quot;pypdf2&quot;</span>,<span class="hljs-string">&quot;docopt&quot;</span>,<span class="hljs-string">&quot;pygame&quot;</span>&#125;<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">for</span> lib <span class="hljs-keyword">in</span> libs:<br>        os.system(<span class="hljs-string">&quot;pip install&quot;</span> +<span class="hljs-string">&quot; &quot;</span>+ lib)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Successful&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed Somehow&quot;</span>)<br></code></pre></td></tr></table></figure><p>举一反三</p><p>自动化脚本 +</p><p>编写各类自动执行程序的脚本</p><p>扩展应用为引擎配置文件</p><p>识别失败信息</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（四）Python程序控制结构</title>
    <link href="/2021/10/02/Python%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%8C%96%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/10/02/Python%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%8C%96%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="程序控制结构"><a href="#程序控制结构" class="headerlink" title="程序控制结构"></a>程序控制结构</h2><h3 id="0x1-程序的分支结构"><a href="#0x1-程序的分支结构" class="headerlink" title="0x1 程序的分支结构"></a>0x1 程序的分支结构</h3><h4 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> &lt;条件&gt;:<br>    &lt;语句块&gt;<br></code></pre></td></tr></table></figure><h4 id="二分支结构"><a href="#二分支结构" class="headerlink" title="二分支结构"></a>二分支结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> &lt;条件&gt;:<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;<br>    <br><span class="hljs-comment">#示例：    </span><br>guess = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> guess == <span class="hljs-number">99</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜&#123;&#125;了&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;对&quot;</span>))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜&#123;&#125;了&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;错&quot;</span>))<br>    <br><span class="hljs-comment">#紧凑形式：</span><br>&lt;表达式<span class="hljs-number">1</span>&gt; <span class="hljs-keyword">if</span> &lt;条件&gt; <span class="hljs-keyword">else</span> &lt;表达式<span class="hljs-number">2</span>&gt;<br><br>guess = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜&#123;&#125;了&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;对&quot;</span> <span class="hljs-keyword">if</span> guess == <span class="hljs-number">99</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;错&quot;</span>))<br></code></pre></td></tr></table></figure><p>==紧凑形式中，if，else所对应的不是语句，而是表达式，不能赋值，只能放在类似上述的执行语句中==</p><h4 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> &lt;条件&gt; :<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">elif</span>:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;语句块<span class="hljs-number">3</span>&gt;<br></code></pre></td></tr></table></figure><p>条件判断操作符与C相同</p><h4 id="逻辑保留字"><a href="#逻辑保留字" class="headerlink" title="逻辑保留字"></a>逻辑保留字</h4><p> and（&amp;&amp;）、or（||）、not（！）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> A &gt; B <span class="hljs-keyword">or</span> B &lt; A :<br>    &lt;执行语句&gt;<br></code></pre></td></tr></table></figure><h3 id="0x2-程序的异常处理"><a href="#0x2-程序的异常处理" class="headerlink" title="0x2 程序的异常处理"></a>0x2 程序的异常处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">abc = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入数字&quot;</span>))<br><span class="hljs-built_in">print</span>(num**<span class="hljs-number">2</span>)<br>请输入数字<span class="hljs-number">0.2</span><br><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;E:\python_item\text1.py&quot;</span>, line <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">print</span>(num**<span class="hljs-number">2</span>)<br>NameError: name <span class="hljs-string">&#x27;num&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></td></tr></table></figure><p>NameError 是python内部预定义的错误名称，可以作为错误类型进行判断</p><p>类似的python内部有许多错误名称，都可以用来判断</p><h4 id="异常处理的基本使用"><a href="#异常处理的基本使用" class="headerlink" title="异常处理的基本使用"></a>异常处理的基本使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#执行出错执行下方操作</span><br><span class="hljs-keyword">try</span>:<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">except</span>:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;  <br>    <br><span class="hljs-comment">#判断是否属于某种错误，该错误再执行下方操作</span><br><span class="hljs-keyword">try</span>:<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">except</span> &lt;异常名称&gt;:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;<br>    <br><span class="hljs-comment">#异常处理的高级使用</span><br><span class="hljs-keyword">try</span>:<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">except</span>:          <span class="hljs-comment">#发生异常时执行</span><br>    &lt;语句块<span class="hljs-number">2</span>&gt;  <br><span class="hljs-keyword">else</span>:            <span class="hljs-comment">#不发生异常时执行</span><br>    &lt;语句块<span class="hljs-number">3</span>&gt;<br><span class="hljs-keyword">finally</span>:         <span class="hljs-comment">#finally对应语句块4一定执行</span><br>    &lt;语句块<span class="hljs-number">4</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="0x3-身体质量指数BMI"><a href="#0x3-身体质量指数BMI" class="headerlink" title="0x3 身体质量指数BMI"></a>0x3 身体质量指数BMI</h3><h4 id="问题分析：body-Mass-index"><a href="#问题分析：body-Mass-index" class="headerlink" title="问题分析：body Mass index"></a>问题分析：body Mass index</h4><p>定义：BMI = 体重(kg)/身高^2 (m^2)</p><p>国际标准：世界卫生组织  国内：国家卫生健康委员会</p><table><thead><tr><th align="center">分类</th><th align="center">国际BMI（kg/m^2）</th><th align="center">国内BMI值（kg/m^2）</th></tr></thead><tbody><tr><td align="center">偏瘦</td><td align="center">&lt; 18.5</td><td align="center">&lt; 18.5</td></tr><tr><td align="center">正常</td><td align="center">18.5~25</td><td align="center">18.5~24</td></tr><tr><td align="center">偏胖</td><td align="center">25~30</td><td align="center">24~28</td></tr><tr><td align="center">肥胖</td><td align="center">≥30</td><td align="center">≥28</td></tr></tbody></table><h4 id="问题需求：输入体重和身高值"><a href="#问题需求：输入体重和身高值" class="headerlink" title="问题需求：输入体重和身高值"></a>问题需求：输入体重和身高值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#CalBMIv1.py</span><br>height,weight = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入身高(米)和体重\(公斤)[逗号隔开]&quot;</span>))<br>bmi = weight / <span class="hljs-built_in">pow</span>(height,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BMI 数值为:&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(bmi))<br>who = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> bmi &lt; <span class="hljs-number">18.5</span>:<br>    who = <span class="hljs-string">&quot;偏瘦&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">18.5</span> &lt;= bmi &lt;<span class="hljs-number">25</span> :<br>    who = <span class="hljs-string">&quot;正常&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">25</span> &lt;= bmi &lt; <span class="hljs-number">30</span>:<br>    who = <span class="hljs-string">&quot;偏胖&quot;</span><br><span class="hljs-keyword">else</span>:<br>    who = <span class="hljs-string">&quot;肥胖&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BMI 指标为：国际&#x27;&#123;0&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(who))<br><br><span class="hljs-comment">#输出：</span><br>请输入身高(米)和体重\(公斤)[逗号隔开]<span class="hljs-number">1.8</span>,<span class="hljs-number">73</span><br>BMI 数值为:<span class="hljs-number">22.53</span><br>BMI 指标为：国际<span class="hljs-string">&#x27;正常&#x27;</span><br><br><span class="hljs-comment">#CalBMIv2.py</span><br>height,weight = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入身高(米)和体重\(公斤)[逗号隔开]&quot;</span>))<br>bmi = weight / <span class="hljs-built_in">pow</span>(height,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BMI 数值为:&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(bmi))<br>who,nat = <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> bmi &lt; <span class="hljs-number">18.5</span>:<br>    who,nat = <span class="hljs-string">&quot;偏瘦&quot;</span>,<span class="hljs-string">&quot;偏瘦&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">18.5</span> &lt;= bmi &lt;<span class="hljs-number">24</span> :<br>    who,nat= <span class="hljs-string">&quot;正常&quot;</span>,<span class="hljs-string">&quot;正常&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">24</span> &lt;= bmi &lt; <span class="hljs-number">25</span>:<br>    who,nat= <span class="hljs-string">&quot;正常&quot;</span>,<span class="hljs-string">&quot;偏胖&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">25</span> &lt;= bmi &lt; <span class="hljs-number">28</span>:<br>    who,nat= <span class="hljs-string">&quot;偏胖&quot;</span>, <span class="hljs-string">&quot;偏胖&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">28</span> &lt;= bmi &lt; <span class="hljs-number">30</span>:<br>    who,nat= <span class="hljs-string">&quot;偏胖&quot;</span>,<span class="hljs-string">&quot;肥胖&quot;</span><br><span class="hljs-keyword">else</span>:<br>    who,nat= <span class="hljs-string">&quot;肥胖&quot;</span>,<span class="hljs-string">&quot;肥胖&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BMI 指标为：国际&#x27;&#123;0&#125;&#x27;,国内&#x27;&#123;1&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(who,nat))<br><br><span class="hljs-comment">#输出：</span><br>请输入身高(米)和体重\(公斤)[逗号隔开]<span class="hljs-number">1.8</span>,<span class="hljs-number">73</span><br>BMI 数值为:<span class="hljs-number">22.53</span><br>BMI 指标为：国际<span class="hljs-string">&#x27;正常&#x27;</span>,国内<span class="hljs-string">&#x27;正常&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="多分支组合注意"><a href="#多分支组合注意" class="headerlink" title="多分支组合注意"></a>多分支组合注意</h4><p>多分支条件之间的覆盖要分析清除</p><p>程序可运行，但不正确要注意多分支</p><p>阅读代码时，先看分支</p><h3 id="0x4-程序的循环结构"><a href="#0x4-程序的循环结构" class="headerlink" title="0x4 程序的循环结构"></a>0x4 程序的循环结构</h3><h4 id="for遍历"><a href="#for遍历" class="headerlink" title="for遍历"></a>for遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> &lt;循环变量&gt; <span class="hljs-keyword">in</span> &lt;遍历结构&gt;:<br>    &lt;语句块&gt;<br>    <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):  <span class="hljs-comment"># range(N)产生数字序列，包含N个元素 0 到 N-1.</span><br>    &lt;语句块&gt;<br>    <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M,N,K):  <span class="hljs-comment">#产生以M开始不到N的以K为步长取数的序列</span><br>    <br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s :  <span class="hljs-comment">#字符串遍历，s是字符串，取出s中每个字符到循环变量中，执行语句</span><br>    <br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ls :  <span class="hljs-comment">#对列表进行遍历，取出每个列表元素遍历  [123,&quot;PY&quot;,456]</span><br>    <br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fi :  <span class="hljs-comment">#文件遍历循环，fi文件标识符，遍历文件每一行，</span><br>    <span class="hljs-built_in">print</span>(line)   <span class="hljs-comment">#打印每行</span><br></code></pre></td></tr></table></figure><p>还可以对元组等遍历循环，只要是多个元素组成的数据结构，都可以用for in 遍历</p><p>逐一从遍历结构中提取元素到循环变量中，然后执行语句块</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> &lt;条件判断&gt; :<br>    &lt;语句块&gt;<br></code></pre></td></tr></table></figure><h4 id="循环控制保留字"><a href="#循环控制保留字" class="headerlink" title="循环控制保留字"></a>循环控制保留字</h4><p>break 和 continue 与 C 含义相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;PYTHON&quot;</span> :<br>    <span class="hljs-keyword">if</span> c ==<span class="hljs-string">&quot;T&quot;</span>:<br>        <span class="hljs-keyword">break</span>  <span class="hljs-comment">#或者写continue</span><br>    <span class="hljs-built_in">print</span>(c , end =<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="循环高级用法"><a href="#循环高级用法" class="headerlink" title="循环高级用法"></a>循环高级用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#else没有被break退出时，循环正常完成，则执行else语句</span><br><span class="hljs-comment">#for循环加else</span><br><span class="hljs-keyword">for</span> &lt;循环变量&gt; <span class="hljs-keyword">in</span> &lt;遍历结构&gt; :<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;<br>    <br><span class="hljs-comment">#while循环加else</span><br><span class="hljs-keyword">while</span> &lt;条件&gt; ：<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="0x5-random库使用"><a href="#0x5-random库使用" class="headerlink" title="0x5 random库使用"></a>0x5 random库使用</h3><h4 id="random库介绍"><a href="#random库介绍" class="headerlink" title="random库介绍"></a>random库介绍</h4><p>random库时使用随机数的python标准库，主要用于生成随机数</p><p>伪随机数：采用==梅森旋转算法==生成的伪随机序列中元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>基本随机数函数：seed(),random()<br>扩展随机数函数:randint(),getrandbits(),uniform(),randrange(),choice(),shuffle()<br></code></pre></td></tr></table></figure><h4 id="基本随机数函数"><a href="#基本随机数函数" class="headerlink" title="基本随机数函数"></a>基本随机数函数</h4><p>随机数种子：用来通过==梅森旋转算法==产生随机序列，随机序列中的数就是随机数</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">seed(a = None)</td><td align="center">初始化给定的随机数种子，默认为当前系统时间(精确到微妙)</td></tr><tr><td align="center">random()</td><td align="center">生成一个[0.0 ,1.0)之间的随机小数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> random<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.seed(<span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.random()<br><span class="hljs-number">0.13436424411240122</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.random()<br><span class="hljs-number">0.8474337369372327</span><br><span class="hljs-comment">#设定seed(10),在不同设备上产生的随机数时一致的，为了再现随机程序，再次设定后调用产生的随机数结果也是一样的</span><br></code></pre></td></tr></table></figure><h4 id="扩展随机数函数"><a href="#扩展随机数函数" class="headerlink" title="扩展随机数函数"></a>扩展随机数函数</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>randint(a,b)</td><td>生成一个[a,b]之间的随机整数</td></tr><tr><td>randrange(m,n[,k])</td><td>生成一个[m,n]之间以k为步长的随机整数</td></tr><tr><td>getrandbits(k)</td><td>生成一个k比特长度随机整数</td></tr><tr><td>uniform(a,b)</td><td>生成一个[a,b]之间的随机小数，16位精度</td></tr><tr><td>choice(seq)</td><td>从序列seq中随机选择一个元素</td></tr><tr><td>shuffle(seq)</td><td>将序列seq中元素随机排列，返回打乱后的序列</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)<br><span class="hljs-number">98</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.randrange(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-number">10</span>)<br><span class="hljs-number">40</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.getrandbits(<span class="hljs-number">8</span>)<br><span class="hljs-number">126</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.getrandbits(<span class="hljs-number">32</span>)<br><span class="hljs-number">3268308804</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.uniform(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br><span class="hljs-number">5.045419583098643</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.choice(s)<br><span class="hljs-number">7</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.shuffle(s)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s)<br>[<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.shuffle(s)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s)<br>[<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> random;s=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];random.shuffle(s);<span class="hljs-built_in">print</span>(s)  <span class="hljs-comment">#可以用分号；将语句放到一行</span><br>[<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h3 id="0x6-实例-圆周率计算"><a href="#0x6-实例-圆周率计算" class="headerlink" title="0x6 实例 圆周率计算"></a>0x6 实例 圆周率计算</h3><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>圆周率的近似计算公式</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=\pi&space;=&space;\sum_{k&space;=&space;0}^{\infty&space;}[\frac{1}{16^{k}}\left&space;(&space;\frac{4}{8k&plus;1}&space;-\frac{2}{8k&plus;4}-\frac{1}{8k&plus;5}-\frac{1}{8k&plus;6}\right&space;)]" target="_blank"><img src="https://latex.codecogs.com/png.latex?\pi&space;=&space;\sum_{k&space;=&space;0}^{\infty&space;}[\frac{1}{16^{k}}\left&space;(&space;\frac{4}{8k&plus;1}&space;-\frac{2}{8k&plus;4}-\frac{1}{8k&plus;5}-\frac{1}{8k&plus;6}\right&space;)]" title="\pi = \sum_{k = 0}^{\infty }[\frac{1}{16^{k}}\left ( \frac{4}{8k+1} -\frac{2}{8k+4}-\frac{1}{8k+5}-\frac{1}{8k+6}\right )]" /></a>  无限求和公式</p><p>蒙特卡罗方法</p><p>对正方形随机撒点，撒点数量的比值</p><p><a href="https://imgchr.com/i/s3tylj"><img src="https://s3.ax1x.com/2021/01/11/s3tylj.png" alt="s3tylj.png"></a></p><h4 id="公式法"><a href="#公式法" class="headerlink" title="公式法"></a>公式法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#CalPiv1.py</span><br>pi = <span class="hljs-number">0</span><br>N = <span class="hljs-number">100</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    pi += <span class="hljs-number">1</span>/<span class="hljs-built_in">pow</span>(<span class="hljs-number">16</span>,k)*( \         <span class="hljs-comment">#  \ 可用于换行，不影响程序运行可以多次使用，提高可读性</span><br>       <span class="hljs-number">4</span>/(<span class="hljs-number">8</span>*k +<span class="hljs-number">1</span>) - <span class="hljs-number">2</span>/(<span class="hljs-number">8</span>*k +<span class="hljs-number">4</span>) - \<br>       <span class="hljs-number">1</span>/(<span class="hljs-number">8</span>*k +<span class="hljs-number">5</span>) - <span class="hljs-number">1</span>/(<span class="hljs-number">8</span>*k+<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆周率值是：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(pi))<br><br>输出：<br>圆周率值是：<span class="hljs-number">3.141592653589793</span><br></code></pre></td></tr></table></figure><h4 id="蒙特卡罗法"><a href="#蒙特卡罗法" class="headerlink" title="蒙特卡罗法"></a>蒙特卡罗法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#CalPiv1.py</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> perf_counter<br>DARTS = <span class="hljs-number">10000</span>*<span class="hljs-number">10000</span><br>hits = <span class="hljs-number">0.0</span><br>start = perf_counter()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,DARTS+<span class="hljs-number">1</span>):<br>    x,y = random(),random()<br>    dist = <span class="hljs-built_in">pow</span>(x**<span class="hljs-number">2</span>+y**<span class="hljs-number">2</span>,<span class="hljs-number">0.5</span>)<br>    <span class="hljs-keyword">if</span> dist &lt;= <span class="hljs-number">1.0</span>:<br>        hits = hits + <span class="hljs-number">1</span><br>pi = <span class="hljs-number">4</span> *(hits/DARTS)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆周率值是：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(pi))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;运行时间是：&#123;:.5f&#125;s&quot;</span>.<span class="hljs-built_in">format</span>(perf_counter()-start))<br><br>圆周率值是：<span class="hljs-number">3.143908</span><br>运行时间是：<span class="hljs-number">0.71663</span>s<br><br>圆周率值是：<span class="hljs-number">3.14156908</span><br>运行时间是：<span class="hljs-number">59.99088</span>s<br></code></pre></td></tr></table></figure><h4 id="理解方法思维"><a href="#理解方法思维" class="headerlink" title="理解方法思维"></a>理解方法思维</h4><p>数学思维</p><p>计算思维</p><p>四色定理</p><ul><li><p>程序运行时间分析</p><p>程序运行80%的时间消耗在不到10%的循环代码上</p><p>用于求解某个特定图形的面积</p></li></ul><h2 id="函数和代码复用"><a href="#函数和代码复用" class="headerlink" title="函数和代码复用"></a>函数和代码复用</h2><h3 id="0x1-函数的定义及使用"><a href="#0x1-函数的定义及使用" class="headerlink" title="0x1 函数的定义及使用"></a>0x1 函数的定义及使用</h3><h4 id="函数的理解与定义"><a href="#函数的理解与定义" class="headerlink" title="函数的理解与定义"></a>函数的理解与定义</h4><p>是一种抽象</p><p>定义的时候可以没有参数，但必须有括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> &lt;函数名&gt;(<span class="hljs-params">参数</span>)：</span><br><span class="hljs-function">    &lt;函数体&gt;</span><br><span class="hljs-function">    <span class="hljs-title">return</span> &lt;返回值&gt;</span><br><span class="hljs-function"></span><br><span class="hljs-function">示例：</span><br><span class="hljs-function"><span class="hljs-title">def</span> <span class="hljs-title">dayUP</span>(<span class="hljs-params">df</span>):</span>      <span class="hljs-comment">#函数dayUP</span><br>    dayup = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">365</span>):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">7</span> <span class="hljs-keyword">in</span>[<span class="hljs-number">6</span>,<span class="hljs-number">0</span>]:<br>            dayup = dayup*(<span class="hljs-number">1</span> - <span class="hljs-number">0.01</span>)<br>        <span class="hljs-keyword">else</span>:<br>            dayup = dayup * (<span class="hljs-number">1</span> + df)<br>    <span class="hljs-keyword">return</span> dayup<br></code></pre></td></tr></table></figure><h4 id="函数的使用及调用过程"><a href="#函数的使用及调用过程" class="headerlink" title="函数的使用及调用过程"></a>函数的使用及调用过程</h4><p>函数调用是，用实际值替换函数中参数</p><h4 id="函数的参数传递"><a href="#函数的参数传递" class="headerlink" title="函数的参数传递"></a>函数的参数传递</h4><p>可选参数传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#调用参数时，必须有必选参数。可选参数可以没有，如果没有，则使用定义的默认值</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> &lt;函数体&gt;(<span class="hljs-params">&lt;必选参数&gt;，&lt;可选参数&gt;</span>):</span><br>    &lt;函数体&gt;<br>    <span class="hljs-keyword">return</span> &lt;返回值&gt;<br><br>示例：<br><span class="hljs-comment">#1</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n,m=<span class="hljs-number">1</span></span>):</span><br>    s = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">return</span> s//m<br><span class="hljs-built_in">print</span>(fact(<span class="hljs-number">10</span>))<br><span class="hljs-number">3628800</span><br><br><span class="hljs-comment">#2计算n的阶乘，m = 1是默认的参数，不给指定参数则默认为1</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n,m=<span class="hljs-number">1</span></span>):</span>  <br>    s = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">return</span> s//m<br><span class="hljs-built_in">print</span>(fact(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>))<br><span class="hljs-number">725760</span><br></code></pre></td></tr></table></figure><p>可变参数传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#多个可变参数调用</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n,*b</span>):</span>  <span class="hljs-comment"># *b表示可变参数</span><br>    s = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> b :    <span class="hljs-comment">#如果b是一个列表， in b 将依次调用 b 中的值赋给item</span><br>        s *= item<br>    <span class="hljs-keyword">return</span> s<br><br>示例：n！乘数<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n,*b</span>):</span>  <span class="hljs-comment"># *b表示可变参数</span><br>    s = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> b :    <span class="hljs-comment">#如果b是一个列表， in b 将依次调用 b 中的值赋给item</span><br>        s *= item<br>    <span class="hljs-keyword">return</span> s<br>    <br><span class="hljs-built_in">print</span>(fact(<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>))<br><span class="hljs-built_in">print</span>(fact(<span class="hljs-number">13</span>))<br><br><span class="hljs-number">6227020800</span><br><span class="hljs-number">6227020800</span><br></code></pre></td></tr></table></figure><p>函数调用时，参数可以按照位置或名称方式传递(代表地址)</p><p>位置传递</p><p>名称传递</p><p><a href="https://imgchr.com/i/sgnAs0"><img src="https://s3.ax1x.com/2021/01/19/sgnAs0.png" alt="sgnAs0.png"></a></p><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><p>return，和c类似，不一定有返回值，或者传多个</p><p>但是返回的语法不同</p><p><a href="https://imgchr.com/i/sgntoD"><img src="https://s3.ax1x.com/2021/01/19/sgntoD.png" alt="sgntoD.png"></a></p><p>多个返回的是 元组数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n,m=<span class="hljs-number">1</span></span>) :</span><br>s = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>s *= i<br><span class="hljs-keyword">return</span> s//m,n,m<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a,b,c = fact(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment">#元组类型赋值，输出</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a,b,c)<br><span class="hljs-number">725760</span> <span class="hljs-number">10</span> <span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure><h4 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h4><p>函数定义，就属于全局变量</p><h5 id="规则1-局部变量与全局变量不同"><a href="#规则1-局部变量与全局变量不同" class="headerlink" title="规则1 局部变量与全局变量不同"></a>规则1 局部变量与全局变量不同</h5><p>函数定义的函数体中的是局部变量</p><p>函数运算结束后，局部变量会释放</p><p>函数内部的局部变量可以可以和外部的变量重名，但不同</p><p> ==全局变量的函数调用==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#使用 global 保留字在函数内部使用全局变量</span><br>n,s = <span class="hljs-number">10</span> , <span class="hljs-number">100</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n</span>):</span><br>    s = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">return</span> s<br><span class="hljs-built_in">print</span>(fact(n),s)   <span class="hljs-comment">#此处s 是全局变量s</span><br><br>——————————————————————————————————————————<br><br>n,s = <span class="hljs-number">10</span> , <span class="hljs-number">100</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">global</span> s  <span class="hljs-comment">#此处表示使用的是全局变量S </span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">return</span> s  <span class="hljs-comment">#此处是指全局变量s的运算结果</span><br><span class="hljs-built_in">print</span>(fact(n),s)   <span class="hljs-comment">#此处s 是全局变量s，但是被函数运算修改了</span><br></code></pre></td></tr></table></figure><h5 id="规则2"><a href="#规则2" class="headerlink" title="规则2"></a>规则2</h5><p>局部变量为组合数据类型且在函数内部未创建时，且它的名字和全局变量同名，则该函数内部的变量等同于全局变量，即全局变量会发生改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#ls在函数内部为全局变量</span><br><br>ls = [<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>]  <span class="hljs-comment">#通过使用[]“真实&quot;创建了一个全局变量列表ls</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">a</span>) :</span><br>    ls.append(a)   <span class="hljs-comment">#此处ls是列表类型，未真实创建则等同于全局变量</span><br>    <span class="hljs-keyword">return</span><br>fun(<span class="hljs-string">&quot;C&quot;</span>)     <span class="hljs-comment">#全局变量ls被修改</span><br><span class="hljs-built_in">print</span>(ls)<br><br>运行结果<br>[<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>]<br><br>-------------------------------<br><span class="hljs-comment">#ls在函数内部为局部变量</span><br><br>ls = [<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>]  <span class="hljs-comment">#通过使用[]“真实&quot;创建了一个全局变量列表ls</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">a</span>) :</span><br>    ls = []        <span class="hljs-comment">#此处在函数内部被真实创建，此时则为局部变量</span><br>    ls.append(a)   <span class="hljs-comment">#此处ls是列表类型</span><br>    <span class="hljs-keyword">return</span><br>fun(<span class="hljs-string">&quot;C&quot;</span>) <br><span class="hljs-built_in">print</span>(ls)<br><br>运行结果<br>[<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>]<br><br></code></pre></td></tr></table></figure><p>此处组合数据类型与C语言中的指针相对应，如果在函数内部没有创建，则以指针的方式调用外部变量</p><p>规则总结</p><p>基本数据类型，无论是否重名，局部变量与全局变量不同，可以通过global保留字在函数内部声明全局变量</p><p>组合数据类型，如果局部百年来未真实创建，则是全局变量</p><h4 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h4><p>返回一个函数名，是一种匿名函数</p><p>用于定义简单的、能够在一行内表示的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;函数名&gt; = <span class="hljs-keyword">lambda</span> &lt;参数&gt;:&lt;表达式&gt;<br></code></pre></td></tr></table></figure><p>等价于def，区别是，内容只能是表达式，不能是函数体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>f = <span class="hljs-keyword">lambda</span> x,y: x+y<br><span class="hljs-meta">&gt;&gt;&gt; </span>f(<span class="hljs-number">10</span>,<span class="hljs-number">15</span>)<br><span class="hljs-number">25</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>f = <span class="hljs-keyword">lambda</span> : <span class="hljs-string">&quot;lambda函数&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(f())<br><span class="hljs-keyword">lambda</span>函数<br></code></pre></td></tr></table></figure><p>建议使用def定义函数，特殊情况使用lambda</p><h3 id="0x2-实例七段数码管绘制"><a href="#0x2-实例七段数码管绘制" class="headerlink" title="0x2 实例七段数码管绘制"></a>0x2 实例七段数码管绘制</h3><h4 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h4><p>七段不同的数码管的亮暗，可以显示数字，字母</p><p>用程序绘制七段数码管</p><p>效果</p><p><a href="https://imgchr.com/i/s2pROJ"><img src="https://s3.ax1x.com/2021/01/19/s2pROJ.png" alt="s2pROJ.png"></a></p><h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><p>绘制单个数字，对应数码管</p><p>获得一串数字，一一表示</p><p>获得系统时间，表示出来</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>第一步，绘制单个数字，对应数码管</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawLine</span>(<span class="hljs-params">draw</span>):</span>  <span class="hljs-comment">#单段数码管，函数绘制一条线，并且判断该线是越过还是画</span><br>    turtle.pendown()<span class="hljs-keyword">if</span> draw <span class="hljs-keyword">else</span> turtle.penup()<br>    turtle.fd(<span class="hljs-number">40</span>)<br>    turtle.right(<span class="hljs-number">90</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDight</span>(<span class="hljs-params">digit</span>):</span> <span class="hljs-comment">#根据数字绘制七段数码管</span><br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">90</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">180</span>)<br>    turtle.penup()  <span class="hljs-comment">#为绘制后续数字确定位置</span><br>    turtle.fd(<span class="hljs-number">20</span>)   <span class="hljs-comment">#为绘制后续数字确定位置</span><br></code></pre></td></tr></table></figure><p>第二步，获得一串数字，一一表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDate</span>(<span class="hljs-params">date</span>):</span>  <span class="hljs-comment">#获得要输出的数字</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> date: <br>        drawDight(<span class="hljs-built_in">eval</span>(i))  <span class="hljs-comment">#通过eval()函数将数字变成整数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>    turtle.penup()<br>    turtle.fd(-<span class="hljs-number">300</span>)<br>    turtle.pensize(<span class="hljs-number">5</span>)<br>    drawDate(<span class="hljs-string">&#x27;20181010&#x27;</span>)<br>    turtle.hideturtle()<br>    turtle.done()<br>main()<br></code></pre></td></tr></table></figure><p>第三步，获得系统时间，表示出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><span class="hljs-keyword">import</span> time<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawLine</span>(<span class="hljs-params">draw</span>):</span>  <span class="hljs-comment">#单段数码管，函数绘制一条线，并且判断该线是越过还是画</span><br>    turtle.pendown()<span class="hljs-keyword">if</span> draw <span class="hljs-keyword">else</span> turtle.penup()<br>    turtle.fd(<span class="hljs-number">40</span>)<br>    turtle.right(<span class="hljs-number">90</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDight</span>(<span class="hljs-params">digit</span>):</span> <span class="hljs-comment">#根据数字绘制七段数码管</span><br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">90</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">180</span>)<br>    turtle.penup()  <span class="hljs-comment">#为绘制后续数字确定位置</span><br>    turtle.fd(<span class="hljs-number">20</span>)   <span class="hljs-comment">#为绘制后续数字确定位置</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDate</span>(<span class="hljs-params">date</span>):</span>  <span class="hljs-comment">#获得要输出的数字</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> date: <br>        drawDight(<span class="hljs-built_in">eval</span>(i))  <span class="hljs-comment">#通过eval()函数将数字变成整数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>    turtle.penup()<br>    turtle.fd(-<span class="hljs-number">300</span>)<br>    turtle.pensize(<span class="hljs-number">5</span>)<br>    drawDate(time.strftime(<span class="hljs-string">&quot;%H%M%S&quot;</span>))<br>    turtle.hideturtle()<br>    turtle.done()<br>main()<br></code></pre></td></tr></table></figure><h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p>增加绘制间的距离</p><p>增加绘制年月日</p><p>获取时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><span class="hljs-keyword">import</span> time<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawGap</span>():</span><br>    turtle.penup()<br>    turtle.fd(<span class="hljs-number">5</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawLine</span>(<span class="hljs-params">draw</span>):</span>  <span class="hljs-comment">#单段数码管，函数绘制一条线，并且判断该线是越过还是画</span><br>    drawGap()<br>    turtle.pendown()<span class="hljs-keyword">if</span> draw <span class="hljs-keyword">else</span> turtle.penup()<br>    turtle.fd(<span class="hljs-number">40</span>)<br>    drawGap()<br>    turtle.right(<span class="hljs-number">90</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDight</span>(<span class="hljs-params">digit</span>):</span> <span class="hljs-comment">#根据数字绘制七段数码管</span><br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">90</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">180</span>)<br>    turtle.penup()  <span class="hljs-comment">#为绘制后续数字确定位置</span><br>    turtle.fd(<span class="hljs-number">20</span>)   <span class="hljs-comment">#为绘制后续数字确定位置</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDate</span>(<span class="hljs-params">date</span>):</span>  <span class="hljs-comment">#改获得日期格式为，&#x27;%Y-%m=%d+&#x27;,判断符号进行替换</span><br>    turtle.pencolor(<span class="hljs-string">&quot;red&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> date: <br>        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;-&#x27;</span>:<br>            turtle.write(<span class="hljs-string">&#x27;年&#x27;</span>,font=(<span class="hljs-string">&quot;Arial&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-string">&quot;normal&quot;</span>))<br>            turtle.pencolor(<span class="hljs-string">&quot;green&quot;</span>)<br>            turtle.fd(<span class="hljs-number">40</span>)<br>        <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;=&#x27;</span> :<br>            turtle.write(<span class="hljs-string">&#x27;月&#x27;</span>,font=(<span class="hljs-string">&quot;Arial&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-string">&quot;normal&quot;</span>))<br>            turtle.pencolor(<span class="hljs-string">&quot;blue&quot;</span>)<br>            turtle.fd(<span class="hljs-number">40</span>)<br>        <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;+&#x27;</span> :<br>            turtle.write(<span class="hljs-string">&#x27;日&#x27;</span>,font=(<span class="hljs-string">&quot;Arial&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-string">&quot;normal&quot;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            drawDight(<span class="hljs-built_in">eval</span>(i))  <span class="hljs-comment">#通过eval()函数将数字变成整数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>    turtle.penup()<br>    turtle.fd(-<span class="hljs-number">300</span>)<br>    turtle.pensize(<span class="hljs-number">5</span>)<br>    drawDate(time.strftime(<span class="hljs-string">&#x27;%Y-%m=%d+&#x27;</span>,time.gmtime()))<br>    turtle.hideturtle()<br>    turtle.done()<br>main()    <br></code></pre></td></tr></table></figure><h4 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h4><p>理解模块化方法思维：确定模块接口，封装功能</p><p>规则化思维：抽象过程为规则，</p><p>化繁为简：分治</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>到小数点</p><p>倒计时时刷新</p><p>14段的数码管</p><p>数码管有更多段</p><h3 id="0x3-代码复用与函数递归"><a href="#0x3-代码复用与函数递归" class="headerlink" title="0x3 代码复用与函数递归"></a>0x3 代码复用与函数递归</h3><h4 id="代码复用与模块化设计"><a href="#代码复用与模块化设计" class="headerlink" title="代码复用与模块化设计"></a>代码复用与模块化设计</h4><p>代码资源化：程序代码是一种用来表达计算的”资源“</p><p>代码抽象化：使用函数等方法对代码赋予更高级别的定义</p><p>代码复用：函数和对象</p><p>函数：将代码命名，在代码层面建立了初步抽象</p><p>对象：属性和方法，在函数之上再次组织进行抽象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;a&gt;.&lt;b&gt; 和 &lt;a&gt;.&lt;b&gt;()<br></code></pre></td></tr></table></figure><h4 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h4><p>通过函数或对象分装将程序划分为模块及模块间的表达</p><p>具体包括：主程序、子程序、和子程序的关系</p><p>紧耦合 交流多无法独立</p><p>松耦合 交流少可以独立</p><p>函数内部要紧耦合，模块之间要松耦合</p><p>函数递归的理解</p><p>函数中调用自身</p><h4 id="函数递归的调用过程"><a href="#函数递归的调用过程" class="headerlink" title="函数递归的调用过程"></a>函数递归的调用过程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-keyword">return</span> n*fact(n-<span class="hljs-number">1</span>)<br>fact(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h4 id="函数递归实例解析"><a href="#函数递归实例解析" class="headerlink" title="函数递归实例解析"></a>函数递归实例解析</h4><h5 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h5><p>将字符串s反转后输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">s[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>函数 +分支结构</p><p>递归链条</p><p>递归基例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rvs</span>(<span class="hljs-params">s</span>):</span><br><span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;&quot;</span> :<br><span class="hljs-keyword">return</span> s<br><span class="hljs-keyword">else</span> :<br><span class="hljs-keyword">return</span> rvs(s[<span class="hljs-number">1</span>:])+s[<span class="hljs-number">0</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;这是一个字符串&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>rvs(<span class="hljs-string">&#x27;这是一个字符串&#x27;</span>)<br><span class="hljs-string">&#x27;串符字个一是这&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> n==<span class="hljs-number">2</span> :<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-keyword">return</span> f(n-<span class="hljs-number">1</span>) + f(n-<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h5 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h5><p>思考n-1和n的关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">count = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hanoi</span>(<span class="hljs-params">n,src,dst,mid</span>):</span><br>    <span class="hljs-keyword">global</span> count<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;-&gt;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,src,dst))<br>        count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span> :<br>        hanoi(n-<span class="hljs-number">1</span>,src,mid,dst)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;-&gt;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(n,src,dst))<br>        count += <span class="hljs-number">1</span><br>        hanoi(n-<span class="hljs-number">1</span>,mid,dst,src)<br>hanoi(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>)<br><span class="hljs-built_in">print</span>(count)<br><br>输出<br><span class="hljs-number">1</span>:A-&gt;C<br><span class="hljs-number">2</span>:A-&gt;B<br><span class="hljs-number">1</span>:C-&gt;B<br><span class="hljs-number">3</span>:A-&gt;C<br><span class="hljs-number">1</span>:B-&gt;A<br><span class="hljs-number">2</span>:B-&gt;C<br><span class="hljs-number">1</span>:A-&gt;C<br><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h3 id="0x4-PyInstaller库的使用"><a href="#0x4-PyInstaller库的使用" class="headerlink" title="0x4  PyInstaller库的使用"></a>0x4  PyInstaller库的使用</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>将.py源代码转换为无需源代码的可执行程序文件</p><p>windows（exe）、linux、macos均可</p><p>它是一个第三方库</p><p>需要额外安装</p><p>使用pip工具安装</p><p>在cmd中输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">pip install pyinstaller<br></code></pre></td></tr></table></figure><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">(<span class="hljs-built_in">cmd</span>命令执行) pyinstaller -F &lt;文件名.py&gt;<br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sR5VBD"><img src="https://s3.ax1x.com/2021/01/20/sR5VBD.png" alt="sR5VBD.png"></a></p><p>帮助显示命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">(<span class="hljs-built_in">cmd</span>命令执行) pyistaller -h <br></code></pre></td></tr></table></figure><p>更多常用参数</p><p><a href="https://imgchr.com/i/sRopS1"><img src="https://s3.ax1x.com/2021/01/20/sRopS1.png" alt="sRopS1.png"></a></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>产生有图标的文件</p><p><a href="https://imgchr.com/i/sRIcsf"><img src="https://s3.ax1x.com/2021/01/20/sRIcsf.png" alt="sRIcsf.png"></a></p><h3 id="0x5-实例-科赫雪花小包裹"><a href="#0x5-实例-科赫雪花小包裹" class="headerlink" title="0x5 实例 科赫雪花小包裹"></a>0x5 实例 科赫雪花小包裹</h3><h4 id="科赫曲线"><a href="#科赫曲线" class="headerlink" title="科赫曲线"></a>科赫曲线</h4><p>分形几何</p><p>有迭代关系的几何图形</p><p>用python绘制科赫曲线</p><p><a href="https://imgchr.com/i/sRTFcq"><img src="https://s3.ax1x.com/2021/01/20/sRTFcq.png" alt="sRTFcq.png"></a></p><p>绘制不同阶数的科赫曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">koch</span>(<span class="hljs-params">size,n</span>) :</span>  <span class="hljs-comment">#确定大小和阶数</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:         <span class="hljs-comment">#当n=0时，画直线</span><br>        turtle.fd(size)  <br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> angle <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,-<span class="hljs-number">120</span>,<span class="hljs-number">60</span>]:   <span class="hljs-comment">#一阶曲线</span><br>            turtle.left(angle)<br>            koch(size/<span class="hljs-number">3</span>,n-<span class="hljs-number">1</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">400</span>)<br>    turtle.penup()<br>    turtle.goto(-<span class="hljs-number">300</span>,-<span class="hljs-number">50</span>)<br>    turtle.pendown()<br>    turtle.pensize(<span class="hljs-number">2</span>)<br>    koch(<span class="hljs-number">600</span>,<span class="hljs-number">3</span>)       <span class="hljs-comment">#3阶科赫曲线，阶数</span><br>    turtlw.hideturtle<br></code></pre></td></tr></table></figure><p>连成雪花</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">koch</span>(<span class="hljs-params">size,n</span>) :</span>  <span class="hljs-comment">#确定大小和阶数</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:         <span class="hljs-comment">#当n=0时，画直线</span><br>        turtle.fd(size)  <br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> angle <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,-<span class="hljs-number">120</span>,<span class="hljs-number">60</span>]:   <span class="hljs-comment">#一阶曲线</span><br>            turtle.left(angle)<br>            koch(size/<span class="hljs-number">3</span>,n-<span class="hljs-number">1</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    turtle.setup(<span class="hljs-number">600</span>,<span class="hljs-number">600</span>)<br>    turtle.penup()<br>    turtle.goto(-<span class="hljs-number">200</span>,<span class="hljs-number">100</span>)<br>    turtle.pendown()<br>    turtle.pensize(<span class="hljs-number">2</span>)<br>    level = <span class="hljs-number">4</span><br>    koch(<span class="hljs-number">400</span>,level)       <span class="hljs-comment">#3阶科赫曲线，阶数</span><br>    turtle.right(<span class="hljs-number">120</span>)<br>    koch(<span class="hljs-number">400</span>,level)<br>    turtle.right(<span class="hljs-number">120</span>)<br>    koch(<span class="hljs-number">400</span>,level)<br>    turtlw.hideturtle()<br>main()<br></code></pre></td></tr></table></figure><h4 id="科赫雪花小包裹"><a href="#科赫雪花小包裹" class="headerlink" title="科赫雪花小包裹"></a>科赫雪花小包裹</h4><p>用pylnstaller打包</p><h4 id="绘制条件的扩展"><a href="#绘制条件的扩展" class="headerlink" title="绘制条件的扩展"></a>绘制条件的扩展</h4><p>修改阶数</p><p>修改科赫曲线的基本定义及旋转角度</p><p>修改绘制科赫雪花的基础框架图形</p><p>分形几何很多</p><p>康托尔集</p><p>谢尔宾斯基三角形</p><p>门格海绵，龙形曲线，空间填充曲线</p><h2 id="组织数据类型"><a href="#组织数据类型" class="headerlink" title="组织数据类型"></a>组织数据类型</h2><p>一个数据表达一个含义</p><p>一组数据表达多个含义</p><p>类型结构：</p><p>集合类型、序列类型、字典类型</p><h3 id="0x1-集合类型及操作"><a href="#0x1-集合类型及操作" class="headerlink" title="0x1 集合类型及操作"></a>0x1 集合类型及操作</h3><h4 id="集合类型定义"><a href="#集合类型定义" class="headerlink" title="集合类型定义"></a>集合类型定义</h4><p>多个元素的无需组合</p><p>与数学概念一致</p><p>集合元素之间无序，每个元素唯一，不存在相同元素</p><p>集合元素不可更改，不能是可变数据类型</p><h4 id="建立集合"><a href="#建立集合" class="headerlink" title="建立集合"></a>建立集合</h4><p>集合用{ } 建立或set(),元素用逗号分隔</p><p>建立空集合必须用set(),相同元素合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>A = &#123;<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-number">123</span>,(<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-number">123</span>)&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(A)<br>&#123;<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;python&#x27;</span>, (<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-number">123</span>)&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>B = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;pupu123&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(B)<br>&#123;<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>==元素唯一，无序，{}表示逗号分隔==</p><h4 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h4><p><a href="https://imgchr.com/i/sWYJ91"><img src="https://s3.ax1x.com/2021/01/20/sWYJ91.png" alt="sWYJ91.png"></a></p><p><a href="https://imgchr.com/i/sWY8hR"><img src="https://s3.ax1x.com/2021/01/20/sWY8hR.png" alt="sWY8hR.png"></a></p><p>关系操作符返回true或false</p><h4 id="增强操作符"><a href="#增强操作符" class="headerlink" title="增强操作符"></a>增强操作符</h4><p><img src="https://s3.ax1x.com/2021/01/20/sW38QU.png" alt="sW38QU.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>A = &#123;<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>B = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;pypy123&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(B)<br>&#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(A)<br>&#123;<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-number">123</span>, <span class="hljs-string">&#x27;y&#x27;</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>A - B<br>&#123;<span class="hljs-number">123</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>A | B<br>&#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-number">123</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>A &amp; B<br>&#123;<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>A ^ B<br>&#123;<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">123</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="集合处理方法"><a href="#集合处理方法" class="headerlink" title="集合处理方法"></a>集合处理方法</h4><p><a href="https://imgchr.com/i/sWtqJA"><img src="https://s3.ax1x.com/2021/01/20/sWtqJA.png" alt="sWtqJA.png"></a></p><p><a href="https://imgchr.com/i/sWU5Ue"><img src="https://s3.ax1x.com/2021/01/20/sWU5Ue.png" alt="sWU5Ue.png"></a></p><p>输出全部元素实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#方法1 遍历</span><br>A = &#123;<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>&#125;<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> A:<br>    <span class="hljs-built_in">print</span>(item,end=<span class="hljs-string">&quot;&quot;</span>)<br><br>y123p<br><br><span class="hljs-comment">#方法2 使用pop函数</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(A.pop(),end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">pass</span><br><br>y123p<br></code></pre></td></tr></table></figure><p>==python存储元素与实际计算机存储的元素顺序不相符，固输出顺序不同==</p><h4 id="集合类型应用场景"><a href="#集合类型应用场景" class="headerlink" title="集合类型应用场景"></a>集合类型应用场景</h4><p>包含关系比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;p&quot;</span> <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>&#125;<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>&#123;<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>&#125; &gt;= &#123;<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>&#125;<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h4 id="数据去重"><a href="#数据去重" class="headerlink" title="数据去重"></a>数据去重</h4><p>利用集合元素无序且唯一的特点对数据去重</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">ls = [<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>]<br>s =<span class="hljs-built_in">set</span>(ls)   <span class="hljs-comment">#此处将列表类型转换为集合类型</span><br>&#123;<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-number">123</span>&#125;  <br>lt = <span class="hljs-built_in">list</span>(s)   <span class="hljs-comment">#此处为集合类型转换为列表类型</span><br>[<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-number">123</span>]<br><br><span class="hljs-comment">#程序运行</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>ls = [<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s =<span class="hljs-built_in">set</span>(ls)<br><span class="hljs-meta">&gt;&gt;&gt; </span>lt = <span class="hljs-built_in">list</span>(s)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(lt)<br>[<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-number">123</span>, <span class="hljs-string">&#x27;p&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="0x2-序列类型及操作"><a href="#0x2-序列类型及操作" class="headerlink" title="0x2 序列类型及操作"></a>0x2 序列类型及操作</h3><p>序列类型定义</p><p>序列具有先后关系的一组元素</p><p>序列是一维元素向量，元素类型可以不同</p><p>类似数学元素序列：S0,S1,…,Sn-1</p><p>元素间由序号引导，通过下标访问序列的特定元素</p><p>序列是一个基类类型</p><p>序列类型，衍生出字符串类型、元组类型、列表类型</p><h4 id="序号的定义"><a href="#序号的定义" class="headerlink" title="序号的定义"></a>序号的定义</h4><p><a href="https://imgchr.com/i/sWr5LR"><img src="https://s3.ax1x.com/2021/01/20/sWr5LR.png" alt="sWr5LR.png"></a></p><h4 id="序列处理函数及方法"><a href="#序列处理函数及方法" class="headerlink" title="序列处理函数及方法"></a>序列处理函数及方法</h4><p>6个操作符</p><p><a href="https://imgchr.com/i/sWO1yj"><img src="https://s3.ax1x.com/2021/01/20/sWO1yj.png" alt="sWO1yj.png"></a></p><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>ls = [<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-number">123</span>,<span class="hljs-string">&quot;.io&quot;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>ls[::-<span class="hljs-number">1</span>]<br>[<span class="hljs-string">&#x27;.io&#x27;</span>, <span class="hljs-number">123</span>, <span class="hljs-string">&#x27;python&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&quot;python123.io&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s[::-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;oi.321nohtyp&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="五个函数和方法"><a href="#五个函数和方法" class="headerlink" title="五个函数和方法"></a>五个函数和方法</h4><p><a href="https://imgchr.com/i/sfSTBQ"><img src="https://s3.ax1x.com/2021/01/20/sfSTBQ.png" alt="sfSTBQ.png"></a></p><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>ls = [<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-number">123</span>,<span class="hljs-string">&quot;.io&quot;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(ls)<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&quot;python123.io&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span>(s)<br><span class="hljs-string">&#x27;y&#x27;</span>               <span class="hljs-comment">#根据字母排序得出</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t = <span class="hljs-string">&quot;a987b&quot;</span>   <span class="hljs-comment">#字母大于数字</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span>(t)<br><span class="hljs-string">&#x27;b&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t = <span class="hljs-string">&quot;0987341&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span>(t)<br><span class="hljs-string">&#x27;9&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="元组类型及操作"><a href="#元组类型及操作" class="headerlink" title="元组类型及操作"></a>元组类型及操作</h4><p>序列类型的扩展</p><p>一旦创建不能被修改</p><p>使用小括号()或者tuple创建，元素间用逗号分隔</p><p>可以不适用或使用小括号</p><p>==返回的实际上是一个值，返回的数据类型是元组类型==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h5 id="元组类型定义"><a href="#元组类型定义" class="headerlink" title="元组类型定义"></a>元组类型定义</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>create = <span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;tiger&quot;</span>,<span class="hljs-string">&quot;human&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>create<br>(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>color = (<span class="hljs-number">0x001100</span>,<span class="hljs-string">&quot;blue&quot;</span>,create)<br><span class="hljs-meta">&gt;&gt;&gt; </span>color<br>(<span class="hljs-number">4352</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, (<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>))<br></code></pre></td></tr></table></figure><p>==继承序列的全部通用操作==</p><h4 id="列表类型及操作"><a href="#列表类型及操作" class="headerlink" title="列表类型及操作"></a>列表类型及操作</h4><p>列表是一种序列类型，创建后可以随意被修改</p><p>使用方括号[]或list()创建，元素间用逗号，分隔</p><p>列表中类型可以不同，没有长度限制</p><h5 id="列表类型定义"><a href="#列表类型定义" class="headerlink" title="列表类型定义"></a>列表类型定义</h5><p>==此处并没有真正的将ls列表内的值赋给lt，而是将该列表新定义了一个名字==</p><p>这里使用了内存和指针的概念</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>, <span class="hljs-number">1024</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>lt = ls<br><span class="hljs-meta">&gt;&gt;&gt; </span>lt<br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>, <span class="hljs-number">1024</span>]<br></code></pre></td></tr></table></figure><h4 id="列表类型的操作函数和方法"><a href="#列表类型的操作函数和方法" class="headerlink" title="列表类型的操作函数和方法"></a>列表类型的操作函数和方法</h4><p><a href="https://imgchr.com/i/sfe7Hx"><img src="https://s3.ax1x.com/2021/01/20/sfe7Hx.png" alt="sfe7Hx.png"></a></p><p>实例</p><p>切片替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>ls = [<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>,<span class="hljs-number">1024</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>ls[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]<br>[<span class="hljs-string">&#x27;dog&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>ls[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>ls<br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>, <span class="hljs-number">1024</span>]<br></code></pre></td></tr></table></figure><p>删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>, <span class="hljs-number">1024</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> ls[::<span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>ls<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-number">1024</span>]<br></code></pre></td></tr></table></figure><h5 id="更多方法"><a href="#更多方法" class="headerlink" title="更多方法"></a>更多方法</h5><p><a href="https://imgchr.com/i/sfmHMj"><img src="https://s3.ax1x.com/2021/01/20/sfmHMj.png" alt="sfmHMj.png"></a></p><h4 id="序列类型应用场景"><a href="#序列类型应用场景" class="headerlink" title="序列类型应用场景"></a>序列类型应用场景</h4><p>用于数据表示</p><p>元组用于元素不改变的应用场景，更多用于固定搭配场景</p><p>列表更灵活，是最常用的序列类型</p><p>表示一组有序数据，进而操作它们</p><p>元素遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ls :<br>    &lt;语句块&gt;<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> tp :<br>    &lt;语句块&gt;<br></code></pre></td></tr></table></figure><p>数据保护</p><p>将列表类型转换为元组类型，从而达到保护数据的目的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>ls = [<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;tiger&quot;</span>,<span class="hljs-number">1024</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>lt = <span class="hljs-built_in">tuple</span>(ls)   <span class="hljs-comment">#用于将列表类型转换为元组类型</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>lt<br>(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-number">1024</span>)<br></code></pre></td></tr></table></figure><p>元组类型数据不会修改数据，在多人写程序的情况，接口的传递</p><h4 id="实例-基本统计值计算"><a href="#实例-基本统计值计算" class="headerlink" title="实例 基本统计值计算"></a>实例 基本统计值计算</h4><p> 基本统计值</p><p>总个数、求和、平均值、方差、中位数</p><p>总个数：len()</p><p>求和：for …in</p><p>平均值：求和/总个数</p><p>方差：各数据与平均数差的平方的和的平均数</p><p>中位数：排序，然后…奇数找最中间的1个，偶数找中间2个取平均</p><p>通过函数，完成不同的功能</p><p>假定数据是用户输入，数量不确定</p><p>用户输入和输入结束函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getNum</span>():</span><br>    nums =[]<br>    iNumStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入数字(回车退出):&quot;</span>)<br>    <span class="hljs-keyword">while</span> iNumStr != <span class="hljs-string">&quot;&quot;</span>:                   <span class="hljs-comment">#当输入为空是退出</span><br>        nums.append(<span class="hljs-built_in">eval</span>(iNumStr))<br>        iNumStr =<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入数字(回车退出):&quot;</span>)<br>    <span class="hljs-keyword">return</span> nums<br></code></pre></td></tr></table></figure><p>求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mean</span>(<span class="hljs-params">numbers</span>):</span>  <span class="hljs-comment">#计算平均值</span><br>    s = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers:<br>        s = s + num<br>    <span class="hljs-keyword">return</span> s / <span class="hljs-built_in">len</span>(numbers)<br></code></pre></td></tr></table></figure><p>计算方差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dev</span>(<span class="hljs-params">numbers,mean</span>):</span>   <span class="hljs-comment">#输入numbers列表，mean是平均值</span><br>    sdev = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers :<br>        sdev = sdev + (num - mean)**<span class="hljs-number">2</span>  <span class="hljs-comment">#取出每个数与平均值做差求平方，累加</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(sdev/(<span class="hljs-built_in">len</span>(numbers)-<span class="hljs-number">1</span>),<span class="hljs-number">0.5</span>) <span class="hljs-comment">#对中位数开方返回</span><br></code></pre></td></tr></table></figure><p>计算中位数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">median</span>(<span class="hljs-params">numbers</span>):</span><br>    <span class="hljs-built_in">sorted</span>(numbers)<br>    size = <span class="hljs-built_in">len</span>(numbers)<br>    <span class="hljs-keyword">if</span> size % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        med = (numbers[size//<span class="hljs-number">2</span>-<span class="hljs-number">1</span>] + numbers[size//<span class="hljs-number">2</span>])/<span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        med = numbers[size//<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">return</span> med<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">n = getNum()<br>m = mean(n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;平均值：&#123;&#125;,方差:&#123;:.2&#125;,中位数:&#123;&#125;.&quot;</span>.<span class="hljs-built_in">format</span>(m,dev(n,m),median(n)))<br></code></pre></td></tr></table></figure><p>举一反三</p><p>获取多个用户输入的方法</p><p>分隔多个函数，模块化</p><h4 id="字典类型及操作"><a href="#字典类型及操作" class="headerlink" title="字典类型及操作"></a>字典类型及操作</h4><p>字典类型定义</p><p>映射</p><p>索引和数据的对应关系，键和值</p><p>属性和值，一种属性对应一个值</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;streetAddr&quot;</span>:<span class="hljs-string">&quot;中关村南大街5号&quot;</span><br><span class="hljs-string">&quot;zipcode&quot;</span>: <span class="hljs-string">&quot;100081&quot;</span><br></code></pre></td></tr></table></figure><p>比较序列类型和映射类型</p><p><a href="https://imgchr.com/i/shi7Cj"><img src="https://s3.ax1x.com/2021/01/21/shi7Cj.png" alt="shi7Cj.png"></a></p><p>字典类型是映射的体现</p><p>键相当于值的标签，找到标签就可获得值</p><p>键值对：键是数据索引的扩展</p><p>字典是键值对的集合，键值对之间无序</p><p>采用大括号{}和dict创建，键值对用冒号：表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&lt;键<span class="hljs-number">1</span>&gt;:&lt;值<span class="hljs-number">1</span>&gt;,&lt;键<span class="hljs-number">2</span>&gt;:&lt;值<span class="hljs-number">2</span>&gt;,...,&lt;键n&gt;:&lt;值n&gt;&#125;<br></code></pre></td></tr></table></figure><p>字典变量作用</p><p>在字典变量中，通过键获得值</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;字典变量&gt; = &#123;&lt;键<span class="hljs-number">1</span>&gt;:&lt;值<span class="hljs-number">1</span>&gt;,&lt;键<span class="hljs-number">2</span>&gt;:&lt;值<span class="hljs-number">2</span>&gt;,...,&lt;键n&gt;:&lt;值n&gt;&#125;<br><br>&lt;值<span class="hljs-number">1</span>&gt; = &lt;字典变量&gt;[&lt;键<span class="hljs-number">1</span>&gt;]<br><br>&lt;字典变量&gt;[&lt;键<span class="hljs-number">1</span>&gt;] = &lt;值<span class="hljs-number">1</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d = &#123;<span class="hljs-string">&quot;first&quot;</span> : <span class="hljs-number">1</span> ,<span class="hljs-string">&quot;second&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;third&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-string">&quot;first&quot;</span>]<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>生成空字典</p><p>空的集合类型定义不用{}，将 {} 留给字典类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>de = &#123;&#125; ; <span class="hljs-built_in">type</span>(de)  <span class="hljs-comment">#检测变量类型</span><br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br></code></pre></td></tr></table></figure><p>字典处理函数及方法</p><p><a href="https://imgchr.com/i/shLYzF"><img src="https://s3.ax1x.com/2021/01/21/shLYzF.png" alt="shLYzF.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d = &#123;<span class="hljs-string">&quot;first&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;second&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;third&quot;</span>:<span class="hljs-number">3</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>d.keys()<br>dict_keys([<span class="hljs-string">&#x27;first&#x27;</span>, <span class="hljs-string">&#x27;second&#x27;</span>, <span class="hljs-string">&#x27;third&#x27;</span>])<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>d.values()<br>dict_values([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p>返回字典的key类型,可以用for in 遍历，不能像列表一样操作</p><p><a href="https://imgchr.com/i/shOQ6e"><img src="https://s3.ax1x.com/2021/01/21/shOQ6e.png" alt="shOQ6e.png"></a></p><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d.get(<span class="hljs-string">&quot;first&quot;</span>,<span class="hljs-string">&quot;forth&quot;</span>)  <br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d.get(<span class="hljs-string">&quot;fifth&quot;</span>,<span class="hljs-string">&quot;forth&quot;</span>)  <span class="hljs-comment">#此时forth是错误时返回的值</span><br><span class="hljs-string">&#x27;forth&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>d.popitem()<br>(<span class="hljs-string">&#x27;third&#x27;</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>字典类型应用场景</p><p>对映射的表达</p><p>表达键值对数据，进而操作它们</p><p>元素遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> d :<br>    &lt;语句块&gt;<br></code></pre></td></tr></table></figure><h3 id="0x3-模块-jieba库的使用"><a href="#0x3-模块-jieba库的使用" class="headerlink" title="0x3 模块 jieba库的使用"></a>0x3 模块 jieba库的使用</h3><p>中文分词第三方库，需额外安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">(<span class="hljs-built_in">cmd</span>命令行) pip install jieba<br></code></pre></td></tr></table></figure><p>jieba提供三种分词模式</p><p>一般掌握一种足以</p><p>jieba通过中文词库方式识别分词</p><p>利用一个中文词库，确定汉字之间的关联概率</p><p>汉字间概率大的组成自促，形成分词结果</p><p>除了分词，用户还可以添加自定义的词组</p><h4 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h4><p>精确模式、全模式、搜索引擎模式</p><p>精确模式 ： 把文本精确的切分开，不存在冗余单词</p><p>全模式： 把文本中所有可能的词语都扫描出来，由冗余</p><p>搜索引擎模式： 在精确模式基础上，对长词再次切分</p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p><a href="https://imgchr.com/i/s4pP4s"><img src="https://s3.ax1x.com/2021/01/21/s4pP4s.png" alt="s4pP4s.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> jieba<br><span class="hljs-meta">&gt;&gt;&gt; </span>jieba.lcut(<span class="hljs-string">&quot;我今天去美国找了特朗普总统谈话&quot;</span>)<br>[<span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;今天&#x27;</span>, <span class="hljs-string">&#x27;去&#x27;</span>, <span class="hljs-string">&#x27;美国&#x27;</span>, <span class="hljs-string">&#x27;找&#x27;</span>, <span class="hljs-string">&#x27;了&#x27;</span>, <span class="hljs-string">&#x27;特朗普&#x27;</span>, <span class="hljs-string">&#x27;总统&#x27;</span>, <span class="hljs-string">&#x27;谈话&#x27;</span>]<br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/s4pUVe"><img src="https://s3.ax1x.com/2021/01/21/s4pUVe.png" alt="s4pUVe.png"></a></p><h3 id="0x4-实例-文本词频统计"><a href="#0x4-实例-文本词频统计" class="headerlink" title="0x4 实例 文本词频统计"></a>0x4 实例 文本词频统计</h3><p>英文文本：<a href="http://python123.io/resources/pye/hamlet.txt">Hamlet</a></p><p>中文文本：<a href="http://python123.io/resources/pye/threekingdoms.txt">三国演义</a></p><h4 id="Hamet英文词频统计实例讲解"><a href="#Hamet英文词频统计实例讲解" class="headerlink" title="Hamet英文词频统计实例讲解"></a>Hamet英文词频统计实例讲解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#CalHamletV1.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getText</span>():</span><br>    txt = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hamlet.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).read()             <span class="hljs-comment">#打开文件</span><br>    txt = txt.lower()                               <span class="hljs-comment">#将英文变成小写</span><br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;!&quot;#$%&amp;()*+,-./:;&lt;=&gt;?@[\\]^_‘&#123;|&#125;~&#x27;</span>:   <span class="hljs-comment">#逐一选取特殊符号</span><br>        txt = txt.replace(ch,<span class="hljs-string">&quot; &quot;</span>)                   <span class="hljs-comment">#将特殊符号替换为空格</span><br>    <span class="hljs-keyword">return</span> txt                               <span class="hljs-comment">#返回替换后的文本</span><br>hamletTxt = getText()                        <span class="hljs-comment">#将返回的文本赋给hamlettxt</span><br>words = hamletTxt.split()                    <span class="hljs-comment">#文本分隔方法，以空格分隔       </span><br>counts = &#123;&#125;                                  <span class="hljs-comment">#根据映射关系，定义一个空字典</span><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>    counts[word] = counts.get(word,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span>   <br>    <span class="hljs-comment">#形成键值对，get得到该词键对应的值+1，然后将新+1的值映射给该词键</span><br>    <span class="hljs-comment">#遍历了文本字符串内的所有元素</span><br>items = <span class="hljs-built_in">list</span>(counts.items())     <span class="hljs-comment">#将字典类型转换为列表类型              </span><br>items.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>) <span class="hljs-comment">#将一个列表按照键值对的两个元素中的第二个元素进行排序，从大到小</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):     <span class="hljs-comment">#打印前十个，词和对应出现的次数</span><br>    word,count = items[i]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="hljs-built_in">format</span>(word,count))<br><br></code></pre></td></tr></table></figure><h4 id="三国演义"><a href="#三国演义" class="headerlink" title="三国演义"></a>三国演义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br>txt = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;threekingdoms.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br>words = jieba.lcut(txt)<br>counts = &#123;&#125; <br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(word) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        counts[word] = counts.get(word,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>items = <span class="hljs-built_in">list</span>(counts.items())<br>items.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    word,count = items[i]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="hljs-built_in">format</span>(word,count))<br><br>    <br>    <br>    <br>曹操          <span class="hljs-number">953</span><br>孔明          <span class="hljs-number">836</span><br>将军          <span class="hljs-number">772</span><br>却说          <span class="hljs-number">656</span><br>玄德          <span class="hljs-number">585</span><br>关公          <span class="hljs-number">510</span><br>丞相          <span class="hljs-number">491</span><br>二人          <span class="hljs-number">469</span><br>不可          <span class="hljs-number">440</span><br>荆州          <span class="hljs-number">425</span><br>玄德曰         <span class="hljs-number">390</span><br>孔明曰         <span class="hljs-number">390</span><br>不能          <span class="hljs-number">384</span><br>如此          <span class="hljs-number">378</span><br>张飞          <span class="hljs-number">358</span><br>    <br>    <br></code></pre></td></tr></table></figure><h4 id="深入讲解"><a href="#深入讲解" class="headerlink" title="深入讲解"></a>深入讲解</h4><p>将词频与人物相关联，面向问题</p><p>词频统计 人物统计</p><p>去除排名靠前但不是人物的词语</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br>txt = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;threekingdoms.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br>excludes = &#123;<span class="hljs-string">&quot;将军&quot;</span>,<span class="hljs-string">&quot;却说&quot;</span>,<span class="hljs-string">&quot;荆州&quot;</span>,<span class="hljs-string">&quot;二人&quot;</span>,<span class="hljs-string">&quot;不可&quot;</span>,<span class="hljs-string">&quot;不能&quot;</span>,<span class="hljs-string">&quot;如此&quot;</span>,<span class="hljs-string">&quot;如何&quot;</span>,<span class="hljs-string">&quot;商议&quot;</span>,<span class="hljs-string">&quot;军士&quot;</span>,<span class="hljs-string">&quot;左右&quot;</span>,<span class="hljs-string">&quot;军马&quot;</span>,<span class="hljs-string">&quot;引兵&quot;</span>,<span class="hljs-string">&quot;次日&quot;</span>,<span class="hljs-string">&quot;大喜&quot;</span>,<span class="hljs-string">&quot;天下&quot;</span>,<span class="hljs-string">&quot;东吴&quot;</span>,<span class="hljs-string">&quot;于是&quot;</span>,<span class="hljs-string">&quot;今日&quot;</span>,<span class="hljs-string">&quot;不敢&quot;</span>,<span class="hljs-string">&quot;魏兵&quot;</span>&#125;<br>words = jieba.lcut(txt)<br>counts = &#123;&#125; <br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(word) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">elif</span> word == <span class="hljs-string">&quot;诸葛亮&quot;</span> <span class="hljs-keyword">or</span> word == <span class="hljs-string">&quot;孔明曰&quot;</span>:<br>        rword = <span class="hljs-string">&quot;孔明&quot;</span><br>    <span class="hljs-keyword">elif</span> word == <span class="hljs-string">&quot;关公&quot;</span> <span class="hljs-keyword">or</span> word == <span class="hljs-string">&quot;云长&quot;</span>:<br>        rword = <span class="hljs-string">&quot;关羽&quot;</span><br>    <span class="hljs-keyword">elif</span> word == <span class="hljs-string">&quot;玄德&quot;</span> <span class="hljs-keyword">or</span> word == <span class="hljs-string">&quot;玄德曰&quot;</span>:<br>        rword = <span class="hljs-string">&quot;刘备&quot;</span><br>    <span class="hljs-keyword">elif</span> word == <span class="hljs-string">&quot;孟德&quot;</span> <span class="hljs-keyword">or</span> word == <span class="hljs-string">&quot;丞相&quot;</span>:<br>        rword = <span class="hljs-string">&quot;曹操&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        rword = word<br>    counts[rword] = counts.get(rword,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> excludes:<br>    <span class="hljs-keyword">del</span> counts[word]<br>items = <span class="hljs-built_in">list</span>(counts.items())<br>items.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    word,count = items[i]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="hljs-built_in">format</span>(word,count))<br><br></code></pre></td></tr></table></figure><h4 id="应用问题的扩展"><a href="#应用问题的扩展" class="headerlink" title="应用问题的扩展"></a>应用问题的扩展</h4><p>绘制词云</p><p>对红楼梦、西游记、水浒传分析</p><p>政府工作报告、科研论文、新闻报道等</p><h2 id="文件和数据格式化"><a href="#文件和数据格式化" class="headerlink" title="文件和数据格式化"></a>文件和数据格式化</h2><p>格式化</p><p>将字符串按照样式规范</p><p>数据格式化</p><p>将一组数据按照一定规格和样式进行规范：表示、存储、运算等</p><p>方法论 从python角度理解文件和数据表示</p><h3 id="0x1-文件的使用"><a href="#0x1-文件的使用" class="headerlink" title="0x1 文件的使用"></a>0x1 文件的使用</h3><h4 id="文件的类型"><a href="#文件的类型" class="headerlink" title="文件的类型"></a>文件的类型</h4><p>文件   文件时数据的抽象和集合</p><p>文件时存储在辅助存储器上的数据序列</p><p>文件时数据存储的一种形式</p><p>文件展现形态：文本文件和二进制文件</p><p>所有文件都是二进制形式存储的，只是表现形式不同</p><p>文本文件</p><p>由单一特定编码组成的文件</p><p>也可以理解为字符串</p><p>二进制文件</p><p>直接由0和1组成，没有编码</p><p>两种形式都可以二进制形式打开</p><p>文本形式打开文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">tf = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f,txt&quot;</span>,<span class="hljs-string">&quot;rt&quot;</span>)<br><span class="hljs-built_in">print</span>(tf.readline())<br>tf.close()<br><br>this <span class="hljs-keyword">is</span> a word 123abc<br><br><span class="hljs-comment">#当文件中有中文时，读取文件内容会报如下错误</span><br>UnicodeDecodeError: <span class="hljs-string">&#x27;gbk&#x27;</span> codec can<span class="hljs-string">&#x27;t decode byte 0xb9 in position 35: illegal multibyte sequence</span><br></code></pre></td></tr></table></figure><p>二进制形式打开文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">bf = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br><span class="hljs-built_in">print</span>(bf.readline())<br>bf.close()<br><br><span class="hljs-string">b&#x27;this is a word 123abc\xef\xbc\x8c\xe4\xb8\xad\xe6\x96\x87\xe5\x86\x85\xe5\xae\xb9\r\n&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h4><p>打开-操作-关闭</p><p>存储状态、占用状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">open</span>(,)<br>a.close()<br></code></pre></td></tr></table></figure><p>读写文件方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#读文件</span><br>a.read(size)<br>a.readline(size)<br>a.realines(hint)<br><br><span class="hljs-comment">#写文件</span><br>a.write(s)<br>a.writelines(lines)<br>a.seek(offset)<br></code></pre></td></tr></table></figure><p>文件打开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;变量名&gt; = <span class="hljs-built_in">open</span>(&lt;文件名&gt;,&lt;打开模式&gt;)<br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sTpBMn"><img src="https://s3.ax1x.com/2021/01/23/sTpBMn.png" alt="sTpBMn.png"></a></p><p>文件路径：</p><p>绝对路径</p><p>\ 表示转义符，所以路径要写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">D:/PYE/f.txt<br>    或<br>D:\\PYE\\f.txt <br></code></pre></td></tr></table></figure><p>相对路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">./PYE/f.txt<br><br>在同一文件夹下直接用文件名<br><span class="hljs-string">&quot;f.txt&quot;</span><br></code></pre></td></tr></table></figure><p>文件打开模式</p><p><a href="https://imgchr.com/i/sT9htS"><img src="https://s3.ax1x.com/2021/01/23/sT9htS.png" alt="sT9htS.png"></a></p><p>默认时文本形式，只读模式</p><p>文件关闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;变量名&gt;.close()<br></code></pre></td></tr></table></figure><p>程序结束后自动关闭</p><h4 id="文件的内容的读取"><a href="#文件的内容的读取" class="headerlink" title="文件的内容的读取"></a>文件的内容的读取</h4><p><a href="https://imgchr.com/i/sTZs1K"><img src="https://s3.ax1x.com/2021/01/23/sTZs1K.png" alt="sTZs1K.png"></a></p><p><a href="https://imgchr.com/i/sTZ4ht"><img src="https://s3.ax1x.com/2021/01/23/sTZ4ht.png" alt="sTZ4ht.png"></a></p><p>一次读入，统一处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">fname = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要打开的文件名称：&quot;</span>)<br>fo = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&quot;r&quot;</span>)<br>txt = fo.read()<br><span class="hljs-comment">#对全文txt进行处理</span><br>fo.close()<br><br><span class="hljs-comment">#采用一次读入，统一处理，文件过大不适用</span><br></code></pre></td></tr></table></figure><p>按数量读入，逐步处理</p><p>适合大文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">fname = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要打开的文件名称：&quot;</span>)<br>fo = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&quot;r&quot;</span>)<br>txt = fo.read(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">while</span> txt !=<span class="hljs-string">&quot;&quot;</span>:<br>    <span class="hljs-comment">#对txt进行处理</span><br>    txt = fo.read(<span class="hljs-number">2</span>)<br>fo.close()<br></code></pre></td></tr></table></figure><p>逐行遍历</p><p>一次读入，分行处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">fname = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要打开的文件名称：&quot;</span>)<br>fo = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fo.readlines():<br>    <span class="hljs-built_in">print</span>(line)<br>fo.close()<br></code></pre></td></tr></table></figure><p>分行读入、逐行处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">fname = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要打开的文件名称：&quot;</span>)<br>fo = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fo:<br>    <span class="hljs-built_in">print</span>(line)<br>fo.close()<br></code></pre></td></tr></table></figure><h4 id="数据的文件写入"><a href="#数据的文件写入" class="headerlink" title="数据的文件写入"></a>数据的文件写入</h4><p><a href="https://imgchr.com/i/sTmKGq"><img src="https://s3.ax1x.com/2021/01/23/sTmKGq.png" alt="sTmKGq.png"></a></p><p>writelines直接将文字拼接写入文件，没有空格换行</p><p><a href="https://imgchr.com/i/sTmrLD"><img src="https://s3.ax1x.com/2021/01/23/sTmrLD.png" alt="sTmrLD.png"></a></p><p>输入位置指针，描述了当前在文件内写入的具体内存位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">fo = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;w+&quot;</span>)<br>ls = [<span class="hljs-string">&quot;中国&quot;</span>，<span class="hljs-string">&quot;法国&quot;</span>，<span class="hljs-string">&quot;美国&quot;</span>]<br>fo.writelines(ls)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fo:<br>    <span class="hljs-built_in">print</span>(line)<br>fo.close()<br><br><span class="hljs-comment">#此时输入指针在输入的末尾，之后是没有内容的，固没有输出</span><br><span class="hljs-comment">#修改如下，使用seek方法</span><br><br>fo = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;w+&quot;</span>)<br>ls = [<span class="hljs-string">&quot;中国&quot;</span>，<span class="hljs-string">&quot;法国&quot;</span>，<span class="hljs-string">&quot;美国&quot;</span>]<br>fo.writelines(ls)<br>fo.seek(<span class="hljs-number">0</span>)         <span class="hljs-comment">#将输入指针返回到最开始</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fo:<br>    <span class="hljs-built_in">print</span>(line)<br>fo.close()<br></code></pre></td></tr></table></figure><h3 id="0x2-实例：自动轨迹绘制"><a href="#0x2-实例：自动轨迹绘制" class="headerlink" title="0x2 实例：自动轨迹绘制"></a>0x2 实例：自动轨迹绘制</h3><p>自动轨迹绘制</p><p>根据脚本来绘制图形</p><p>写数据绘制图形</p><p>是自动化程序的重要内容</p><h4 id="基本思路-1"><a href="#基本思路-1" class="headerlink" title="基本思路"></a>基本思路</h4><p>定义数据文件格式(接口）</p><p>根据文件接口解析参数绘制图形</p><p>编制数据文件</p><h4 id="数据接口定义"><a href="#数据接口定义" class="headerlink" title="数据接口定义"></a>数据接口定义</h4><p>根据个人需求</p><p><a href="https://imgchr.com/i/sTu3E4"><img src="https://s3.ax1x.com/2021/01/23/sTu3E4.png" alt="sTu3E4.png"></a></p><h4 id="编写对应程序"><a href="#编写对应程序" class="headerlink" title="编写对应程序"></a>编写对应程序</h4><p>map函数，将第一个参数对应的函数作用于一个列表或集合的每个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle <span class="hljs-keyword">as</span> t<br>t.title(<span class="hljs-string">&#x27;自动轨迹绘制&#x27;</span>)<br>t.setup(<span class="hljs-number">800</span>,<span class="hljs-number">600</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>t.pencolor(<span class="hljs-string">&quot;red&quot;</span>)<br>t.pensize(<span class="hljs-number">5</span>)<br><span class="hljs-comment">#数据读取</span><br>datals = []<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.txt&quot;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>    line = line.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>    datals.append(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">eval</span>,line.split(<span class="hljs-string">&quot;,&quot;</span>))))<br>f.close()<br><span class="hljs-comment">#自动绘制</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(datals)):<br>    t.pencolor(datals[i][<span class="hljs-number">3</span>],datals[i][<span class="hljs-number">4</span>],datals[i][<span class="hljs-number">5</span>]) <br>    <span class="hljs-comment">#找到第i个参数，获取第3个值、第4个值，第5个值，即RGB参数</span><br>    t.fd(datals[i][<span class="hljs-number">0</span>])  <span class="hljs-comment">#读取0位数据，获得绘制长度</span><br>    <span class="hljs-keyword">if</span> datals[i][<span class="hljs-number">1</span>]:    <span class="hljs-comment">#根据判断是否转向，选择左右转的角度</span><br>        t.right(datals[i][<span class="hljs-number">2</span>])<br>    <span class="hljs-keyword">else</span>:<br>        t.left(datals[i][<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><h4 id="理解方法思维-1"><a href="#理解方法思维-1" class="headerlink" title="理解方法思维"></a>理解方法思维</h4><p>自动化思维</p><p>接口化设计</p><p>二维数据应用</p><p>拓展</p><p>增加更多接口</p><p>增加功能</p><p>增加应用动画绘制</p><h3 id="0x3-一维数据的格式化和处理"><a href="#0x3-一维数据的格式化和处理" class="headerlink" title="0x3 一维数据的格式化和处理"></a>0x3 一维数据的格式化和处理</h3><h4 id="数据组织的维度"><a href="#数据组织的维度" class="headerlink" title="数据组织的维度"></a>数据组织的维度</h4><p>线性方式组织</p><p>二维方式组织</p><p>多维、高维</p><p>一维数据</p><p>由对等关系的有序或无序数据构成，采用线性方式组织</p><p>对应列表数组和集合等概念</p><p>二维数据</p><p>由多个一维数据构成，是一维数据的组合形式</p><p>仅利用最基本的二元关系展示数据间的复杂结构</p><p>例如 键值对定义</p><p><a href="https://imgchr.com/i/sThLpF"><img src="https://s3.ax1x.com/2021/01/23/sThLpF.png" alt="sThLpF.png"></a></p><p>数据的操作周期</p><p>存储、表示、操作</p><p>存储格式、数据类型、操作方式</p><h4 id="一维数据的表示"><a href="#一维数据的表示" class="headerlink" title="一维数据的表示"></a>一维数据的表示</h4><p>如何用程序类型表达一维数据</p><p>如果数据间有序：使用列表类型</p><p>可以用for循环遍历</p><p>数据无序：使用集合类型</p><p>可以使用for循环遍历</p><h4 id="一维数据的存储"><a href="#一维数据的存储" class="headerlink" title="一维数据的存储"></a>一维数据的存储</h4><p>存储方式</p><p>空格分隔  即存储的数据之间需要空格</p><p>但数据中不能由空格</p><p>逗号分隔 也如空格存在缺点</p><p>一般用特殊符号分隔</p><h4 id="一维数据的处理"><a href="#一维数据的处理" class="headerlink" title="一维数据的处理"></a>一维数据的处理</h4><p>读入</p><p>从空格分隔的文件中读入数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">txt = <span class="hljs-built_in">open</span>(fname).read()<br>ls = txt.split()<br>f.close()<br></code></pre></td></tr></table></figure><p>从特殊分隔的文件中读入数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">txt = <span class="hljs-built_in">open</span>(fname).read()<br>ls = txt.split(<span class="hljs-string">&quot;$&quot;</span>)<br>f.close()<br></code></pre></td></tr></table></figure><p>写入</p><p>采用空格方式写入数据文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">ls = [<span class="hljs-string">&#x27;中国&#x27;</span>,<span class="hljs-string">&#x27;美国&#x27;</span>,<span class="hljs-string">&#x27;日本&#x27;</span>]<br>f = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;&#x27;</span>.join(ls))   <span class="hljs-comment">#将&#x27; &#x27;作为分隔放到ls数据之间</span><br>f.close()<br></code></pre></td></tr></table></figure><p>特殊分隔的方式写入数据文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">ls = [<span class="hljs-string">&#x27;中国&#x27;</span>,<span class="hljs-string">&#x27;美国&#x27;</span>,<span class="hljs-string">&#x27;日本&#x27;</span>]<br>f = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;$&#x27;</span>.join(ls))   <span class="hljs-comment">#将&#x27;$&#x27;作为分隔放到ls数据之间</span><br>f.close()<br></code></pre></td></tr></table></figure><h3 id="0x4-二维数据的格式化和处理"><a href="#0x4-二维数据的格式化和处理" class="headerlink" title="0x4 二维数据的格式化和处理"></a>0x4 二维数据的格式化和处理</h3><h4 id="二维数据的表示"><a href="#二维数据的表示" class="headerlink" title="二维数据的表示"></a>二维数据的表示</h4><p>使用表格形式，使用二维列表</p><p>类似于C语言中的二维数组</p><p>使用列表类型</p><p>遍历需要两层for循环</p><p>数据维度是数据的组织形式</p><p>一维数据：列表和集合类型</p><p>有序用列表，无序用集合</p><h4 id="CSV数据存储格式"><a href="#CSV数据存储格式" class="headerlink" title="CSV数据存储格式"></a>CSV数据存储格式</h4><p>CSV Comma-Separated Values</p><p>用逗号来分隔值的一种存储方式</p><p>是国际通用的一二维数据存储格式，一般.CSV扩展名</p><p>每行一个一维数据，采用逗号分隔，无空行</p><p>Excel和一般编辑软件都可以读入或另存为CSV文件</p><h4 id="二维数据的存储"><a href="#二维数据的存储" class="headerlink" title="二维数据的存储"></a>二维数据的存储</h4><p>如果某个元素缺失，逗号仍要保留</p><p>二维数据的表头可以作为数据存储，也可以另行存储</p><p>逗号为英文半角逗号，逗号与数据至今无额外空格</p><p>数据中的逗号可以用引号标识，也可加转义符</p><p>数据如何存的，按行存或者按列存都可以，具体由程序决定</p><p>一般索引习惯：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ls [row][column]<br></code></pre></td></tr></table></figure><h4 id="二维数据的处理"><a href="#二维数据的处理" class="headerlink" title="二维数据的处理"></a>二维数据的处理</h4><p>二维数据的读入处理</p><p>从CSV格式的文件读入数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">fo = <span class="hljs-built_in">open</span>(fname)<br>ls = []<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fo:<br>    line = line.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>    ls.append(line.split(<span class="hljs-string">&quot;,&quot;</span>))<br>fo.close()<br></code></pre></td></tr></table></figure><p>将数据写入CSV格式的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">ls = [[],[],[]] <span class="hljs-comment">#二维列表</span><br>f = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ls:<br>    f.write(<span class="hljs-string">&#x27;,&#x27;</span>.join(item) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>f.close()<br></code></pre></td></tr></table></figure><p>遍历</p><p>采用二层循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">ls = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]] <span class="hljs-comment">#二维列表</span><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> ls:<br>    <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> row:<br>        <span class="hljs-built_in">print</span>(column)<br></code></pre></td></tr></table></figure><h3 id="0x5-模块：wordcloud库的使用"><a href="#0x5-模块：wordcloud库的使用" class="headerlink" title="0x5 模块：wordcloud库的使用"></a>0x5 模块：wordcloud库的使用</h3><p>wordcloud是优秀的词云展示第三方库</p><p>将词语用可视化的方式，艺术的展示的文本</p><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">(cmd命令行) pip install wordcloud<br></code></pre></td></tr></table></figure><p>如果安装失败，报错查阅 <a href="https://www.jb51.net/article/198751.htm">https://www.jb51.net/article/198751.htm</a></p><p>使用说明</p><p>wordcloud库把词云当作一个WordClloud对象</p><p>wordcloud.WordCloud()代理一个文本对应的词云</p><p>绘制词云的形状、尺寸和颜色都可以设定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">w = wordcloud.WordCloud()<br></code></pre></td></tr></table></figure><p>以WordCloud对象为基础</p><p>配置参数、加载文本、输出文件</p><p><a href="https://imgchr.com/i/s7kttx"><img src="https://s3.ax1x.com/2021/01/23/s7kttx.png" alt="s7kttx.png"></a></p><p>常规方法</p><p>配置对象参数</p><p>加载词云文本</p><p>输出词云文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wordcloud<br>c = wordcloud.WordCloud()<br>c.generate(<span class="hljs-string">&quot;Wordcloud by Python&quot;</span>)<br>c.to_file(<span class="hljs-string">&quot;pyworcloud.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>最后生成图片宽400高200像素</p><p>操作过程</p><p>以空格分隔单词</p><p>单词出现次数并过滤</p><p>根据统计配置字号</p><p>颜色环境尺寸</p><p><a href="https://imgchr.com/i/s74oLj"><img src="https://s3.ax1x.com/2021/01/23/s74oLj.png" alt="s74oLj.png"></a></p><p><a href="https://imgchr.com/i/s7o7eH"><img src="https://s3.ax1x.com/2021/01/23/s7o7eH.png" alt="s7o7eH.png"></a></p><p><a href="https://imgchr.com/i/s77fKO"><img src="https://s3.ax1x.com/2021/01/23/s77fKO.png" alt="s77fKO.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wordcloud<br>txt = <span class="hljs-string">&quot;life is short,you need python&quot;</span><br>w = wordcloud.WordCloud(\<br>       background_color = <span class="hljs-string">&quot;white&quot;</span>)<br>w.generate(txt)<br>w.to_file(<span class="hljs-string">&quot;pywcloud.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>中文构成词云</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> wordcloud<br>txt = <span class="hljs-string">&quot;程序设计语言是计算机能够理解和\</span><br><span class="hljs-string">失败用户操作意图的一种交互体系，它按照\</span><br><span class="hljs-string">特定规则组织计算机指令，使计算机能够自\</span><br><span class="hljs-string">动进行各种运算处理。&quot;</span><br>w = wordcloud.WordCloud(width=<span class="hljs-number">1000</span>,\<br>     font_path=<span class="hljs-string">&quot;msyh.ttc&quot;</span>,height=<span class="hljs-number">700</span>) <span class="hljs-comment">#此处msyh为字体微软雅黑文件路径</span><br>w.generate(<span class="hljs-string">&quot; &quot;</span>.join(jieba.lcut(txt)))  <span class="hljs-comment">#先变成列表，然后用join方法加空格</span><br>w.to_file(<span class="hljs-string">&quot;pywcloud.png&quot;</span>)  <span class="hljs-comment">#输出为图片</span><br></code></pre></td></tr></table></figure><h3 id="0x6-实例：政府工作报告词云"><a href="#0x6-实例：政府工作报告词云" class="headerlink" title="0x6 实例：政府工作报告词云"></a>0x6 实例：政府工作报告词云</h3><p>直观理解政策文件</p><p>《决胜全面建成小康社会 夺取新时代中国特色社会主义伟大胜利》</p><p>《中共中央关于乡村振兴的战略》</p><p>基本思路</p><p>读取文件</p><p>输出词云</p><p>观察结果、迭代</p><p>第一本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> wordcloud <br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xjp.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)  <span class="hljs-comment">#打开文本</span><br>t = f.read()  <span class="hljs-comment">#将文本内容一次性读入t</span><br>f.close()<br>ls = jieba.lcut(t)  <span class="hljs-comment">#对文本进行分词，将分词结果保存为列表类型</span><br>txt = <span class="hljs-string">&quot; &quot;</span>.join(ls)  <span class="hljs-comment">#词云需要长文本输入，用空格将列表元素链接起来</span><br>w = wordcloud.WordCloud(font_path = <span class="hljs-string">&quot;msyh.ttc&quot;</span>,\<br>    width = <span class="hljs-number">1000</span>,height = <span class="hljs-number">700</span>,background_color = <span class="hljs-string">&quot;white&quot;</span>)<br>w.generate(txt)<br>w.to_file(<span class="hljs-string">&quot;grwordcloud.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>限制文字输出量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> wordcloud<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xjp.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>t = f.read()<br>f.close()<br>ls = jieba.lcut(t)<br>txt = <span class="hljs-string">&quot; &quot;</span>.join(ls)<br>w = wordcloud.WordCloud(font_path = <span class="hljs-string">&quot;msyh.ttc&quot;</span>,\<br>    width = <span class="hljs-number">1000</span>,height = <span class="hljs-number">700</span>,background_color = <span class="hljs-string">&quot;white&quot;</span>,\<br>                       max_words = <span class="hljs-number">15</span>) <span class="hljs-comment">#限制显示的词</span><br>w.generate(txt)<br>w.to_file(<span class="hljs-string">&quot;grwordcloud.png&quot;</span>)<br></code></pre></td></tr></table></figure><p>词云形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> wordcloud<br><span class="hljs-keyword">from</span> scipy.misc <span class="hljs-keyword">import</span> imread  <span class="hljs-comment">#引入库，用来读取图片文件，形成图片变量</span><br>mask = imread(<span class="hljs-string">&quot; &quot;</span>)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xjp.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>t = f.read()<br>f.close()<br>ls = jieba.lcut(t)<br>txt = <span class="hljs-string">&quot; &quot;</span>.join(ls)<br>w = wordcloud.WordCloud(font_path = <span class="hljs-string">&quot;msyh.ttc&quot;</span>,mask = mask\ <span class="hljs-comment">#将mask赋给mask参数</span><br>    width = <span class="hljs-number">1000</span>,height = <span class="hljs-number">700</span>,background_color = <span class="hljs-string">&quot;white&quot;</span>,\<br>                       max_words = <span class="hljs-number">15</span>) <span class="hljs-comment">#限制显示的词</span><br>w.generate(txt)<br>w.to_file(<span class="hljs-string">&quot;grwordcloud.png&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（三）Python函数库与数据类型</title>
    <link href="/2021/10/02/Python%E5%87%BD%E6%95%B0%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/10/02/Python%E5%87%BD%E6%95%B0%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="Python基本图形绘制"><a href="#Python基本图形绘制" class="headerlink" title="Python基本图形绘制"></a>Python基本图形绘制</h2><h3 id="0x1-深入理解Python语言"><a href="#0x1-深入理解Python语言" class="headerlink" title="0x1 深入理解Python语言"></a>0x1 深入理解Python语言</h3><ul><li><p>计算机技术演进</p><p>1946 - 1981 计算机系统结构时代    计算能力</p><p>1981 - 2008 个人pc计算机时代        交互问题  视窗、网络</p><p>2008 - 2016 复杂信息系统时代         数据问题</p><p>2017 -              人工智能时代             人类的问题</p><p>新计算时代</p></li><li><p>不同编程语言的初心和适用对象</p><p>C   理解计算机系统结构   关注性能   底层</p><p>JAVA  理解主客体关系    跨平台    软件类</p><p>C++   理解主客体关系   大规模程序     核心软件</p><p>VB   理解交互逻辑    桌面应用   </p><p>Python     理解问题求解    各类问题</p><p>python  是一个通用语言</p></li></ul><h3 id="0x2-python特点与优势"><a href="#0x2-python特点与优势" class="headerlink" title="0x2 python特点与优势"></a>0x2 python特点与优势</h3><ul><li><p>C的10%的代码量</p><p>强制可读性</p><p>较少的底层语法元素</p><p>多种编程方式</p><p>支持中文字符</p></li><li><p>强大的第三方库</p><p>快速增长的计算生态</p><p>避免重复造轮子</p><p>开放共享</p><p>跨操作系统平台</p></li><li><p>各语言的面向对象</p><p>C/C++： Python归Python ，C归C</p><p>Java ： 针对待定开发和岗位需求</p><p>HTML/CSS/JS：不可替代的前端技术，全栈能力</p></li><li><p>超级语言的诞生</p><p>粘性整合已有程序，形成庞大的生态</p><p>具有庞大的计算生态，可以很容易利用已有代码功能</p><p>编程思维是集成开发</p><p>完成2+3功能的高级语言</p><p>Python是唯一的超级语言</p></li></ul><h3 id="0x3-【实例】python绘制蟒蛇"><a href="#0x3-【实例】python绘制蟒蛇" class="headerlink" title="0x3 【实例】python绘制蟒蛇"></a>0x3 【实例】python绘制蟒蛇</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">import</span> turtle            <span class="hljs-comment">#引入了一个turtle绘图库</span><br>turtle.setup(<span class="hljs-number">650</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>turtle.penup()<br>turtle.fd(-<span class="hljs-number">250</span>)<br>turtle.pendown()<br>turtle.pensize(<span class="hljs-number">25</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;purple&quot;</span>)<br>turtle.seth(-<span class="hljs-number">40</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    turtle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)<br>    turtle.circle(-<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)<br>turrle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>/<span class="hljs-number">2</span>)<br>turtle.fd(<span class="hljs-number">40</span>)<br>turtle.circle(<span class="hljs-number">16</span>,<span class="hljs-number">180</span>)<br>turtle.fd(<span class="hljs-number">40</span>*<span class="hljs-number">2</span>/<span class="hljs-number">3</span>)<br>turtle.done()<br></code></pre></td></tr></table></figure><ul><li><p>举一反三</p><p>Python语法元素理解</p><p>程序参数的改变  颜色  长度 方向</p></li></ul><h3 id="0x4-模块一-turtle"><a href="#0x4-模块一-turtle" class="headerlink" title="0x4 模块一 turtle"></a>0x4 模块一 turtle</h3><ul><li><p>Python函数库之一</p><p>turtle库是入门级图形绘制函数库</p></li></ul><ul><li><p>python计算生态  = 标准库 + 第三方库</p><p>标准库 ：随解释器直接安装到操作系统中的功能模块</p><p>第三方库：需要经过安装才能使用的功能模块</p><p>库Library、包Package、模块Module ，统称模块</p></li></ul><ul><li><p>turtle的原理</p><p>有一直海龟，其实在窗体的正中心</p><p>在画布上游走，走过的轨迹形成了绘制的图形</p><p>海龟由程序控制，可以变换颜色、改变宽度等</p></li></ul><ul><li><p>模块1 turtle库的使用</p><p>turtle的绘图窗体</p><p>最小单位是像素</p><p><img src="https://s3.ax1x.com/2021/01/07/smQs6s.png" alt="屏幕截图 2021-01-07 183749"></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#设置启动窗体的位置和大小</span><br>turtle.setup(width,height,startx,starty)<br>示例：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> turtle<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">400</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)  <span class="hljs-comment">#在左上角显示</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> turtle<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">400</span>)   <span class="hljs-comment">#默认在屏幕中央显示</span><br></code></pre></td></tr></table></figure><ul><li><p>turtle空间坐标体系</p><p>绝对坐标  以海龟在中心为原点，做平面坐标系</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#示例1：</span><br><span class="hljs-keyword">import</span> turtle<br>turtle.goto(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)<br>turtle.goto(<span class="hljs-number">100</span>,-<span class="hljs-number">100</span>)<br>turtle.goto(-<span class="hljs-number">100</span>,-<span class="hljs-number">100</span>)<br>turtle.goto(-<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)<br>turtle.goto(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><pre><code>    海龟坐标  </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">turtle.fd(d) <span class="hljs-comment">#向海龟的正前方向运行</span><br>turtle.bk(d) <span class="hljs-comment">#向海龟的反方向运行</span><br>turtle.circle(r,angle)  <span class="hljs-comment">#以海龟左侧某一点为圆心，做曲线运行</span><br>r 半径  angle 角度<br></code></pre></td></tr></table></figure><p><img src="https://s3.ax1x.com/2021/01/07/smaGee.png" alt="屏幕截图 2021-01-07 183749"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br>turtle.circle(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br>turtle.circle(<span class="hljs-number">250</span>,<span class="hljs-number">80</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">45</span>)<br>turtle.circle(<span class="hljs-number">120</span>,<span class="hljs-number">45</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">30</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">30</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">10</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">5</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">5</span>)<br>turtle.circle(<span class="hljs-number">15</span>,<span class="hljs-number">50</span>)<br>turtle.circle(<span class="hljs-number">15</span>,<span class="hljs-number">170</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">5</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">5</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">10</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">30</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">30</span>)<br>turtle.circle(<span class="hljs-number">120</span>,<span class="hljs-number">45</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">45</span>)<br>turtle.circle(<span class="hljs-number">250</span>,<span class="hljs-number">80</span>)<br>turtle.circle(<span class="hljs-number">100</span>,<span class="hljs-number">10</span>)<br>turtle.circle(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br><span class="hljs-comment">#心形</span><br></code></pre></td></tr></table></figure><pre><code>    绝对角度坐标体系，x轴为0度</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">turtle.seth(angle)   <span class="hljs-comment">#-seth()改变海龟行进方向，但不行进,angle为绝对度数</span><br>turtle.left(angle)   <span class="hljs-comment">#改变运行方向</span><br>turtle.right(angle)  <span class="hljs-comment">#改变运行方向</span><br></code></pre></td></tr></table></figure><ul><li><p>RGB色彩体系</p><p>红黄蓝三通道</p><p>RGB小数值、整数值</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">turtle.colormode(mode) <span class="hljs-comment">#确定是用小数值还是整数值</span><br><span class="hljs-number">1.0</span>  表示小数值模式<br><span class="hljs-number">255</span>  表示整数值模式<br></code></pre></td></tr></table></figure><h3 id="0x5-turtle-程序语法元素分析"><a href="#0x5-turtle-程序语法元素分析" class="headerlink" title="0x5 turtle 程序语法元素分析"></a>0x5 turtle 程序语法元素分析</h3><h4 id="库引用与impot"><a href="#库引用与impot" class="headerlink" title="库引用与impot"></a>库引用与impot</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">import</span> turtle            <span class="hljs-comment">#引入了一个turtle绘图库</span><br>turtle.setup(<span class="hljs-number">650</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>turtle.penup()<br>turtle.fd(-<span class="hljs-number">250</span>)<br>turtle.pendown()<br>turtle.pensize(<span class="hljs-number">25</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;purple&quot;</span>)<br>turtle.seth(-<span class="hljs-number">40</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    turtle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)<br>    turtle.circle(-<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)<br>turrle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>/<span class="hljs-number">2</span>)<br>turtle.fd(<span class="hljs-number">40</span>)<br>turtle.circle(<span class="hljs-number">16</span>,<span class="hljs-number">180</span>)<br>turtle.fd(<span class="hljs-number">40</span>*<span class="hljs-number">2</span>/<span class="hljs-number">3</span>)<br>turtle.done()<br></code></pre></td></tr></table></figure><p>turtle.的编程风格</p><h4 id="库引用"><a href="#库引用" class="headerlink" title="库引用"></a>库引用</h4><p>扩充Python程序功能的方式</p><p>使用import保留字完成，采用.()编码风格   </p><p>import &lt;库名&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">import</span>&lt;库名&gt; <br>&lt;库名&gt; . &lt;函数名&gt;(&lt;函数参数&gt;)<br></code></pre></td></tr></table></figure><h4 id="import用法"><a href="#import用法" class="headerlink" title="import用法"></a>import用法</h4><p>使用from和import保留字共同完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">from</span> &lt;库名&gt; <span class="hljs-keyword">import</span> &lt;函数名&gt;<br><span class="hljs-keyword">from</span> &lt;库名&gt; <span class="hljs-keyword">import</span>*<br>&lt;函数名&gt;（函数参数）<br></code></pre></td></tr></table></figure><p>使用上述方式可以不用turtle. 直接函数名加函数参数，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span>*           <span class="hljs-comment">#引入了一个turtle绘图库</span><br>setup(<span class="hljs-number">650</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>penup()<br>fd(-<span class="hljs-number">250</span>)<br>pendown()<br>pensize(<span class="hljs-number">25</span>)<br>pencolor(<span class="hljs-string">&quot;purple&quot;</span>)<br>seth(-<span class="hljs-number">40</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)<br>    circle(-<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)    <span class="hljs-comment">#注意缩进，缩进不统一也会报错</span><br>circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>/<span class="hljs-number">2</span>)<br>fd(<span class="hljs-number">40</span>)<br>circle(<span class="hljs-number">16</span>,<span class="hljs-number">180</span>)<br>fd(<span class="hljs-number">40</span>*<span class="hljs-number">2</span>/<span class="hljs-number">3</span>)<br>done()<br></code></pre></td></tr></table></figure><ul><li>两种方法比较</li></ul><p>&lt;库名&gt; . &lt;函数名&gt;(&lt;函数参数&gt;) </p><p>&lt;函数名&gt;（函数参数）</p><p> 第一种方法不会出现函数重名问题</p><p> 第二种方法会出现</p><h4 id="import更多用法"><a href="#import更多用法" class="headerlink" title="import更多用法"></a>import更多用法</h4><p>使用import和as保留字共同完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">import</span> &lt;库名&gt; <span class="hljs-keyword">as</span> &lt;库别名&gt;   <span class="hljs-comment"># 相当于自定义了一个简便的名字</span><br>&lt;库别名&gt; . &lt;函数名&gt;(&lt;函数参数&gt;) <br></code></pre></td></tr></table></figure><ul><li>turtle画笔控制函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">turtle.penup()      <span class="hljs-comment">#抬起画笔，海龟在飞行</span><br>turtle.pendown()    <span class="hljs-comment">#落下画笔，海龟在爬行</span><br>turtle.pensize(<span class="hljs-number">25</span>)  <span class="hljs-comment"># 设置画笔宽度 别名  turtle.width(width)</span><br>turtle.pencolor(<span class="hljs-string">&quot;purple&quot;</span>)  <span class="hljs-comment">#修改画笔颜色，参数字符串小写</span><br><br><span class="hljs-comment">#pencolor(color)的参数可以有三种形式</span><br>颜色字符串   turtle.pencolor(<span class="hljs-string">&quot;purple&quot;</span>)<br>RGB的小数值  turtle.pencolor(<span class="hljs-number">0.62</span>,<span class="hljs-number">0.42</span>,<span class="hljs-number">0.13</span>)<br>RGB的元组值  turtle.pencolor((<span class="hljs-number">0.62</span>,<span class="hljs-number">0.42</span>,<span class="hljs-number">0.13</span>))<br></code></pre></td></tr></table></figure><p>将海龟想象为画笔</p><p>画笔操作后一直有效，一般成对出现</p><p>turtle运动控制函数</p><p>控制海龟行进方向：走直线或者曲线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#向前进，走直线</span><br>turtle.forward(d)  别名  turtle.fd(d)<br>d ：行进距离，可以为负数，倒退行进<br><br><span class="hljs-comment">#根据半径r绘制extent角度的弧形</span><br>turtle.circle(r,extent=<span class="hljs-literal">None</span>)  <br>r：默认圆心在海龟左侧r距离的位置<br>extent ：绘制角度，默认是<span class="hljs-number">360</span>度整圆<br></code></pre></td></tr></table></figure><p>turtle方向控制函数</p><p>控制海龟面对方向：绝对角度和海龟角度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#当前海龟方向，改变为某一角度方向</span><br>turtle.setheading(angle)   别名  turtle.seth(angle)<br>angle：改变行进绝对方向，海龟走角度<br><br><span class="hljs-comment">#控制海龟向左转或向右转</span><br>turtle.left(angle)<br>turtle.right(angle)<br>angle： 在海归当前行进方向上旋转的角度<br></code></pre></td></tr></table></figure><h4 id="基本循环语句与range函数"><a href="#基本循环语句与range函数" class="headerlink" title="基本循环语句与range函数"></a>基本循环语句与range函数</h4><p>循环语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span>&lt;执行次数&gt; <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(&lt;要执行多少次&gt;):<br>   &lt;被循环执行的语句&gt;<br>    <br><span class="hljs-comment">#range的参数是循环的次数</span><br><span class="hljs-comment">#for in  之间的变量是每次执行的计数，0到&lt;执行次数&gt; - 1</span><br><br>示例：<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i)<br>输出：<br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-comment">#输出print(&quot;Hello:&quot;,i) 中的逗号在输出时显示为空格</span><br></code></pre></td></tr></table></figure><p>range函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#产生循环计数序列</span><br><span class="hljs-built_in">range</span>(N)  即产生<span class="hljs-number">0</span>到N-<span class="hljs-number">1</span>的整数序列，共N个<br>如：<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>),则产生<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span><br><br><span class="hljs-built_in">range</span>(M,N) 即产生M到N-<span class="hljs-number">1</span>的整数序列，共N-M个<br>如：<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>，<span class="hljs-number">5</span>),则产生<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><ul><li>python蟒蛇绘制代码分析</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">import</span> turtle                   <span class="hljs-comment">#引入了一个turtle绘图库</span><br>turtle.setup(<span class="hljs-number">650</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)   <span class="hljs-comment">#设立了一个窗体</span><br>turtle.penup()       <span class="hljs-comment">#将画笔抬起</span><br>turtle.fd(-<span class="hljs-number">250</span>)<span class="hljs-comment">#海龟倒退250</span><br>turtle.pendown()<span class="hljs-comment">#放下画笔</span><br>turtle.pensize(<span class="hljs-number">25</span>)<span class="hljs-comment">#设置画笔宽度</span><br>turtle.pencolor(<span class="hljs-string">&quot;purple&quot;</span>)       <span class="hljs-comment">#设置画笔颜色</span><br>turtle.seth(-<span class="hljs-number">40</span>)                <span class="hljs-comment">#设置画笔起始角度为-40度</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):              <span class="hljs-comment">#利用循环绘制路径，循环4次</span><br>    turtle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)        <span class="hljs-comment">#先以半径为40像素，绘制80度</span><br>    turtle.circle(-<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)       <span class="hljs-comment">#再以反向40像素为半径，绘制80度</span><br>turrle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>/<span class="hljs-number">2</span>)          <span class="hljs-comment">#最后以40像素为半径，绘制40度</span><br>turtle.fd(<span class="hljs-number">40</span>)                   <span class="hljs-comment">#再向前走40像素</span><br>turtle.circle(<span class="hljs-number">16</span>,<span class="hljs-number">180</span>)           <span class="hljs-comment">#以16像素为半径，画180度</span><br>turtle.fd(<span class="hljs-number">40</span>*<span class="hljs-number">2</span>/<span class="hljs-number">3</span>)               <span class="hljs-comment">#当前方向向前走80/3像素</span><br>turtle.done()                   <span class="hljs-comment">#手动退出，删掉即自动退出</span><br></code></pre></td></tr></table></figure><h2 id="python基本数据类型"><a href="#python基本数据类型" class="headerlink" title="python基本数据类型"></a>python基本数据类型</h2><h3 id="0x1数字类型及操作"><a href="#0x1数字类型及操作" class="headerlink" title="0x1数字类型及操作"></a>0x1数字类型及操作</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><p>与数学整数概念一致</p><p>pow(x,y)  计算x的y次方，==想算多大算多大==</p><p>四种进制表示：</p><p>十进制：1010、99、-217</p><p>二进制：0b或0B开头  ：  0b0101，-0B1010</p><p>八进制：以0o或0O开头： 0o123，0O456</p><p>十六进制：以0x或0X开头：0x9a，- 0X89</p><h4 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h4><p>与数学实数概念一致</p><p>浮点数取值范围和小鼠精度都存在限制</p><p>取值范围数量级约±10的308次方，精度数量约10的-16</p><p>浮点数之间的运算存在不确定尾数，不是bug</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.1</span> +<span class="hljs-number">0.2</span><br><span class="hljs-number">0.30000000000000004</span><br></code></pre></td></tr></table></figure><ul><li><p>存在不确定尾数的原因</p><p>计算机中是二进制存储的，二进制表示小数可以无限接近0.1，但永远不完全相同</p><p>所以十进制表示的0.1加0.2结果无限接近0.3，但可能存在尾数</p></li></ul><h4 id="round函数"><a href="#round函数" class="headerlink" title="round函数"></a>round函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">round</span>(x,d): 对x四舍五入，d是小数截取位数<br>    <br>示例：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>,<span class="hljs-number">1</span>) == <span class="hljs-number">0.3</span><br><span class="hljs-literal">True</span><br><span class="hljs-comment">#浮点数间运算及比较用round()函数辅助</span><br><span class="hljs-comment">#不确定位数一般在10的-16次方左右，固该函数有效</span><br></code></pre></td></tr></table></figure><h4 id="科学计数法表示浮点数"><a href="#科学计数法表示浮点数" class="headerlink" title="科学计数法表示浮点数"></a>科学计数法表示浮点数</h4><p>格式e表示 a*10的b次方</p><p>例如：4.3e-3  值为0.0043</p><h4 id="复数类型"><a href="#复数类型" class="headerlink" title="==复数类型=="></a>==复数类型==</h4><p>x的平方 = -1 ，那么x的值是？</p><p>定义 ：$j=\sqrt{(-1)}$  </p><p>a + bj 被称为复数，其中a为实部，b是虚部</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>z = <span class="hljs-number">10</span> + <span class="hljs-number">10j</span>   <span class="hljs-comment">#复数类型</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(z)<br>(<span class="hljs-number">10</span>+<span class="hljs-number">10j</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h4 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="数值运算操作符"></a>数值运算操作符</h4><ul><li>加减乘除与C相同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#特别注意</span><br>x / y      <span class="hljs-comment">#结果是浮点数除法</span><br>x // y     <span class="hljs-comment">#结果是整数无小数除法，直接约去小数，不四舍五入</span><br>示例：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span> // <span class="hljs-number">4</span><br><span class="hljs-number">0</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span>/<span class="hljs-number">2</span><br><span class="hljs-number">3.5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span>//<span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">19</span> / <span class="hljs-number">5</span><br><span class="hljs-number">3.8</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">19</span>//<span class="hljs-number">5</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><ul><li>模运算(取余运算)与C相同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x % y  <br></code></pre></td></tr></table></figure><ul><li>幂运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x ** y  <span class="hljs-comment">#表示x的y次幂，当y是小数时，做开方运算</span><br>示例：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span> ** <span class="hljs-number">10</span><br><span class="hljs-number">1024</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">49</span> ** <span class="hljs-number">0.5</span><br><span class="hljs-number">7.0</span><br></code></pre></td></tr></table></figure><ul><li>二元操作符对应的增强赋值操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x op=y  相当于  x = x op y<br><span class="hljs-comment">#op 表示二元操作符，如 +、 -、 *、 /、 //、%、**</span><br><span class="hljs-comment">#与C中的  += 意思相同</span><br></code></pre></td></tr></table></figure><p>不同数据类型间可以混合运算，生成结果为“最宽”类型</p><p>注意可能会产生不确定的尾数</p><h4 id="数值运算函数"><a href="#数值运算函数" class="headerlink" title="数值运算函数"></a>数值运算函数</h4><table><thead><tr><th>函数及使用</th><th>描述</th></tr></thead><tbody><tr><td>abs(x)</td><td>绝对值，x的绝对值</td></tr><tr><td>divmod(x,y)</td><td>商余,(x//y,x%y),同时输出商和余数</td></tr><tr><td>pow(x,y,z)</td><td>幂余运算，(x**y)%z，参数z可省略</td></tr><tr><td>round(x,d)</td><td>四舍五入，d是保留小数位数，默认为零</td></tr><tr><td>max(a,b,c,…)</td><td>返回数字序列中最大值</td></tr><tr><td>min(a,b,c,…)</td><td>返回数字序列最小值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">abs</span>(-<span class="hljs-number">1</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">divmod</span>(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>)<br>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)<br><span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>)<br><span class="hljs-number">1024</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(<span class="hljs-number">10.12345</span>,<span class="hljs-number">4</span>)<br><span class="hljs-number">10.1235</span> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>)<br><span class="hljs-number">9</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">min</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">23</span>)<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="数字类型转换函数"><a href="#数字类型转换函数" class="headerlink" title="数字类型转换函数"></a>数字类型转换函数</h4><table><thead><tr><th>函数及使用</th><th>描述</th></tr></thead><tbody><tr><td>int(x)</td><td>转变为整型，取整数部分</td></tr><tr><td>float(x)</td><td>转变为浮点数，增加小数部分</td></tr><tr><td>complex(x)</td><td>将x变成复数，增加虚数部分</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-number">4.35</span>)<br><span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-number">1.23</span>)<br><span class="hljs-number">1.23</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-number">1</span>)<br><span class="hljs-number">1.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">complex</span>(<span class="hljs-number">5</span>)<br>(<span class="hljs-number">5</span>+<span class="hljs-number">0j</span>)<br></code></pre></td></tr></table></figure><h3 id="0x2-【实例】-天天向上的力量"><a href="#0x2-【实例】-天天向上的力量" class="headerlink" title="0x2 【实例】 天天向上的力量"></a>0x2 【实例】 天天向上的力量</h3><p>基本问题，持续价值</p><p>1.01的365次方</p><p>0.99的365次方</p><h4 id="问题1-千分之一的力量"><a href="#问题1-千分之一的力量" class="headerlink" title="问题1  千分之一的力量"></a>问题1  千分之一的力量</h4><p>1.001的365次方</p><p>0.999的365次方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#DaydayupQ1.py</span><br>x = <span class="hljs-built_in">pow</span>(<span class="hljs-number">1.001</span>,<span class="hljs-number">365</span>)<br>y = <span class="hljs-built_in">pow</span>(<span class="hljs-number">0.999</span>,<span class="hljs-number">365</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;向上：&#123;:.2f&#125;,向下：&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(x,y))<br><br>输出：<br>向上：<span class="hljs-number">1.44</span>,向下：<span class="hljs-number">0.69</span><br></code></pre></td></tr></table></figure><h4 id="问题2-千分之五和1"><a href="#问题2-千分之五和1" class="headerlink" title="问题2 千分之五和1%"></a>问题2 千分之五和1%</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#DaydayupQ1.py</span><br>dayfactor = <span class="hljs-number">0.005</span>  <br>dayup = <span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span> + dayfactor,<span class="hljs-number">365</span>)<br>daydown = <span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span> - dayfactor,<span class="hljs-number">365</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;向上：&#123;:.2f&#125;,向下：&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dayup,daydown))<br><br>输出：<br>向上：<span class="hljs-number">6.17</span>,向下：<span class="hljs-number">0.16</span><br><br><span class="hljs-comment">#DaydayupQ1.py</span><br>dayfactor = <span class="hljs-number">0.01</span><br>dayup = <span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span> + dayfactor,<span class="hljs-number">365</span>)<br>daydown = <span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span> - dayfactor,<span class="hljs-number">365</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;向上：&#123;:.2f&#125;,向下：&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dayup,daydown))<br><br>输出：<br>向上：<span class="hljs-number">37.78</span>,向下：<span class="hljs-number">0.03</span><br></code></pre></td></tr></table></figure><h4 id="问题3-工作日力量"><a href="#问题3-工作日力量" class="headerlink" title="问题3 工作日力量"></a>问题3 工作日力量</h4><p>一周  5天工作日每天提升1%，休息日2天每天退步1%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#DaydayupQ3.py</span><br>dayup = <span class="hljs-number">1.0</span><br>dayfactor = <span class="hljs-number">0.01</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">365</span>):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">7</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">6</span>,<span class="hljs-number">0</span>]:<br>        dayup = dayup *(<span class="hljs-number">1</span>-dayfactor)<br>    <span class="hljs-keyword">else</span>:<br>        dayup = dayup *(<span class="hljs-number">1</span>+dayfactor)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一年后的成长：&#123;:.2f&#125;倍&quot;</span>.<span class="hljs-built_in">format</span>(dayup))<br>输出：<br>一年后的成长：<span class="hljs-number">4.63</span>倍<br></code></pre></td></tr></table></figure><p>结论：问题3的结果4.63倍介于，问题1的365天每天千分之一的1.44倍和问题2的365每天千分之五6.17倍之间。</p><h4 id="问题4-工作日的努力"><a href="#问题4-工作日的努力" class="headerlink" title="问题4 工作日的努力"></a>问题4 工作日的努力</h4><p>A  每天1% </p><p>B  工作日提升x，休息日下降1%</p><p>问当x为多少时，A与B的提升相等？</p><p><a href="https://imgchr.com/i/sM0kwV"><img src="https://s3.ax1x.com/2021/01/09/sM0kwV.png" alt="sM0kwV.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#DaydayupQ4.py</span><br><span class="hljs-comment">#def用来定义函数，占位符df是dayfactor的简写。</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dayUP</span>(<span class="hljs-params">df</span>):</span>      <span class="hljs-comment">#函数dayUP</span><br>    dayup = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">365</span>):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">7</span> <span class="hljs-keyword">in</span>[<span class="hljs-number">6</span>,<span class="hljs-number">0</span>]:<br>            dayup = dayup*(<span class="hljs-number">1</span> - <span class="hljs-number">0.01</span>)<br>        <span class="hljs-keyword">else</span>:<br>            dayup = dayup * (<span class="hljs-number">1</span> + df)<br>    <span class="hljs-keyword">return</span> dayup<br><span class="hljs-comment">#根据df参数不同，函数内部会返回对应的结果，返回dayup</span><br><br>dayfactor = <span class="hljs-number">0.01</span><br><span class="hljs-keyword">while</span> dayUP(dayfactor) &lt; <span class="hljs-number">37.78</span>:  <span class="hljs-comment">#调用了上述函数</span><br>    dayfactor += <span class="hljs-number">0.001</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;工作日的努力参数是：&#123;:.3f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dayfactor)) <span class="hljs-comment">#输出比上的结果</span><br><br>输出：<br>工作日的努力参数是：<span class="hljs-number">0.019</span><br></code></pre></td></tr></table></figure><p>结论：工作日要努力约2%，才能跟不休息每天学1%的人相同</p><h3 id="0x3-字符串类型及操作"><a href="#0x3-字符串类型及操作" class="headerlink" title="0x3 字符串类型及操作"></a>0x3 字符串类型及操作</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>由一对 ‘  ’ 或 ” “ 包含的一连串字符</p><p>可以索引”  “[ ]</p><h4 id="字符串有四种表示方法"><a href="#字符串有四种表示方法" class="headerlink" title="字符串有四种表示方法"></a>字符串有四种表示方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">前两种<br><span class="hljs-string">&quot;请输如带有符号的温度值&quot;</span>  或者   <span class="hljs-string">&#x27;C&#x27;</span><br><br>后两种<br><span class="hljs-string">&#x27;&#x27;&#x27; Python</span><br><span class="hljs-string">             语言 &#x27;&#x27;&#x27;</span>  <br>或者<br><span class="hljs-string">&quot;&quot;&quot; Python</span><br><span class="hljs-string">             语言  &quot;&quot;&quot;</span><br><br><span class="hljs-comment">#注释也是&#x27;&#x27;&#x27; &#x27;&#x27;&#x27;，是因为没有被作用的字符串则被认为是注释</span><br></code></pre></td></tr></table></figure><p>如果要在字符串内部表示 “ 则用 ‘ 构成字符串</p><p>如果要在字符串内部表示 ’ 则用 “ 构成字符串</p><p>如果 ‘ 和 ” 都要在字符串内部表示，则用  ’‘’  构成字符串  </p><p><img src="https://s3.ax1x.com/2021/01/06/sVUaSU.png" alt="image-20210106182910519"></p><h4 id="索引-、-切片"><a href="#索引-、-切片" class="headerlink" title="索引 、 切片"></a>索引 、 切片</h4><p>切片高级用法</p><p>&lt;字符串&gt;[M:N] ，M缺失变送至开头，缺失表示至结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;这是一个字符串&quot;</span>[:<span class="hljs-number">3</span>]<br><span class="hljs-string">&#x27;这是一&#x27;</span><br></code></pre></td></tr></table></figure><p>&lt;字符串&gt;[M:N:K]，使用[M:N:K]根据步长对字符串切片，k表示每移几位进行切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;123456789&quot;</span>[<span class="hljs-number">1</span>:<span class="hljs-number">7</span>:<span class="hljs-number">2</span>]   <br><span class="hljs-string">&#x27;246&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;123456789&quot;</span>[::-<span class="hljs-number">1</span>]  <span class="hljs-comment">#可实现逆序的效果</span><br><span class="hljs-string">&#x27;987654321&#x27;</span><br><br>更多测试<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;123456789&quot;</span>[<span class="hljs-number">2</span>::-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;321&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;123456789&quot;</span>[<span class="hljs-number">0</span>::-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;123456789&quot;</span>[:<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;987&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="转义符"><a href="#转义符" class="headerlink" title="转义符 \"></a>转义符 \</h4><p>转义符表达特定字符的本意</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-string">&quot;这里有个双引号\&quot;  &quot;</span><br><span class="hljs-string">&#x27;这里有个双引号&quot;  &#x27;</span><br><br>\b 回退  \n换行  \r回车<br></code></pre></td></tr></table></figure><h4 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h4><table><thead><tr><th>操作符及使用</th><th align="left">描述</th></tr></thead><tbody><tr><td>x + y</td><td align="left">连接两个字符串x和y</td></tr><tr><td>n *x</td><td align="left">复制n次字符串x</td></tr><tr><td>x in s</td><td align="left">如果x是s的子串，返回true，否则返回False</td></tr></tbody></table><h4 id="获取星期字符串"><a href="#获取星期字符串" class="headerlink" title="获取星期字符串"></a>获取星期字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#WeekNamePrintV1.py</span><br>weekStr = <span class="hljs-string">&quot;星期一星期二星期三星期四星期五星期六星期日&quot;</span><br>weekID = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入星期数字(1-7):&quot;</span>))<br>pos = (weekId - <span class="hljs-number">1</span>) * <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(weekStr[pos:pos+<span class="hljs-number">3</span>])<br><br>改进版<br><span class="hljs-comment">#WeekNamePrintV1.py</span><br>weekStr = <span class="hljs-string">&quot;一二三四五六日&quot;</span><br>weekID = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入星期数字(1-7):&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;星期&quot;</span>+weekStr[weekID])<br></code></pre></td></tr></table></figure><h4 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h4><table><thead><tr><th>函数及使用</th><th>描述</th></tr></thead><tbody><tr><td>len(x)</td><td>返回字符串的长度</td></tr><tr><td>str(x)</td><td>返回任意类型x对应的字符串形式,与eval()相对应</td></tr><tr><td>hen(x) 或oct(x)</td><td>整数x的十六进制或八进制小写形式字符串</td></tr><tr><td>chr(u)</td><td>u为Unicode编码，返回其对应的字符</td></tr><tr><td>ord(x)</td><td>x为字符，返回其对应的Unicode编码</td></tr></tbody></table><h4 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h4><p>python字符串的编码方式，适用于各国语言</p><p>从0到1114111(0x10FFFF)空间，每个编码对应一个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#示例1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;1 + 1 = 2 &quot;</span> + <span class="hljs-built_in">chr</span>(<span class="hljs-number">10004</span>)<br><span class="hljs-string">&#x27;1 + 1 = 2 ✔&#x27;</span><br><br><span class="hljs-comment">#示例2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">chr</span>(<span class="hljs-number">9801</span>)<br><span class="hljs-string">&#x27;♉&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;♉&quot;</span>))<br><span class="hljs-string">&#x27;9801&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="十二星座"><a href="#十二星座" class="headerlink" title="十二星座"></a>十二星座</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">9800</span> +i))   <span class="hljs-comment">#无end参数时换行</span><br><br><br>♈<br>♉<br>♊<br>♋<br>♌<br>♍<br>♎<br>♏<br>♐<br>♑<br>♒<br>♓<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">9800</span> +i), end = <span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-comment">#end参数 = 空时，不换行</span><br><br><br>♈♉♊♋♌♍♎♏♐♑♒♓<br></code></pre></td></tr></table></figure><h4 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h4><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>“方法”在编程中是专有名词</p><p>方法特指  a . b( ) 风格中的函数b( )</p><p>方法本身也是函数，但与a有关，b是a提供的函数</p><ul><li><p>面向对象中</p><p>a为对象，b为对象能够提供的功能</p><p>方法必用 . 的方式执行</p></li></ul><h5 id="一些以方法形式提供的字符串处理功能"><a href="#一些以方法形式提供的字符串处理功能" class="headerlink" title="一些以方法形式提供的字符串处理功能"></a>一些以方法形式提供的字符串处理功能</h5><table><thead><tr><th>方法及使用</th><th>描述</th></tr></thead><tbody><tr><td>str . lower()或str.upper()</td><td>返回字符串的副本，全部字符小写/大写</td></tr><tr><td>str . split(sep）</td><td>返回一个列表，由str根据sep被分隔的部分组成</td></tr><tr><td>str . count(sub)</td><td>返回子串sub在str中出现的次数</td></tr><tr><td>str.replace(old,new)</td><td>返回字符串str副本，所有old子串被替换为new</td></tr><tr><td>str.center(width[,fillchar])</td><td>字符串str根据宽度with居中，fillchar可选,宽度是新的整个字符串的宽度</td></tr><tr><td>str.strip(chars)</td><td>从str中去掉在其左侧和右侧chars中列出的字符</td></tr><tr><td>str.join(iter)</td><td>在iter变量除最后元素外每个元素后增加一个str</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;abcdefg&quot;</span>.upper()<br><span class="hljs-string">&#x27;ABCDEFG&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;a,b,c,d,e,f,g&quot;</span>.split(<span class="hljs-string">&quot;,&quot;</span>)     <span class="hljs-comment">#默认是空格</span><br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;an apple is bad&quot;</span>.count(<span class="hljs-string">&quot;a&quot;</span>)<br><span class="hljs-number">3</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;abcdefg&quot;</span>.split(<span class="hljs-string">&quot;c&quot;</span>)  <br>[<span class="hljs-string">&#x27;ab&#x27;</span>, <span class="hljs-string">&#x27;defg&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;python&quot;</span>.replace(<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;n123.io&quot;</span>)<br><span class="hljs-string">&#x27;python123.io&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;an&quot;</span>.center(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;=&quot;</span>)<br><span class="hljs-string">&#x27;====an====&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;=python =&quot;</span>.strip(<span class="hljs-string">&quot; =np&quot;</span>)<br><span class="hljs-string">&#x27;ytho&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;,&quot;</span>.join(<span class="hljs-string">&quot;12345&quot;</span>)<br><span class="hljs-string">&#x27;1,2,3,4,5&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="字符串类型的格式化"><a href="#字符串类型的格式化" class="headerlink" title="字符串类型的格式化"></a>字符串类型的格式化</h5><p>格式化是对字符串进行格式表达的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;模板字符串&gt;.<span class="hljs-built_in">format</span>(&lt;逗号分隔的参数&gt;)<br></code></pre></td></tr></table></figure><h5 id="槽"><a href="#槽" class="headerlink" title="槽"></a>槽</h5><p>一对 { } 表示槽</p><p>不同的对应位置有不同的输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">示例：<br>“&#123;&#125;:计算机&#123;&#125;的CPU占用率为&#123;&#125;%”.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;2018-10-10&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">10</span>)  <span class="hljs-comment">#其中有三个槽，与C中输出的位置对应相同，默认按顺序一一对应</span><br><br>“&#123;<span class="hljs-number">0</span>&#125;:计算机&#123;<span class="hljs-number">1</span>&#125;的CPU占用率为&#123;<span class="hljs-number">2</span>&#125;%”.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;2018-10-10&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">10</span>)  <span class="hljs-comment">#对应位置</span><br>    <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0&#125;:计算机&#123;1&#125;的CPU占用率为&#123;2&#125;%&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;2018-10-10&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">10</span>))<br><span class="hljs-number">2018</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>:计算机C的CPU占用率为<span class="hljs-number">10</span>%<br>    <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;1&#125;:计算机&#123;0&#125;的CPU占用率为&#123;2&#125;%&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;2018-10-10&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">10</span>)) <span class="hljs-comment">#交换后，输出也交换</span><br>C:计算机<span class="hljs-number">2018</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>的CPU占用率为<span class="hljs-number">10</span>%<br>    <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:计算机&#123;&#125;的CPU占用率为&#123;&#125;%&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;2018-10-10&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">10</span>))  <span class="hljs-comment">#默认按顺序对应</span><br><span class="hljs-number">2018</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>:计算机C的CPU占用率为<span class="hljs-number">10</span>%<br></code></pre></td></tr></table></figure><h5 id="format-方法的格式控制"><a href="#format-方法的格式控制" class="headerlink" title="format()方法的格式控制"></a>format()方法的格式控制</h5><p>类似于C输出的格式控制</p><table><thead><tr><th align="center">：</th><th align="center">&lt;填充&gt;</th><th align="center">&lt;对齐&gt;</th><th align="center">&lt;宽度&gt;</th><th align="center">&lt;,&gt;</th><th>&lt; . 精度&gt;</th><th>&lt;类型&gt;</th></tr></thead><tbody><tr><td align="center">引导符号</td><td align="center">用于填充的单个字符</td><td align="center">&lt; 左对齐 ，&gt; 右对齐，^ 居中对齐</td><td align="center">槽设定的输出宽度</td><td align="center">数字的千位分隔符</td><td>浮点数小数精度或字符串最大输出长度</td><td>整数类型b,c,d,o,x,X浮点数类型e，E，f，%</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">示例：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;0:=^20&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;PYTHON&quot;</span>)<br><span class="hljs-string">&#x27;=======PYTHON=======&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;1:=^20&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;PYTHON&quot;</span>,<span class="hljs-string">&quot;ABC&quot;</span>)<br><span class="hljs-string">&#x27;========ABC=========&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;1:=&lt;20&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;PYTHON&quot;</span>,<span class="hljs-string">&quot;ABC&quot;</span>)<br><span class="hljs-string">&#x27;ABC=================&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;1:20&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;PYTHON&quot;</span>,<span class="hljs-string">&quot;ABC&quot;</span>)<br><span class="hljs-string">&#x27;ABC                 &#x27;</span>             <span class="hljs-comment">#默认填充空格</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;0:,.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1234567.8910</span>)<br><span class="hljs-string">&#x27;1,234,567.89&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;0:b&#125;,&#123;0:c&#125;,&#123;0:d&#125;,&#123;0:o&#125;,&#123;0:x&#125;,&#123;0:X&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">425</span>)   <span class="hljs-comment">#不同进制表示</span><br><span class="hljs-string">&#x27;110101001,Ʃ,425,651,1a9,1A9&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;0:e&#125;,&#123;0:E&#125;,&#123;0:f&#125;,&#123;0:%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3.14</span>)<br><span class="hljs-string">&#x27;3.140000e+00,3.140000E+00,3.140000,314.000000%&#x27;</span><br></code></pre></td></tr></table></figure><p>==中文可以放到字符串中，不能在语法中出现==</p><h3 id="0x4-time库的使用"><a href="#0x4-time库的使用" class="headerlink" title="0x4 time库的使用"></a>0x4 time库的使用</h3><h4 id="time库基本介绍"><a href="#time库基本介绍" class="headerlink" title="time库基本介绍"></a>time库基本介绍</h4><p>python中的标准库</p><p>计算机时间的表达</p><p>提供获取系统时间并格式化输出功能</p><p>提供系统级精确计时功能没用于程序性能分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>time.&lt;b&gt;()<br><span class="hljs-comment">#包括三类函数</span><br><span class="hljs-comment">#时间获取： time()  ctime()  gmtime()</span><br><span class="hljs-comment">#时间格式化：  strftime()  strtime()</span><br><span class="hljs-comment">#程序计时：  sleep(), perf_counter()</span><br></code></pre></td></tr></table></figure><h4 id="时间获取"><a href="#时间获取" class="headerlink" title="时间获取"></a>时间获取</h4><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">time()</td><td align="center">获取当前时间戳，即计算机内部时间值</td></tr><tr><td align="center">ctime()</td><td align="center">获取当前时间，格式是，星期、‘月、日、时间、年份’</td></tr><tr><td align="center">gmtime()</td><td align="center">获取当前时间，表示为计算机程序可编程利用的时间格式</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>time.time()<br><span class="hljs-number">1610244498.6032174</span>   <span class="hljs-comment">#表示从1970年1月1日0：00 开始至现在时刻的以秒为单位的数值</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>time.ctime()<br><span class="hljs-string">&#x27;Sun Jan 10 10:11:36 2021&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>time.gmtime()<br>time.struct_time(tm_year=<span class="hljs-number">2021</span>, tm_mon=<span class="hljs-number">1</span>, tm_mday=<span class="hljs-number">10</span>, tm_hour=<span class="hljs-number">2</span>, tm_min=<span class="hljs-number">29</span>, tm_sec=<span class="hljs-number">12</span>, tm_wday=<span class="hljs-number">6</span>, tm_yday=<span class="hljs-number">10</span>, tm_isdst=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h4 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h4><p>类似字符串格式化，需要展示模板</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">strftime(tpl,ts)</td><td align="center">tpl是格式化模板字符串，用来定义输出效果，ts是计算机内部时间类型变量</td></tr><tr><td align="center">%Y</td><td align="center">年份 0000~9999</td></tr><tr><td align="center">%m</td><td align="center">月份 01~12</td></tr><tr><td align="center">%B</td><td align="center">月份名称 January ~December</td></tr><tr><td align="center">%b</td><td align="center">月份名称缩写 Jan ~ Dec</td></tr><tr><td align="center">%d</td><td align="center">日期 01~31</td></tr><tr><td align="center">%A</td><td align="center">星期 Monday ~ Sunday</td></tr><tr><td align="center">%a</td><td align="center">星期缩写 Mon ~ Sun</td></tr><tr><td align="center">%H</td><td align="center">小时  00 ~ 23</td></tr><tr><td align="center">%I</td><td align="center">小时  01 ~ 12</td></tr><tr><td align="center">%p</td><td align="center">上下午  AM，PM</td></tr><tr><td align="center">%M</td><td align="center">分钟  00 ~ 59</td></tr><tr><td align="center">%S</td><td align="center">秒钟  00 ~ 59</td></tr><tr><td align="center">strptime(str,tpl)</td><td align="center">str是字符串形式的时间值，tpl是格式化模板字符串，用来定义输入效果</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,t)<br><span class="hljs-string">&#x27;2021-01-10 02:37:19&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>time.strptime(<span class="hljs-string">&#x27;2021-01-10 02:37:19&#x27;</span>,<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>time.struct_time(tm_year=<span class="hljs-number">2021</span>, tm_mon=<span class="hljs-number">1</span>, tm_mday=<span class="hljs-number">10</span>, tm_hour=<span class="hljs-number">2</span>, tm_min=<span class="hljs-number">37</span>, tm_sec=<span class="hljs-number">19</span>, tm_wday=<span class="hljs-number">6</span>, tm_yday=<span class="hljs-number">10</span>, tm_isdst=-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="程序计时运用"><a href="#程序计时运用" class="headerlink" title="程序计时运用"></a>程序计时运用</h4><p>测量起止动作所经历的时间</p><p>测量时间函数：perf_counter()</p><p>产生时间函数：sleep()</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">perf_counter()</td><td align="center">返回一个CPU级别的精确时间计数值，单位为秒。由于这个计数值起点不确定，连续调用差值才有意义</td></tr><tr><td align="center">sleep(s)</td><td align="center">s 拟休眠时间，单位是秒，可以是浮点数</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-meta">&gt;&gt;&gt; </span>start = time.perf_counter()<br><span class="hljs-meta">&gt;&gt;&gt; </span>end = time.perf_counter()<br><span class="hljs-meta">&gt;&gt;&gt; </span>end - start<br><span class="hljs-number">21.654742400000032</span><br><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wait</span>():</span><br>    time.sleep(<span class="hljs-number">3.3</span>)<br><br>    <br><span class="hljs-meta">&gt;&gt;&gt; </span>wait()   <span class="hljs-comment"># 这里则表示调用函数wait，使程序等待3.3秒再结束</span><br>    <br>    <br></code></pre></td></tr></table></figure><h3 id="0x5-【实列】-文本进度条"><a href="#0x5-【实列】-文本进度条" class="headerlink" title="0x5 【实列】 文本进度条"></a>0x5 【实列】 文本进度条</h3><h4 id="文本进度条问题要求："><a href="#文本进度条问题要求：" class="headerlink" title="文本进度条问题要求："></a>文本进度条问题要求：</h4><p>采用字符串方式打印可以动态变化的文本进度条</p><p>进度条需要能在一行中逐渐变化</p><p>采用sleep()模拟一个持续进度</p><p>####初步结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#TExtPorBarV1.py</span><br><span class="hljs-keyword">import</span> time<br>scale = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;------执行开始------&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(scale +<span class="hljs-number">1</span>):<br>    a = <span class="hljs-string">&#x27;*&#x27;</span> * i<br>    b = <span class="hljs-string">&#x27;.&#x27;</span> * (scale - i)<br>    c = (i/scale)*<span class="hljs-number">100</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&quot;</span>.<span class="hljs-built_in">format</span>(c,a,b))<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;------执行结束------&quot;</span>)    <br><br>输出<br></code></pre></td></tr></table></figure><h4 id="文本进度条的单行动态刷新"><a href="#文本进度条的单行动态刷新" class="headerlink" title="文本进度条的单行动态刷新"></a>文本进度条的单行动态刷新</h4><p>刷新的本质是：用后打印的字符覆盖之前的字符</p><p>不能换行：print()需要被控制</p><p>要能回退：打印后光标退回到之前的位置\r</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#TextProBarV1.py</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;:3&#125;%&quot;</span>.<span class="hljs-built_in">format</span>(i),end=<span class="hljs-string">&quot;&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <br>输出：<br>IDLE输出会将每一个结果输出，用cmd命令提示符运行即可看到效果<br></code></pre></td></tr></table></figure><h4 id="完整文本进度代码"><a href="#完整文本进度代码" class="headerlink" title="完整文本进度代码"></a>完整文本进度代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#TExtPorBarV1.py</span><br><span class="hljs-keyword">import</span> time<br>scale = <span class="hljs-number">50</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行开始&quot;</span>.center(scale//<span class="hljs-number">2</span>))<br>start = time.perf_counter()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(scale +<span class="hljs-number">1</span>):<br>    a = <span class="hljs-string">&#x27;*&#x27;</span> * i<br>    b = <span class="hljs-string">&#x27;.&#x27;</span> * (scale - i)<br>    c = (i/scale)*<span class="hljs-number">100</span><br>    dur = time.perf_counter() - start<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;</span>.<span class="hljs-built_in">format</span>(c,a,b,dur),end=<span class="hljs-string">&quot;&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>+<span class="hljs-string">&quot;执行结束&quot;</span>.center(scale//<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;-&#x27;</span>))    <br>time.sleep(<span class="hljs-number">1</span>)<br><br>输出：<br>cmd输出<br></code></pre></td></tr></table></figure><h4 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h4><p>比较不同排序方法的时间</p><p>进图条扩展</p><p>在任何运行时间需要较长的程序中增加进度条</p><p>在任何希望提高用户体验的应用中增加进度条</p><p>进度条是人机交互的纽带之一</p><h4 id="文本进度条的不同设计函数"><a href="#文本进度条的不同设计函数" class="headerlink" title="文本进度条的不同设计函数"></a>文本进度条的不同设计函数</h4><p><a href="https://imgchr.com/i/slD9at"><img src="https://s3.ax1x.com/2021/01/10/slD9at.png" alt="slD9at.png"></a></p><p>结论：开始慢，后来速度随着进度增加的函数更符合人的心理期望</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（二）Python基本语法</title>
    <link href="/2021/10/02/Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/10/02/Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="python基本语法"><a href="#python基本语法" class="headerlink" title="python基本语法"></a>python基本语法</h2><ul><li><p>实例1温度转换</p><ul><li><p>理解1  直接将温度值进行转换</p></li><li><p>理解2 将温度信息发布的声音或图像形式进行理解和转换</p></li><li><p>理解3 监控温度信息发布渠道，实时获取并转换温度值</p></li></ul></li><li><p>华氏摄氏温度定义，转换公式：</p><ul><li><p>摄氏度  以1标准大气压下睡的结冰点为0度，沸点为100度</p></li><li><p>华氏度 以1标准大气压下的水的结冰点为32度，沸点为212度，将温度进行等分刻画</p></li><li><p>C = （F - 32）/1.8</p></li><li><p>F = C*1.8 +32</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#TempConvert.py   </span><br>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)<br><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:   <br>    C = (<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) - <span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;：.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))<br><span class="hljs-keyword">elif</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:<br>    F = <span class="hljs-number">1.8</span> *<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) + <span class="hljs-number">32</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="hljs-built_in">format</span>(F))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入格式错误&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="实列：温度转换包含的语法："><a href="#实列：温度转换包含的语法：" class="headerlink" title="实列：温度转换包含的语法："></a>实列：温度转换包含的语法：</h3><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>缩进表达程序的格式框架</p><p>严格明确 ：缩进是语法的一部分，缩进不正确程序会运行错误</p><p>所属关系：  表达大门键保护和层次关系的唯一手段</p><p>长度一致 一般4个空格或一个TAB</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>不被程序执行的说明</p><p>单行注释 以#开头，其后为注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#TempConvert.py   单行注释</span><br></code></pre></td></tr></table></figure><pre><code>    多行注释 以‘“ 开头和结尾</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&quot; 这里是多行注释的第一行</span><br><span class="hljs-string">   这里是多行注释的第二行 &quot;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="变量命名与保留字"><a href="#变量命名与保留字" class="headerlink" title="变量命名与保留字"></a>变量命名与保留字</h3><p>TempStr 、C、F 为变量</p><p>命名规则：大小写字母、数字、下划线和汉字等字符及组合</p><p>注意事项：首字符不能是数字、不能与保留字相同</p><p>保留字（关键字）</p><p>被编程语言内部定义并保留使用的标识符</p><p><img src="https://s3.ax1x.com/2021/01/06/sVtm7t.png" alt="image-20210106181500451"></p><h3 id="数据的表现形式"><a href="#数据的表现形式" class="headerlink" title="数据的表现形式"></a>数据的表现形式</h3><p>供计算机理解数据的形式</p><ul><li><p>整数类型   10011101</p></li><li><p>字符串类型 “10,011,101”  单引号和双引号相同</p></li><li><p>列表类型  [10,011,101]   表达的是三个数字</p></li></ul><p> “请输入”的“请”是第0个字符</p><p><img src="https://s3.ax1x.com/2021/01/06/sVUaSU.png" alt="image-20210106182910519"></p><h3 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h3><p>使用[]获取字符串中的一个或多个字符</p><ul><li><p>索引：返回字符串中单个字符  &lt;字符串&gt;[M] </p><pre><code> “请输入带有符号的温度值：”[0] 或者 TemStr[-1]</code></pre></li><li><p>切片：返回字符串中一段字符子串  &lt;字符串&gt;[M:N]</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">TempStr = <span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span><br>TempStr[-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;：&#x27;</span><br><span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>[<span class="hljs-number">0</span>]<br><span class="hljs-string">&#x27;请&#x27;</span><br><span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]     <span class="hljs-comment">#不到第四个字符“ 0 1 2 3</span><br><span class="hljs-string">&#x27;请输入带&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>列表类型  [10,011,101]</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>整数、浮点数、列表类型</p><p>[‘F’,’f’]  表示两个元素’F‘和’f‘</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:    <span class="hljs-comment">#in 判断一个元素是否在列表中</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#TempConvert.py   </span><br>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)<br><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:   <br>    <br>分析：   <br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)<br>请输入带有符号的温度值：20F<br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr[-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;F&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr[-<span class="hljs-number">2</span>]<br><span class="hljs-string">&#x27;0&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr[-<span class="hljs-number">3</span>]<br><span class="hljs-string">&#x27;2&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="语句与函数"><a href="#语句与函数" class="headerlink" title="语句与函数"></a>语句与函数</h3><ul><li><p>赋值语句（右边的数据类型影响左边，相当于用数据来定义变量）</p></li><li><p>分支语句   如条件判断语句</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">语法结构：<br><br><span class="hljs-keyword">if</span> 条件判断内容 ：      <span class="hljs-comment">#如果条件为True则执行冒号后的语句</span><br>   执行语句            <span class="hljs-comment">#如果条件为false则跳过冒号后的语句</span><br>    <br>示例：<br><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:   <br>    C = (<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) - <span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;：.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))<br>  <br></code></pre></td></tr></table></figure><ul><li><p>冒号及后续缩进用来表示后续语句与条件的所属关系，千万不能少</p></li><li><p>函数 </p><p>python类似数学中的函数，y=f（x）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入格式错误&quot;</span>)  <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;输入格式错误&quot;</span><br></code></pre></td></tr></table></figure><pre><code>    函数采用  &lt;函数名&gt;(&lt;参数&gt;)  方式使用</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])  <span class="hljs-comment">#TempStr[0:-1]是参数</span><br></code></pre></td></tr></table></figure><p>回顾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#TempConvert.py   </span><br>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)<br><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:   <br>    C = (<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) - <span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;：.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))<br><span class="hljs-keyword">elif</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:<br>    F = <span class="hljs-number">1.8</span> *<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) + <span class="hljs-number">32</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="hljs-built_in">format</span>(F))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入格式错误&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><ul><li>input（）函数的使用格式：</li></ul><p>&lt;变量&gt; = input（&lt;提示信息字符串&gt;）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)   <br><span class="hljs-comment">#TempStr保存用户输入的信息，以 字符串 的形式保存到变量中</span><br></code></pre></td></tr></table></figure><ul><li>print函数的格式化使用方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;：.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))  <span class="hljs-comment">#暂且记忆</span><br><br>&#123;&#125; 表示槽，后续遍历填充到槽中<br>&#123;:<span class="hljs-number">.2</span>f&#125;表示将变量C填充到这个位置时取小数点后<span class="hljs-number">2</span>位<br></code></pre></td></tr></table></figure><ul><li>eval()  去掉参数最外侧引号并执行余下语句的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;1 + 2&quot;</span>)  <span class="hljs-comment">#去掉双引号，变成python了可理解的语句，固结果为3</span><br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;&quot;1 + 2&quot;&#x27;</span>)  <span class="hljs-comment">#去掉双引号，输出一个单引号的字符串</span><br><span class="hljs-string">&#x27;1 + 2&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;print(&quot;Hello&quot;)&#x27;</span>)<br>Hello<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)<br>请输入带有符号的温度值：<span class="hljs-number">200</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><span class="hljs-number">200</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(TempStr[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><span class="hljs-number">200</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;12.3&quot;</span>)<br><span class="hljs-number">12.3</span><br></code></pre></td></tr></table></figure><h3 id="温度转换代码分析"><a href="#温度转换代码分析" class="headerlink" title="温度转换代码分析"></a>温度转换代码分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#TempConvert.py                         #注释，此行不运行</span><br>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>) <span class="hljs-comment">#用户输入的字符串将保存在TempStr中，input内为提示信息</span><br><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:            <span class="hljs-comment">#判断TempStr的最后一个字符是否为列表类型F和f中的一个，为true则执行4、5行语句</span><br>    C = (<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) - <span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span>        <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;：.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))<br><span class="hljs-keyword">elif</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:          <span class="hljs-comment">#判断TempStr的最后以一个字符是否为C和c中的一个，为true则执行7、8行语句</span><br>    F = <span class="hljs-number">1.8</span> *<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) + <span class="hljs-number">32</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="hljs-built_in">format</span>(F))<br><span class="hljs-keyword">else</span>:                                   <span class="hljs-comment">#默认执行：后的语句</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入格式错误&quot;</span>)<br><br>===============================================================================    <br>    <br><span class="hljs-comment">#如果输入82F，则为什么eval(TempStr[0:-1])的结果是不包含F，为82？</span><br><br>   因为TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]表示从<span class="hljs-number">0</span>号元素开始，且不到-<span class="hljs-number">1</span>号元素的字符串，这里-<span class="hljs-number">1</span>号元素就是F<br>    <br>=================================================================================  <br><br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;300&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])<br><span class="hljs-number">300</span><br><br><br>template = <span class="hljs-string">&quot;零一二三四五六七八九&quot;</span><br><br>s = <span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span>(template[<span class="hljs-built_in">eval</span>(c)], end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#获得用户输入的一个正整数输入，输出该数字对应的中文字符表示。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬</span><br><br><span class="hljs-comment">#0到9对应的中文字符分别是：零一二三四五六七八九‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬</span><br><br>输入示例<span class="hljs-number">1</span>‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬<br><br><span class="hljs-number">123</span><br><br>输出示例<span class="hljs-number">1</span>‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬<br><br>一二三<br>输入示例<span class="hljs-number">2</span>‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬<br><br><span class="hljs-number">9876543210</span><br><br>输出示例<span class="hljs-number">2</span>‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬<br><br>九八七六五四三二一零<br><br><span class="hljs-comment">#代码：</span><br>template = <span class="hljs-string">&quot;零一二三四五六七八九&quot;</span><br><br>s = <span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span>(template[<span class="hljs-built_in">eval</span>(c)], end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（一）Python简单介绍与安装</title>
    <link href="/2021/10/02/Python%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85(%E4%B8%80)/"/>
    <url>/2021/10/02/Python%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h2 id="Python语言程序设计"><a href="#Python语言程序设计" class="headerlink" title="Python语言程序设计"></a>Python语言程序设计</h2><ul><li>源代码人类可理解</li><li>目标代码 计算机直接执行</li></ul><h2 id="1-编译与解释"><a href="#1-编译与解释" class="headerlink" title="1.编译与解释"></a>1.编译与解释</h2><p>编译  将源代码在转换为目标代码，转换完知乎不需要源代码参与</p><p>解释 每次都需要源代码参与</p><h2 id="2-编程语言分类"><a href="#2-编程语言分类" class="headerlink" title="2.编程语言分类"></a>2.编程语言分类</h2><ul><li><p>根据执行方式不同，编程语言分为两类</p><p>静态语言  使用编译执行的语言 如C、java</p><p>脚本语言  使用解释执行的编程语言 如python、JavaScript、php</p></li><li><p>优势</p><p>静态语言   编译器一次性生成慕白哦迪阿敏，优化更充分  程序运行速度更快</p><p>脚本语言   执行程序时需要源代码，维护更灵活，易跨多个操作系统平台</p></li></ul><h2 id="3-python语言简介"><a href="#3-python语言简介" class="headerlink" title="3.python语言简介"></a>3.python语言简介</h2><ul><li><p>input  process  output</p><p>输入是程序的开始</p></li><li><p>python  蟒蛇  PSF拥有 非盈利组织  保护python开放、开源和发展</p><p>创始人 guido van rossum </p></li></ul><h2 id="4-下载配置python"><a href="#4-下载配置python" class="headerlink" title="4. 下载配置python"></a>4. 下载配置python</h2><p>​    下载配置python  <a href="https://www.python.org/">https://www.python.org/</a></p><p>​    pycharm环境：<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p><p>​    pycharm配置使用：<a href="https://blog.csdn.net/ling_mochen/article/details/79314118">https://blog.csdn.net/ling_mochen/article/details/79314118</a></p><h2 id="5-编程两种方式"><a href="#5-编程两种方式" class="headerlink" title="5.编程两种方式"></a>5.编程两种方式</h2><ul><li>交互式  对每个输入语句即时运行结果 ，适合语法练习</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#示例一：计算圆面积</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>r = <span class="hljs-number">25</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>area = <span class="hljs-number">3.1415</span> * r * r<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(area)<br><span class="hljs-number">1963.4375000000002</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(area))<br><span class="hljs-number">1963.44</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#示例二：画同心圆</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> turtle<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.pensize(<span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.circle(<span class="hljs-number">10</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.circle(<span class="hljs-number">40</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.circle(<span class="hljs-number">80</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.circle(<span class="hljs-number">160</span>)<br></code></pre></td></tr></table></figure><ul><li>文件式 批量执行一组语句并运行结果，编程的主要方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#示例一：计算圆面积</span><br>r = <span class="hljs-number">25</span><br>area = <span class="hljs-number">3.1415</span> * r * r<br><span class="hljs-built_in">print</span>(area)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(area))<br><br>==输出===<br><span class="hljs-number">1963.4375000000002</span><br><span class="hljs-number">1963.44</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#示例二：画同心圆</span><br><span class="hljs-keyword">import</span> turtle<br>turtle.pensize(<span class="hljs-number">2</span>)<br>turtle.circle(<span class="hljs-number">10</span>)<br>turtle.circle(<span class="hljs-number">40</span>)<br>turtle.circle(<span class="hljs-number">80</span>)<br>turtle.circle(<span class="hljs-number">160</span>)<br>===输出===<br>同心圆<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROS入门笔记</title>
    <link href="/2021/10/02/ROS%E5%85%A5%E9%97%A8/"/>
    <url>/2021/10/02/ROS%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="linux系统介绍"><a href="#linux系统介绍" class="headerlink" title="linux系统介绍"></a>linux系统介绍</h2><ul><li>操作系统</li></ul><p><img src="https://i.loli.net/2021/07/11/7rXxuJZb5asqogL.png" alt="image-20210711142432785"></p><ul><li><p>linux发行版和内核的区别</p></li><li><p>ros ubuntu最适配</p></li><li><p>ubuntu下载地址：<a href="https://ubuntu.com/download/destop#download">https://ubuntu.com/download/destop#download</a></p></li><li><p>下载：vmware</p></li></ul><h2 id="Linux系统基础操作"><a href="#Linux系统基础操作" class="headerlink" title="Linux系统基础操作"></a>Linux系统基础操作</h2><ul><li><p>软件中心、安装</p></li><li><p>终端打开</p></li><li><p>命令行 linux命令行shell脚本编程大全</p></li><li><p>按Tab键会自动补全</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs linux">sudo 提升当前权限<br>pwd   查看当前路径<br>cd + 路径   <br>cd  .. 跳至上级目录<br>mkdir test_folder  新建文件夹<br>ls  查看当前文件夹的目录<br>touch test_file 创建一个文本文件<br>mv test_file /home/qxd  剪切文件至路径<br>cp test_file test_folder/test_file2  复制当前文件夹下的文件至某路径并重命名<br>rm test_file  删除当前目录的某文件<br>rm -r test_folder/  迭代删除当前路径<br>rm --help 帮助指令<br>命令 + --help 显示帮助指令<br>vm 文件名  修改文件<br>su root  切换到超级权限<br></code></pre></td></tr></table></figure></li><li><p>关于文件的相关操作命令  <a href="https://blog.csdn.net/guoqingshuang/article/details/81137587">https://blog.csdn.net/guoqingshuang/article/details/81137587</a></p></li><li><p>vim  编辑器命令  <a href="https://blog.csdn.net/wangguchao/article/details/81780567">https://blog.csdn.net/wangguchao/article/details/81780567</a></p></li><li><p>打开和修改文件时用sudo打开</p></li><li><p>解压缩相关命令<a href="https://www.cnblogs.com/eoiioe/archive/2008/09/20/1294681.html">https://www.cnblogs.com/eoiioe/archive/2008/09/20/1294681.html</a></p></li></ul><h2 id="c-python极简基础"><a href="#c-python极简基础" class="headerlink" title="c++/python极简基础"></a>c++/python极简基础</h2><ul><li><p>对比</p><ul><li>c++框架硬件 </li><li>python 开发效率高</li></ul></li><li><p>linux的安装</p><p><img src="https://i.loli.net/2021/07/11/3xAv4OsyubMBn79.png" alt="image-20210711160346578"></p></li><li><p>编译</p><p><img src="https://i.loli.net/2021/07/11/hYviT3lKuWGt95s.png" alt="image-20210711163235151"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs linux">//c++<br>qxd@qxd-vpc:~/linux$ g++ c++_for.cpp -o c++_for  编译代码输出为某文件到当前目录<br>qxd@qxd-vpc:~/linux$ ./c++_for  ./表示运行当前文件夹下的某文件<br><br>//python<br>如上图<br></code></pre></td></tr></table></figure><h2 id="安装ros系统"><a href="#安装ros系统" class="headerlink" title="安装ros系统"></a>安装ros系统</h2><ul><li><p>版本选择</p><p><img src="https://i.loli.net/2021/07/11/PLcdO7D8eF1ahqB.png" alt="image-20210711164413190"></p></li><li><p>安装步骤</p></li><li><p><a href="https://blog.csdn.net/weixin_43771001/article/details/107538437">https://blog.csdn.net/weixin_43771001/article/details/107538437</a></p></li><li><p><a href="https://blog.csdn.net/qq_44339029/article/details/108919545">https://blog.csdn.net/qq_44339029/article/details/108919545</a></p></li><li><p>看ros官方的wiki<a href="http://wiki.ros.org/melodic/Installation/Ubuntu">http://wiki.ros.org/melodic/Installation/Ubuntu</a></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs linux">$ sudo sh -c &#x27;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;<br>$ sudo apt install curl # if you haven&#x27;t already installed curl<br>curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -<br>$ sudo apt update<br>$ sudo apt install ros-melodic-desktop-full<br>$ sudo apt install python-rosdep2<br>$ sudo rosdep init <br>$ rosdep update<br>这里普遍存在网络连接的问题<br></code></pre></td></tr></table></figure><p>==换软件源很重要，清华软件源==</p><p>==密钥到网上找==</p><p><img src="https://i.loli.net/2021/10/02/MaqepVUtvngrJ6c.png" alt="image-20210916163649615"></p><p><img src="https://i.loli.net/2021/10/02/75AZfE3k1nX9zWN.png" alt="image-20210916164711127"></p><h2 id="什么是ROS"><a href="#什么是ROS" class="headerlink" title="什么是ROS"></a>什么是ROS</h2><p><img src="https://i.loli.net/2021/09/18/r56lnwOci37gsoS.png" alt="image-20210918135153772"></p><p><img src="https://i.loli.net/2021/09/18/3XRr2NW16DC5QpL.png" alt="image-20210918140903142"></p><p><img src="https://i.loli.net/2021/09/18/fYSw3j9rLilqWQ1.png" alt="image-20210918141002256"></p><h3 id="通讯机制"><a href="#通讯机制" class="headerlink" title="通讯机制"></a>通讯机制</h3><p><img src="https://i.loli.net/2021/09/18/a8oYWFH9hTQ7PbV.png" alt="image-20210918141159926"></p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p><img src="https://i.loli.net/2021/09/18/bcDy1C4XzwEJfsI.png" alt="image-20210918141326285"></p><h3 id="应用功能"><a href="#应用功能" class="headerlink" title="应用功能"></a>应用功能</h3><p><img src="https://i.loli.net/2021/09/18/NV9eXtkCBlIo4Qj.png" alt="image-20210918141442924"></p><h3 id="生态系统"><a href="#生态系统" class="headerlink" title="生态系统"></a>生态系统</h3><p><img src="https://i.loli.net/2021/09/18/ynoIjgl9LBvAXcs.png" alt="image-20210918141634803"></p><p><img src="https://i.loli.net/2021/09/18/TM7UAHvX4xGsQ8a.png" alt="image-20210918141918906"></p><h2 id="ROS的核心概念"><a href="#ROS的核心概念" class="headerlink" title="ROS的核心概念"></a>ROS的核心概念</h2><h3 id="通讯机制-1"><a href="#通讯机制-1" class="headerlink" title="通讯机制"></a>通讯机制</h3><p><img src="https://i.loli.net/2021/09/18/zP5FVjGUHXJnCpi.png" alt="image-20210918142253035"></p><p><img src="https://i.loli.net/2021/09/18/VH2r4LcYgIuG5fm.png" alt="image-20210918143205824"></p><p><img src="https://i.loli.net/2021/09/18/LocBiRF7Q6E9XaV.png" alt="image-20210918143330650"></p><p><img src="E:/markdown_picture/image-20210918143945508.png" alt="image-20210918143945508"></p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p><img src="https://i.loli.net/2021/10/02/DnPvqW52x6EpRjF.png" alt="image-20210918144206010"></p><h2 id="ROS命令行工具的使用"><a href="#ROS命令行工具的使用" class="headerlink" title="ROS命令行工具的使用"></a>ROS命令行工具的使用</h2><p><img src="https://i.loli.net/2021/10/02/oUVw5rZSF94jLJT.png" alt="image-20210918144410313"></p><p><img src="https://i.loli.net/2021/10/02/bDlonBvJQKMyLVF.png" alt="image-20210918153754296"></p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ROS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记(从基础到高级)</title>
    <link href="/2021/10/02/linux%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/10/02/linux%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>基于CentOS 7 ，<a href="https://wiki.centos.org/FrontPage">CentOS官方</a></p><h2 id="linux使用的范围"><a href="#linux使用的范围" class="headerlink" title="linux使用的范围"></a>linux使用的范围</h2><ul><li>linux运维工程师  规划 优化 监控 故障处理</li><li>linux嵌入式工程师  嵌入式的应用开发</li></ul><h2 id="Linux的应用领域"><a href="#Linux的应用领域" class="headerlink" title="Linux的应用领域"></a>Linux的应用领域</h2><ul><li>桌面开发</li><li>服务器领域  linux免费稳定高效</li><li>嵌入式领域  低成本 对软件进行裁剪  智能家居  物联网</li></ul><h2 id="Linux入门"><a href="#Linux入门" class="headerlink" title="Linux入门"></a>Linux入门</h2><ul><li><p>常见的操作系统很多</p></li><li><p>作者</p><p><img src="https://i.loli.net/2021/07/12/7jgW3HzdMLqEBCS.png" alt="image-20210712093931438"></p></li><li><p>linux的发行版本</p><p><img src="https://i.loli.net/2021/07/12/Y3QhUl8Xvt57TZ9.png" alt="image-20210712094742884"></p><p><img src="https://i.loli.net/2021/08/04/6zwS2GtoHpkdOJI.png" alt="image-20210712094938821"></p></li></ul><h3 id="Linux和Unix的关系"><a href="#Linux和Unix的关系" class="headerlink" title="Linux和Unix的关系"></a>Linux和Unix的关系</h3><ul><li>unix是怎么来的<ul><li>贝尔实验室</li><li>多用户分时操作系统multics，b语言到c语言</li></ul></li><li><img src="https://i.loli.net/2021/07/12/5FDACoegU6lHrjB.png" alt="image-20210712100301087"></li></ul><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><ul><li>VM和Linux的关系</li><li><img src="https://i.loli.net/2021/07/12/ryq9hufvaM5Sgt1.png" alt="image-20210712101235420"></li><li>centos安装<ul><li>Linux分区设置<ul><li>boot分区  1g</li><li>交换分区swap  分配的内存大小 2g<ul><li>零时充当内存，速度较慢</li></ul></li><li>根分区  17g</li></ul></li></ul></li></ul><h3 id="虚拟机网络连接模式"><a href="#虚拟机网络连接模式" class="headerlink" title="虚拟机网络连接模式"></a>虚拟机网络连接模式</h3><ul><li>同一个网段可以相互通讯</li><li>桥接模式    虚拟系统可以和外部系统相互通讯，容易造成ip冲突</li><li>NAT模式   相当于在一个有虚拟机的系统中有两个网段，虚拟机有一个专属的和系统通讯的网段，系统有一个和外界通讯的网段，外界网络不能直接与系统内部的虚拟机通讯，需要通过系统和虚拟机的网络实现通讯。</li><li>仅主机模式</li></ul><h3 id="虚拟机的克隆"><a href="#虚拟机的克隆" class="headerlink" title="虚拟机的克隆"></a>虚拟机的克隆</h3><ul><li>用已有的安装的linux系统，将虚拟机文件拷贝到另外一个文件夹，再通过vm软件打开</li><li>vm克隆操作，先关闭在运行的操作系统，在虚拟机打开处右键，一般使用创建完整克隆，会出现新的虚拟机，和被克隆的虚拟机系统在同一个文件夹下</li></ul><h3 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h3><ul><li>避免系统奔溃，返回正常状态</li><li>虚拟机开启处，右键快照管理</li></ul><h3 id="虚拟机迁移和删除"><a href="#虚拟机迁移和删除" class="headerlink" title="虚拟机迁移和删除"></a>虚拟机迁移和删除</h3><ul><li>剪贴虚拟机文件夹</li><li>删除虚拟机文件夹</li><li>vm移除，文件并没有删除，而是移除了指向</li></ul><h3 id="安装vmtools"><a href="#安装vmtools" class="headerlink" title="安装vmtools"></a>安装vmtools</h3><ul><li>安装vmtools，可以让我们在windows下更好的管理vm虚拟机</li><li>可以设置windows和centos的共享文件夹</li><li><img src="https://i.loli.net/2021/08/04/wBjdnOPTSurFfpU.png" alt="image-20210722091359440"></li></ul><h3 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h3><p><img src="https://i.loli.net/2021/08/04/qhiLFHfJtr1mlgD.png" alt="image-20210722093404096"></p><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>记住Linux的树状目录</li><li>linux中一切皆文件，硬件也映射为文件</li></ul><h3 id="具体目录结构"><a href="#具体目录结构" class="headerlink" title="具体目录结构"></a>具体目录结构</h3><ul><li><p><img src="https://i.loli.net/2021/08/04/R5VvaAPHYwGjLkp.png" alt="image-20210722094415383"></p></li><li><p><img src="https://i.loli.net/2021/07/22/wVjcrRx1auNEKYZ.png" alt="image-20210722094841172"></p></li><li><p><img src="https://i.loli.net/2021/07/22/K7IkvTVEyH5aYNx.png" alt="image-20210722094858885"></p></li><li><p><img src="https://i.loli.net/2021/07/22/g5LRDFU6p1qHeAO.png" alt="image-20210722095627180"></p></li><li><p><img src="https://i.loli.net/2021/08/04/4UKXZsPfvcRBiGT.png" alt="image-20210722095823294"></p></li></ul><h2 id="远程登陆Linux服务器"><a href="#远程登陆Linux服务器" class="headerlink" title="远程登陆Linux服务器"></a>远程登陆Linux服务器</h2><h3 id="为什么要远程登录"><a href="#为什么要远程登录" class="headerlink" title="为什么要远程登录"></a>为什么要远程登录</h3><p><img src="https://i.loli.net/2021/10/02/if9HBXjcxO5VwRt.png" alt="image-20210804145351793"></p><ul><li>正式上线的项目是运行在公网的</li><li>开发小组共享</li><li>公网，有ip可公共访问的网络</li><li>远程登陆工具 xshell</li><li>文件上传下载 xftp</li></ul><h3 id="远程登陆-Xshell6"><a href="#远程登陆-Xshell6" class="headerlink" title="远程登陆 Xshell6"></a>远程登陆 Xshell6</h3><ul><li><p><img src="https://i.loli.net/2021/08/04/AFRGqj9B4rNmwPW.png" alt="image-20210804145412194"></p></li><li><p>下载网址  <a href="https://www.netsarang.com/en/">https://www.netsarang.com/en/</a></p></li><li><p>需要知道Linux公网的IP地址</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">ifconfig   <span class="hljs-comment">//获取Linux的IP地址的指令</span><br><br><span class="hljs-comment">//如下</span><br>[qxd@qxdEdu01 ~]$ ifconfig<br>ens33: flags=<span class="hljs-number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="hljs-number">1500</span><br>        inet <span class="hljs-number">192.168</span><span class="hljs-number">.182</span><span class="hljs-number">.134</span>  netmask <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span>  broadcast <span class="hljs-number">192.168</span><span class="hljs-number">.182</span><span class="hljs-number">.255</span><br>        inet6 fe80::febe:a278:c225:edcf  prefixlen <span class="hljs-number">64</span>  scopeid <span class="hljs-number">0x20</span>&lt;link&gt;<br>        ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">80</span>:b3:b1  txqueuelen <span class="hljs-number">1000</span>  (Ethernet)<br>        RX packets <span class="hljs-number">352</span>  bytes <span class="hljs-number">235641</span> (<span class="hljs-number">230.1</span> KiB)<br>        RX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        TX packets <span class="hljs-number">252</span>  bytes <span class="hljs-number">21589</span> (<span class="hljs-number">21.0</span> KiB)<br>        TX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br><br>lo: flags=<span class="hljs-number">73</span>&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="hljs-number">65536</span><br>        inet <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>  netmask <span class="hljs-number">255.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>        inet6 ::<span class="hljs-number">1</span>  prefixlen <span class="hljs-number">128</span>  scopeid <span class="hljs-number">0x10</span>&lt;host&gt;<br>        loop  txqueuelen <span class="hljs-number">1000</span>  (Local Loopback)<br>        RX packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0.0</span> B)<br>        RX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        TX packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0.0</span> B)<br>        TX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br><br>virbr0: flags=<span class="hljs-number">4099</span>&lt;UP,BROADCAST,MULTICAST&gt;  mtu <span class="hljs-number">1500</span><br>        inet <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.1</span>  netmask <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span>  broadcast <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.255</span><br>        ether <span class="hljs-number">52</span>:<span class="hljs-number">54</span>:<span class="hljs-number">00</span>:ed:b2:<span class="hljs-number">08</span>  txqueuelen <span class="hljs-number">1000</span>  (Ethernet)<br>        RX packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0.0</span> B)<br>        RX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        TX packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0.0</span> B)<br>        TX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li><p>xshell设置</p></li><li><p>文件 -&gt; 新建 </p></li><li><p>名称随意，主机地址写为Linux公网的IP地址，协议为ssh</p></li><li><p><img src="https://i.loli.net/2021/08/04/mB9vX8uGbxicTAR.png" alt="image-20210804150908809"></p></li><li><p><img src="https://i.loli.net/2021/08/04/7BtCZm31OJcbHIa.png" alt="image-20210804151139038"></p></li><li><p>已经可以远程登陆Linux系统</p></li></ul><h3 id="安装xftp7"><a href="#安装xftp7" class="headerlink" title="安装xftp7"></a>安装xftp7</h3><ul><li><p><img src="https://i.loli.net/2021/08/04/PXZjDJdtWNlmywn.png" alt="image-20210804151349826"></p></li><li><p>新建 协议 SFTP</p><p><img src="https://i.loli.net/2021/08/04/vdqJhyMIz6jSXWL.png" alt="image-20210804151631068"></p></li><li><p><img src="https://i.loli.net/2021/08/04/CHYlPj7SFmonhXE.png" alt="image-20210804151809233"></p></li><li><p>可以实现远程的文件传输</p></li></ul><h2 id="vi和vim的基本介绍"><a href="#vi和vim的基本介绍" class="headerlink" title="vi和vim的基本介绍"></a>vi和vim的基本介绍</h2><ul><li><p>vi 文本编辑器  类似于Windows记事本</p></li><li><p>vim 是vi 的增强版</p></li><li><p>常用三种模式 </p><ul><li>正常模式</li><li>插入模式</li><li>命令行模式</li></ul></li><li><p>实际工作中 一般用xshell</p></li><li><p>vim和vi的各个模式的切换图</p></li><li><p><img src="https://i.loli.net/2021/08/04/nUarF6e3oXCLQTK.png" alt="image-20210804152853605"></p></li><li><p><img src="https://i.loli.net/2021/10/02/dV7qt3AW8Ue5cxH.png" alt="image-20210804160623597"></p></li><li><p>vim 键位图  <a href="https://blog.csdn.net/www_helloworld_com/article/details/103610639">https://blog.csdn.net/www_helloworld_com/article/details/103610639</a></p></li><li><p>不需要花太多精力</p></li><li><p><img src="https://i.loli.net/2021/10/02/GSNnceFDdopkujs.png" alt="image-20210804160802649"></p></li></ul><h2 id="开机、重启和用户登陆注销"><a href="#开机、重启和用户登陆注销" class="headerlink" title="开机、重启和用户登陆注销"></a>开机、重启和用户登陆注销</h2><h3 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h3><ul><li><p><img src="https://i.loli.net/2021/08/05/QzEtMLJDhPwq64H.png" alt="image-20210805173715212"></p></li><li><p><img src="https://i.loli.net/2021/10/02/EDJbvi1ASOrNnad.png" alt="image-20210805215530935"></p></li><li><p>==一般不用root登入==</p></li><li><p>在多用户级别下才能用logout</p></li><li><p><img src="https://i.loli.net/2021/08/05/TM9PnHzVUN1pGYD.png" alt="image-20210805220000625"></p></li><li><p>再次logout则退出系统</p></li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul><li><p>基本介绍</p><p><img src="https://i.loli.net/2021/08/05/zIRg4B7bYva1QEV.png" alt="image-20210805220138976"></p><p>一般都是在root权限下</p></li></ul><h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">useradd 用户名  <span class="hljs-comment">//默认在home目录下创建一个新的用户</span><br>useradd -d /home/test king <span class="hljs-comment">//在指定目录下创建一个新用户</span><br></code></pre></td></tr></table></figure><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">passwd <span class="hljs-comment">//为当前用户设置密码</span><br>passwd 用户名 <span class="hljs-comment">//为指定用户设置新密码 </span><br>pwd  <span class="hljs-comment">//显示当前目录</span><br></code></pre></td></tr></table></figure><p>  <img src="https://i.loli.net/2021/08/05/5FhJvITfAYyDCdZ.png" alt="image-20210805221920211"></p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">userdel 用户名 <span class="hljs-comment">//删除用户，但是保留用户的主目录</span><br>userdel -r 用户名 <span class="hljs-comment">//删除用户及用户的主目录  慎重！</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://i.loli.net/2021/08/05/mjfO8eh5Fys2bLM.png" alt="image-20210805223004835"></li></ul><h3 id="查询用户信息指令"><a href="#查询用户信息指令" class="headerlink" title="查询用户信息指令"></a>查询用户信息指令</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">id 用户名 <span class="hljs-comment">//查看用户的相关信息</span><br></code></pre></td></tr></table></figure><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">su - 用户名  <span class="hljs-comment">//切换用户，也可切换到root，由权限高到低不需要输密码，相反需要</span><br></code></pre></td></tr></table></figure><p>  <img src="https://i.loli.net/2021/08/05/gCQFOoc7Xrn9qie.png" alt="image-20210805223526404"></p><h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">who am i <span class="hljs-comment">//查看当前登陆的用户</span><br></code></pre></td></tr></table></figure><p>  <img src="https://i.loli.net/2021/08/05/1XsloE4BjKILa3f.png" alt="image-20210805223645467"></p><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><ul><li>类似于角色，系统可以对多个用户进行统一管理</li><li><img src="https://i.loli.net/2021/08/06/8bCHd9ZtW7skpye.png" alt="image-20210806094442600"></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">groupadd 组名  <span class="hljs-comment">//添加组</span><br>groupdel 组名  <span class="hljs-comment">//删除组</span><br>useradd -g 用户组 用户名 <span class="hljs-comment">//增加用户时直接加上组</span><br>usermod -g 用户组 用户名  <span class="hljs-comment">//移动用户到另外一个组</span><br></code></pre></td></tr></table></figure><ul><li>在没有指定组时，用户默认在自己用户名的组</li></ul><h3 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h3><ul><li><p><img src="https://i.loli.net/2021/08/06/IeA1Tn9YLQWl4hX.png" alt="image-20210806103940877"></p></li><li><p><img src="https://i.loli.net/2021/08/06/MRW8yDOda5oEXIL.png" alt="image-20210806104434594"></p></li></ul><h2 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h2><h3 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h3><ul><li><img src="https://i.loli.net/2021/08/06/myTDPt4Zd5w6VMW.png" alt="image-20210806105140988"></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">init [<span class="hljs-number">0</span>、<span class="hljs-number">1</span>、<span class="hljs-number">2</span>、<span class="hljs-number">3</span>、<span class="hljs-number">4</span>、<span class="hljs-number">5</span>、<span class="hljs-number">6</span>]  <span class="hljs-comment">//切换运行级别</span><br></code></pre></td></tr></table></figure><ul><li>指定默认的运行级别</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">systemctl get-<span class="hljs-keyword">default</span>  <span class="hljs-comment">//获取当前运行级别</span><br>reboot <span class="hljs-comment">//重启</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://i.loli.net/2021/08/06/I6KQtCTekjWuZql.png" alt="image-20210806110635370"></li></ul><h3 id="找回root密码"><a href="#找回root密码" class="headerlink" title="找回root密码"></a>找回root密码</h3><p>适用于CentOS 7.6</p><ul><li><p>开机按e进入编辑模式</p></li><li><p>找到linux16那一行，光标移动到最后</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">init=/bin/sh<br></code></pre></td></tr></table></figure><ul><li>输入完，按快捷键Ctrl + x 进入单用户模式</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mount -o remount,rw /  <span class="hljs-comment">//按回车</span><br></code></pre></td></tr></table></figure><ul><li><p>接着输入passwd  回车</p></li><li><p>输入密码</p></li><li><p>再次输入密码</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">touch /.autorelabel<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">exec /sbin/init  <span class="hljs-comment">//时间长需等待</span><br></code></pre></td></tr></table></figure><ul><li>登陆即可</li></ul><h3 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h3><p><img src="https://i.loli.net/2021/08/06/MAeu6ZJgXRfsqpy.png" alt="image-20210806121834980"></p><ul><li>```c<br>man ls //查看ls 的命令的详细说明<br>ls -a //显示目录中的所以文件，包括以.开头的文件<br>ls -l //目录列输出<br>ls -al //可以组合使用<br>ls -al /home //例如<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><br><span class="hljs-comment">### 文件目录类</span><br><br>```json<br><span class="hljs-keyword">pwd</span>  <span class="hljs-string">//</span>显示当前绝对路径<br><span class="hljs-keyword">ls</span>   <span class="hljs-string">//</span>显示目录<br><span class="hljs-keyword">ls</span> -l<br>ll<br><span class="hljs-keyword">ls</span> -lh <span class="hljs-string">//</span>详细显示，内存<br></code></pre></td></tr></table></figure></li></ul><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">cd ~  <span class="hljs-comment">//回到家目录，自己用户的目录</span><br>cd .. <span class="hljs-comment">//回到上一级</span><br>cd ../../root <span class="hljs-comment">//使用相对路径到root目录</span><br></code></pre></td></tr></table></figure><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">mkdir <span class="hljs-comment">//创建目录</span><br>mkdir -p /home/dog/tiger <span class="hljs-comment">//创建多级目录</span><br></code></pre></td></tr></table></figure><h4 id="remdir"><a href="#remdir" class="headerlink" title="remdir"></a>remdir</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json\">rmdir //删除目录,只能删除空目录<br>redir -rf /home/dog/tiger  //强制删除<br></code></pre></td></tr></table></figure><h4 id="tonch"><a href="#tonch" class="headerlink" title="tonch"></a>tonch</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">touch <span class="hljs-comment">//创建空文件</span><br>touch hello.txt <br></code></pre></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">cp 文件 位置<span class="hljs-comment">//将文件拷贝到位置</span><br>cp -r 位置/目录名 位置 <span class="hljs-comment">//拷贝整个目录到位置</span><br>\cp -r 位置/目录名 位置  <span class="hljs-comment">//强制覆盖</span><br></code></pre></td></tr></table></figure><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">rm -r <span class="hljs-comment">//删除整个文件夹的文件</span><br>rm /home/hello.txt  <br>rm -rf /home/bbb  <span class="hljs-comment">//强制全部删除，不提示  ！！！注意！</span><br></code></pre></td></tr></table></figure><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">mv 文件 位置 <span class="hljs-comment">//将文件移动到某位置</span><br>mv 已存在文件 不存在文件 <span class="hljs-comment">//相当于将文件名重命名</span><br>mv 位置/文件夹名 位置  <span class="hljs-comment">//移动文件夹</span><br></code></pre></td></tr></table></figure><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">cat <span class="hljs-comment">//查看文件内容</span><br>cat -n <span class="hljs-comment">//显示行号</span><br><span class="hljs-comment">//管道命令 ： 将前面的结果交给下一个处理</span><br>cat -n /etc/progile | more  <span class="hljs-comment">//enter下一行 空格下一页</span><br></code></pre></td></tr></table></figure><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">more 要查看文件<span class="hljs-comment">//基于vi编辑器的文本过滤器，以全屏幕的方式按页显示文本文件的内容</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/38WEOK1mB5Qfnu2.png" alt="image-20210806160125112"></p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">less 文件 <span class="hljs-comment">//采用分屏查看文件内容，与more类似</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/p3am75CDNiwEPbu.png" alt="image-20210806161442242"></p><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">echo <span class="hljs-comment">//输出内容到控制台</span><br>echo $HOSTNAME <span class="hljs-comment">//输出主机名</span><br>echo <span class="hljs-string">&quot;hello,world&quot;</span> <span class="hljs-comment">//输出文字</span><br>echo <span class="hljs-string">&quot;hello&quot;</span> &gt; /home/mydate.txt <span class="hljs-comment">//将文字输出到文件</span><br>&gt;   <span class="hljs-comment">//重定向输出到，并覆盖文件</span><br>&gt;&gt;  <span class="hljs-comment">//重定向输出，对文件追加</span><br></code></pre></td></tr></table></figure><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">head 文件名 <span class="hljs-comment">//显示文件的前10行的代码</span><br>head -n <span class="hljs-number">5</span> 文件 <span class="hljs-comment">//显示文件前5行的代码</span><br></code></pre></td></tr></table></figure><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">tail 文件 <span class="hljs-comment">//查看文件尾10行内容</span><br>tail -n <span class="hljs-number">5</span> 文件 <span class="hljs-comment">//查看文件尾10行内容</span><br>tail -f 文件 <span class="hljs-comment">//事实追踪文档的更新</span><br></code></pre></td></tr></table></figure><h4 id="gt"><a href="#gt" class="headerlink" title="&gt;"></a>&gt;</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">ls -l &gt; 文件 <span class="hljs-comment">//将列被的内容写入文件a.txt中，覆盖写</span><br>ls -al &gt;&gt; 文件 <span class="hljs-comment">//列表的内容追加到文件aa.txtd末尾</span><br>cat 文件<span class="hljs-number">1</span> &gt; 文件<span class="hljs-number">2</span> <span class="hljs-comment">//将文件1的内容覆盖到文件2</span><br>echo <span class="hljs-string">&quot;内容&quot;</span>  &gt;&gt; 文件 <br></code></pre></td></tr></table></figure><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><p>软联接也称为符号链接，类似与windows里的快捷方式，主要存放了链接其他文件的路径</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">ln -s 原文件 软链接名  <span class="hljs-comment">//给原文件创建一个软链接</span><br>ln -s /root /home/myroot <br>rm /home/myroot  <span class="hljs-comment">// 删除软链接</span><br></code></pre></td></tr></table></figure><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">history <span class="hljs-comment">//显示历史操作</span><br>history <span class="hljs-number">5</span> <span class="hljs-comment">//显示5条指令</span><br>!历史行数 <span class="hljs-comment">//执行历史指令</span><br></code></pre></td></tr></table></figure><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">date <span class="hljs-comment">//显示当前时间</span><br>date +%Y <span class="hljs-comment">//显示年</span><br>date +%m <span class="hljs-comment">//显示月</span><br>date +%d <span class="hljs-comment">//显示天</span><br>date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span> <span class="hljs-comment">//显示年月日时分秒</span><br>date -s <span class="hljs-string">&quot;2020-11-03 20:02:10&quot;</span>  <span class="hljs-comment">//设置当前系统时间</span><br></code></pre></td></tr></table></figure><h4 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">cal <span class="hljs-comment">//显示日历</span><br>cal <span class="hljs-number">2021</span> <span class="hljs-comment">//显示整年日历</span><br></code></pre></td></tr></table></figure><h3 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">find 目录 -name 文件名<br>find 目录 -user root  <span class="hljs-comment">//查找用户名文件，文件太多了加 | more</span><br>find 目录 -szie +<span class="hljs-number">200</span>M<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/06/oAJMDQyVveTSgfx.png" alt="image-20210806193547792"></p><p><img src="https://i.loli.net/2021/08/07/w8BseumvFDRKhVH.png" alt="image-20210807092110519"></p><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">updatedb <span class="hljs-comment">//创建locate数据库</span><br>locate 文件名  <span class="hljs-comment">//快速定位文件路径，不遍历整个文件系统，要定期更新</span><br></code></pre></td></tr></table></figure><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">which 指令名 <span class="hljs-comment">//查看某个指令在哪个目录下</span><br></code></pre></td></tr></table></figure><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">|  <span class="hljs-comment">//管道符号，将前一个命令结果输出传递给后面的命令处理</span><br>grep 选项 查找内容 源文件 <span class="hljs-comment">//过滤查找</span><br>cat /home/hello.txt | grep -n <span class="hljs-string">&quot;yes&quot;</span><br>grep -n <span class="hljs-string">&quot;yes&quot;</span> /home/hello.txt<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/07/PkrF7tUiGMzcZpV.png" alt="image-20210807101433058"></p><h3 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h3><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">gzip 文件  <span class="hljs-comment">//压缩文件</span><br>gunzip 文件.gz   <span class="hljs-comment">//解压缩文件命令</span><br></code></pre></td></tr></table></figure><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">zip 选项 文件.zip 将要压缩的内容 <span class="hljs-comment">//压缩文件和目录的命令</span><br>unzip 选项 文件.zip  <span class="hljs-comment">//解压文件</span><br>-r <span class="hljs-comment">//递归压缩，压缩目录</span><br>-d 目录 <span class="hljs-comment">//解压后文件的存放目录</span><br>zip -r  myhome.zip /home/  <span class="hljs-comment">//将home目录及其包含的文件和子文件夹都压缩</span><br>unzip -d /opt/tmp/home/myhome.zip <br></code></pre></td></tr></table></figure><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">tar 选项 文件.tar.gz 要打包内容  <span class="hljs-comment">//打包目录，压缩后的文件格式为.tar.gz</span><br>tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt <span class="hljs-comment">//打包多个文件</span><br>tar -zcvf pc.tar.gz /home/pig.txt /home  <span class="hljs-comment">//打包文件到某位置</span><br>tar -zxvf pc.tar.gz <span class="hljs-comment">//解压到当前目录</span><br>tar -zxvf /opt/tmp2 tar -zxvf /home/myhome.tar.gz -C /opt/tmp2<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/07/TKbROMAU4daBwFc.png" alt="image-20210807105145862"></p><h2 id="Linux组管理"><a href="#Linux组管理" class="headerlink" title="Linux组管理"></a>Linux组管理</h2><ul><li><p>在linux中所有的用户都需要属于一个组，类似人都有一个国家</p></li><li><p>有一个用户必须属于一个组</p></li><li><p>所有者，是指创建文件的属性，可以改变</p></li><li><p>所在组</p></li><li><p>其他组</p><p>Linux组的管理机制</p><img src="https://i.loli.net/2021/08/07/VpbCBfHtrzu1Fwg.png" alt="image-20210807121210180"  /></li></ul><h3 id="文件目录所有者"><a href="#文件目录所有者" class="headerlink" title="文件目录所有者"></a>文件目录所有者</h3><p>谁创建文件谁就是所有者</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">ls -ahl <span class="hljs-comment">//查看文件的所有者</span><br>chown 用户名 文件名 <span class="hljs-comment">//修改文件所有者</span><br></code></pre></td></tr></table></figure><h3 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">groupadd 组名 <span class="hljs-comment">//创建组</span><br>useradd -g monster fox <span class="hljs-comment">//在指定组创建用户</span><br>id fox  <span class="hljs-comment">//显示用户信息</span><br>chgrp 组名 文件名  <span class="hljs-comment">//改变文件的所在组</span><br></code></pre></td></tr></table></figure><h3 id="其他组"><a href="#其他组" class="headerlink" title="其他组"></a>其他组</h3><p>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组</p><h3 id="改变用户的所在组"><a href="#改变用户的所在组" class="headerlink" title="改变用户的所在组"></a>改变用户的所在组</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">usermod -g 组名 用户名<br>usermod -d 目录名 用户名 改变用户登陆的初始目录  <span class="hljs-comment">//这里注意，用户需要有到新目录的权限</span><br></code></pre></td></tr></table></figure><h3 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h3><p><img src="https://i.loli.net/2021/08/07/ASNbYnKjEg512VD.png" alt="image-20210807133047688"></p><h3 id="rwx权限-难点"><a href="#rwx权限-难点" class="headerlink" title="rwx权限==*难点=="></a>rwx权限==*难点==</h3><img src="https://i.loli.net/2021/08/07/lvAuFN1W7BrtzKg.png"/><p><img src="https://i.loli.net/2021/08/07/T1yKQgVs53xCMrS.png" alt="image-20210807133316216"></p><img src="https://i.loli.net/2021/08/07/8SutQMhza4jsfcI.png" alt="image-20210807135816519" style="zoom:150%;" /><h3 id="权限实例"><a href="#权限实例" class="headerlink" title="权限实例"></a>权限实例</h3><p><img src="https://i.loli.net/2021/10/02/dzMD2PjEmCbQpXr.png" alt="image-20210807135730380"></p><p><img src="https://i.loli.net/2021/08/07/XqwzFU9Z6lgT8KQ.png" alt="image-20210807135512446"></p><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><ul><li>使用+、-、= 变更权限</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">u <span class="hljs-comment">//所有者</span><br>g <span class="hljs-comment">//所在组</span><br>o <span class="hljs-comment">//其他组</span><br>a <span class="hljs-comment">//所有</span><br>chmod u=rwx,g=rx,o=x 文件/目录名  <span class="hljs-comment">//给文件/目录设置权限</span><br>chmod u-x,g+w 文件名  <span class="hljs-comment">//给文件增加权限</span><br>chmod a+r 文件名  <br></code></pre></td></tr></table></figure><ul><li>通过数字变更权限</li></ul><p><img src="https://i.loli.net/2021/08/07/y18ZYOlKtWf6TeC.png" alt="image-20210807141449589"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-number">1</span> <span class="hljs-comment">//x</span><br><span class="hljs-number">2</span> <span class="hljs-comment">//w</span><br><span class="hljs-number">3</span> <span class="hljs-comment">//wx</span><br><span class="hljs-number">4</span> <span class="hljs-comment">//r</span><br><span class="hljs-number">5</span> <span class="hljs-comment">//rx</span><br><span class="hljs-number">6</span> <span class="hljs-comment">//rw</span><br><span class="hljs-number">7</span> <span class="hljs-comment">//rwx</span><br>chmod <span class="hljs-number">751</span> 文件名/目录 <br></code></pre></td></tr></table></figure><h3 id="修改文件-目录所有者"><a href="#修改文件-目录所有者" class="headerlink" title="修改文件/目录所有者"></a>修改文件/目录所有者</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">chown newowner 文件/目录 改变所有者 <span class="hljs-comment">//命令一定要记得写所有者</span><br>chown newowner:mewgroup 文件/目录 改变所有者和所在组<br>-R   <span class="hljs-comment">//递归生效</span><br>chown -R tom /home/test<br></code></pre></td></tr></table></figure><h3 id="修改文件-目录所在组"><a href="#修改文件-目录所在组" class="headerlink" title="修改文件/目录所在组"></a>修改文件/目录所在组</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">chgrp newgroup 文件/目录  <span class="hljs-comment">//改变所在组</span><br>chgrp -R newgroup 文件/目录 <span class="hljs-comment">//递归改变</span><br></code></pre></td></tr></table></figure><h3 id="组应用实践"><a href="#组应用实践" class="headerlink" title="组应用实践"></a>组应用实践</h3><h4 id="警察和土匪游戏"><a href="#警察和土匪游戏" class="headerlink" title="警察和土匪游戏"></a>警察和土匪游戏</h4><ul><li><img src="https://i.loli.net/2021/08/07/jMfUKZAeP6qbV2D.png" alt="image-20210807153433573"></li><li><img src="https://i.loli.net/2021/08/07/hDsgEtJSMQAFjnY.png" alt="image-20210807153412290"></li></ul><h4 id="神仙妖怪"><a href="#神仙妖怪" class="headerlink" title="神仙妖怪"></a>神仙妖怪</h4><p><img src="https://i.loli.net/2021/08/07/yvB4JFMAuHYhDj5.png" alt="image-20210807155359173"></p><h2 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h2><h3 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h3><ul><li><p>概述</p><p><img src="https://i.loli.net/2021/08/07/M6lxFBwvVyPaKOk.png" alt="image-20210807160535123"></p><p><img src="https://i.loli.net/2021/08/07/hNyaidGHx3WQ1IV.png" alt="image-20210807160428559"></p><p><img src="https://i.loli.net/2021/08/07/xHZ4nGjWbKBXAif.png" alt="image-20210807160615510"></p><p><img src="https://i.loli.net/2021/08/07/bIeAkSNazJOrpfR.png" alt="image-20210807165446178"></p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">crond 选项<br></code></pre></td></tr></table></figure></li><li><p>实例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">/etc/crontab  <span class="hljs-comment">//设置任务调度文件</span><br>crontab -e   <span class="hljs-comment">//设置个人任务调度</span><br>*/<span class="hljs-number">1</span> * * * * ls -l /etc/ &gt; /tmp/to.txt   <span class="hljs-comment">//每小时每分钟执行</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/07/TkzuoI9lFDaR5yB.png" alt="image-20210807161112429"></p><p><img src="https://i.loli.net/2021/08/07/TzMnBaoeFvtiXED.png" alt="image-20210807162006078"></p><p><img src="https://i.loli.net/2021/08/07/Svh9MVBGdXJqRwE.png" alt="image-20210807162142101"></p></li><li><p><img src="https://i.loli.net/2021/08/07/TKpZt6LkhOX3WVy.png" alt="image-20210807164826984"></p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">vim /home/my.sh <span class="hljs-comment">//创建一个shell文件</span><br><span class="hljs-comment">//在文件内输入:</span><br>cal &gt;&gt; /opt/mycal<br>date &gt;&gt; /opt/mycal<br><span class="hljs-comment">//此时没有执行权限，要给root添加执行权限：</span><br>chmod u+x /home/my.sh<br>conrtab -e  <span class="hljs-comment">//打开任务调度中心</span><br><span class="hljs-comment">//将执行控制语句添加到控制文件中</span><br>*/<span class="hljs-number">1</span> * * * * /home/my.sh<br></code></pre></td></tr></table></figure><ul><li><img src="https://i.loli.net/2021/08/07/TcfAn18zSbDu3NB.png" alt="image-20210807165404840"></li></ul><h3 id="at定时任务"><a href="#at定时任务" class="headerlink" title="at定时任务"></a>at定时任务</h3><ul><li><p>基本介绍</p><p><img src="https://i.loli.net/2021/08/07/5xbsn9JFZucevYr.png" alt="image-20210807193902347"></p><p><img src="https://i.loli.net/2021/08/07/rXEcIwMl29zCQgL.png" alt="image-20210807195056045"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">ps -ef | grep atd  <span class="hljs-comment">//检测当前运行的指令</span><br></code></pre></td></tr></table></figure></li><li><p>at命令格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">at 选项 时间   <span class="hljs-comment">//Ctrl + D 2次结束at命令的输入</span><br><span class="hljs-comment">//输入错误 用Ctrl Spaceback</span><br></code></pre></td></tr></table></figure></li><li><p>at命令的选项</p><p><img src="https://i.loli.net/2021/08/07/glb3wyaXSBnKT8Q.png" alt="image-20210807195142797"></p></li><li><p>at时间定义</p><p><img src="https://i.loli.net/2021/08/07/hRWA68gukXKMdEY.png" alt="image-20210807195234822"></p></li><li><p>实例</p><p><img src="https://i.loli.net/2021/10/02/NLaC9Qz8WVjxmlp.png" alt="image-20210807200435924"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">at <span class="hljs-number">5</span>pm + <span class="hljs-number">2</span> days<br>at&gt; /bin/ls /home&lt;EOT&gt;  <span class="hljs-comment">//Ctrl + D退出</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/07/wubYsnmAOdpzegh.png" alt="image-20210807204649074"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">atq   <span class="hljs-comment">//输出at队列信息</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/07/xBsCb7ihgn8R4wH.png" alt="image-20210807204755663"></p><p><img src="https://i.loli.net/2021/08/07/7zwCA56kebT9UcB.png" alt="image-20210807204815663"></p><p><img src="https://i.loli.net/2021/08/07/EJl4IzZWjbwm5qM.png" alt="image-20210807204833901"></p><p><img src="https://i.loli.net/2021/08/07/26kw7cQ83XPb1ve.png" alt="image-20210807205011471"></p><p>也可以执行脚本</p><p><img src="https://i.loli.net/2021/08/07/xze6YZNIywBmiSs.png" alt="image-20210807205050842"></p></li></ul><h2 id="磁盘分区、挂载"><a href="#磁盘分区、挂载" class="headerlink" title="磁盘分区、挂载"></a>磁盘分区、挂载</h2><h3 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h3><ul><li><p>原理介绍</p><p><img src="https://i.loli.net/2021/08/07/TuN1rVnp6eA8qo9.png" alt="image-20210807205401376"></p><img src="https://i.loli.net/2021/08/07/UGFNWx7kp4lZjua.png" alt="image-20210807210016216" style="zoom:150%;" /><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">lsblk  <span class="hljs-comment">//查看挂载状态</span><br></code></pre></td></tr></table></figure></li><li><p>硬盘说明</p><p><img src="https://i.loli.net/2021/08/07/vM7s4xVFIdecGg9.png" alt="image-20210807210122329"></p><p>sdx~ 中 x 可以为 a,b,c,d，分别表示第1，2，3，4块硬盘</p><p><img src="https://i.loli.net/2021/08/07/z1M3xqAJNwEB5ZD.png" alt="image-20210807210627411"></p></li><li><p>查看挂载情况</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">lsblk -f <span class="hljs-comment">//详细信息</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/cr1KfCvDdmZV9Xi.png" alt="image-20210807211158441"></p></li></ul><h3 id="挂载的经典案例"><a href="#挂载的经典案例" class="headerlink" title="挂载的经典案例"></a>挂载的经典案例</h3><ul><li><p>在虚拟机中添加虚拟磁盘，重启以后就可以看到</p></li><li><p><img src="https://i.loli.net/2021/10/02/xKo4T3cvNEInBR9.png" alt="image-20210807214255205"></p></li><li><p>分区</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">fdisk /dev/sdb<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/pGdhf7jKeyvRnwW.png" alt="image-20210807215358831"></p><p><img src="https://i.loli.net/2021/10/02/IWzRZeEFdK3P1hu.png" alt="image-20210807215043425"></p><p><img src="https://i.loli.net/2021/10/02/pDAng2FTUlMkdbV.png" alt="image-20210807215814412"></p><p><img src="https://i.loli.net/2021/10/02/PZUEXe5hDBlCGOW.png" alt="image-20210807215856173"></p><p><img src="https://i.loli.net/2021/10/02/vILmuM41RwWDGhA.png" alt="image-20210807220731459"></p></li><li><p>关系结构图</p><p><img src="https://i.loli.net/2021/10/02/myf3QRLGZNqTKO4.png" alt="image-20210807220803271"></p></li><li><p>如何卸载</p><p><img src="https://i.loli.net/2021/10/02/XEZO6fbi74rnVTv.png" alt="image-20210807221416672"></p></li><li><p>==用命令行挂载，重启后就会失效==</p></li><li><p>永久挂载</p><p><img src="https://i.loli.net/2021/10/02/nLqFEZemhgU7tDW.png" alt="image-20210807222104610"></p><p><img src="https://i.loli.net/2021/10/02/J5xmiN3qu1FG7MK.png" alt="image-20210807222124748"></p><p><img src="https://i.loli.net/2021/10/02/ZU7WhwNRs6SO3I8.png" alt="image-20210807222027035"></p><p>重启后挂载关系一直在</p></li><li><p>管理员保证硬盘分区存储空间足够，保证系统正常运行</p></li></ul><h5 id="挂载深入理解"><a href="#挂载深入理解" class="headerlink" title="挂载深入理解"></a>挂载深入理解</h5><p><a href="https://www.cnblogs.com/jiangzhaowei/p/11843026.html">https://www.cnblogs.com/jiangzhaowei/p/11843026.html</a></p><h3 id="磁盘使用情况"><a href="#磁盘使用情况" class="headerlink" title="磁盘使用情况"></a>磁盘使用情况</h3>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">df -h<br></code></pre></td></tr></table></figure><ul><li><p><img src="https://i.loli.net/2021/10/02/NaGYeAcnShKukQp.png" alt="image-20210807222934745"></p></li><li><p><img src="https://i.loli.net/2021/10/02/Ox9ceyh2oIDC7dB.png" alt="image-20210807222958796"></p></li><li><p><img src="https://i.loli.net/2021/10/02/78pdnhEuWGz5FqD.png" alt="image-20210807223441213"></p></li><li><p><img src="https://i.loli.net/2021/10/02/Ku3N72Fsk6lhQPV.png" alt="image-20210807223604802"></p></li></ul><h3 id="磁盘工作实用指令"><a href="#磁盘工作实用指令" class="headerlink" title="磁盘工作实用指令"></a>磁盘工作实用指令</h3><ul><li><p>统计文件夹下文件的个数</p><p><img src="https://i.loli.net/2021/10/02/fKLdJ4BkcH9PF3s.png" alt="image-20210807230818542"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">ls -l /opt | grep <span class="hljs-string">&quot;^-&quot;</span> | wc -l   <span class="hljs-comment">//当前文件夹下</span><br>ls -lR /opt | grep <span class="hljs-string">&quot;^-&quot;</span> | wc -l  <span class="hljs-comment">//目录下所有文件</span><br></code></pre></td></tr></table></figure></li><li><p>统计文件夹下目录的个数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">ls -l /opt | grep <span class="hljs-string">&quot;^d&quot;</span> | wc -l    <span class="hljs-comment">//当前文件夹下</span><br>ls -lR /opt | grep <span class="hljs-string">&quot;^d&quot;</span> | wc -l   <span class="hljs-comment">//目录下所有文件</span><br></code></pre></td></tr></table></figure></li><li><p>树状图显示</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">yum install tree  <span class="hljs-comment">//默认情况下，tree命令没有安装</span><br>tree 目录<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/tWxy1QVuY68lNOz.png" alt="image-20210807231633355"></p></li></ul><h2 id="Linux网络配置"><a href="#Linux网络配置" class="headerlink" title="Linux网络配置"></a>Linux网络配置</h2><h3 id="NAT配置原理"><a href="#NAT配置原理" class="headerlink" title="NAT配置原理"></a>NAT配置原理</h3><p><img src="https://i.loli.net/2021/10/02/sUtK8aEkPuTiGdV.png" alt="image-20210807234031143"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">ipconfig  <span class="hljs-comment">//windows下</span><br>ifconfig  <span class="hljs-comment">//Linux下</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/BeMgZSum2oGKOaX.png" alt="image-20210808142737158"></p><h3 id="ping-测试网络连通性"><a href="#ping-测试网络连通性" class="headerlink" title="ping 测试网络连通性"></a>ping 测试网络连通性</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">ping ip地址  <br></code></pre></td></tr></table></figure><h3 id="Linux网络环境配置"><a href="#Linux网络环境配置" class="headerlink" title="Linux网络环境配置"></a>Linux网络环境配置</h3><p>####自动获取</p><ul><li>特点：每次ip都是自动获取的，不是固定的，不利于做服务器</li></ul><p>####指定ip</p><ul><li><p><img src="https://i.loli.net/2021/10/02/345laGCmUZW2d6q.png" alt="image-20210808170414034"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/10/02/PmgMG2jxFawJ7r8.png" alt="image-20210808170830311"></p></li><li><p><img src="https://i.loli.net/2021/10/02/x4jRivAD1JBZuFr.png" alt="image-20210808171319554"></p></li><li><p><img src="https://i.loli.net/2021/10/02/VC9EqyafXAS8LG4.png" alt="image-20210808172446380"></p></li><li><p><img src="https://i.loli.net/2021/10/02/oeIlC6AYcKNfEpR.png" alt="image-20210808173708283"></p></li><li><p><img src="https://i.loli.net/2021/10/02/uRoSelEr3TwxODf.png" alt="image-20210808173745509"></p></li><li><p>重启reboot  或者 service network restart</p></li></ul><p>###设置主机名和hosts映射</p><h4 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h4>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">hostname   <span class="hljs-comment">//查看主机名</span><br>vim /etc/hostname  <span class="hljs-comment">//修改主机名</span><br>reboot   <span class="hljs-comment">//重启生效</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://i.loli.net/2021/10/02/EBCaS7ifGrz8KmJ.png" alt="image-20210812160026958"></li></ul><h4 id="设置hosts映射"><a href="#设置hosts映射" class="headerlink" title="设置hosts映射"></a>设置hosts映射</h4><ul><li><p>hosts文件  记录主机名与ip之间的关系</p></li><li><p><img src="https://i.loli.net/2021/10/02/8sxQBmuyWKl6Cqj.png" alt="image-20210812162637849"></p></li><li><p>ping 主机名 时 系统会去hosts文件中找相关的ip</p></li><li><img src="https://i.loli.net/2021/10/02/tTmpdJZ7YXaFr6h.png" alt="image-20210812164943849" style="zoom:67%;" /></li><li><p>windows</p><p><img src="https://i.loli.net/2021/08/12/iVAx4l3XNPvjaeH.png" alt="image-20210812164912389"></p></li><li><p>Linux</p><p><img src="https://i.loli.net/2021/08/12/VRhdu6CvwWmSMn4.png" alt="image-20210812170009086"></p><p><img src="https://i.loli.net/2021/08/12/oyxlX6ZVbWnRMES.png" alt="image-20210812165652021"></p></li></ul><h4 id="主机名解析过程"><a href="#主机名解析过程" class="headerlink" title="主机名解析过程"></a>主机名解析过程</h4><ul><li><img src="https://i.loli.net/2021/08/12/giyXDjsC7G8hcMF.png" alt="image-20210812172523993"></li><li><img src="https://i.loli.net/2021/08/12/GK9FMNjoIzk147l.png" alt="image-20210812172954472"></li></ul><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ul><li><p><img src="https://i.loli.net/2021/08/12/naHUvz7bhqQNX2i.png" alt="image-20210812173456153"></p></li><li><p><img src="https://i.loli.net/2021/08/13/bZ1ApKsvEcSiImO.png" alt="image-20210813144923587"></p></li><li><p><img src="https://i.loli.net/2021/08/13/DSIP3xLBzyFblai.png" alt="image-20210813145314229"></p></li><li><p>前台</p><p><img src="https://i.loli.net/2021/10/02/ufp6ikA5UzCxL4h.png" alt="image-20210813145513197"></p></li><li><p>后台  Mysql</p></li></ul><h3 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h3><ul><li><p><img src="https://i.loli.net/2021/08/13/rsBnjdY4xvpMVDa.png" alt="image-20210813145838636"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">ps -aux | more <span class="hljs-comment">//用more查看进程</span><br>ps -aux | grep sshd  <span class="hljs-comment">//过滤查看</span><br></code></pre></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/08/13/yVIrzDgPauLq6Hf.png" alt="image-20210813152033299"></p></li><li><p><img src="https://i.loli.net/2021/08/13/WbPLwasMcVHZn83.png" alt="image-20210813152124388"></p></li></ul><p>###查看父进程</p><ul><li><p><img src="https://i.loli.net/2021/10/02/f7CuQO6r1dBcnTL.png" alt="image-20210813153155143"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">ps -ef | more <br>ps -ef | grep sshd<br></code></pre></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/10/02/CEjDb1R735spqiB.png" alt="image-20210813153527743"></p></li><li><p><img src="https://i.loli.net/2021/10/02/97Wo1JpEnTP5iqf.png" alt="image-20210813153830773"></p></li></ul><h3 id="终止进程kill"><a href="#终止进程kill" class="headerlink" title="终止进程kill"></a>终止进程kill</h3><ul><li><p><img src="https://i.loli.net/2021/10/02/D7Fhl6EsSv8MyZY.png" alt="image-20210813153912545"></p></li><li><img src="https://i.loli.net/2021/10/02/hmg6Oi3WPdzTjSD.png" alt="image-20210813154146796" style="zoom: 67%;" /><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">ps -aux | grep sshd   <span class="hljs-comment">//查看远程服务sshd进程</span><br></code></pre></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/10/02/lTpW6joDstefPqE.png" alt="image-20210813155337788"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">kill 进程号  <span class="hljs-comment">//终止某个进程</span><br>/bin/systemctl start sshd.service  <span class="hljs-comment">//重启sshd服务</span><br>killall gedit   <span class="hljs-comment">//终止gedit的多个终端</span><br>kill <span class="hljs-number">-9</span> 进程号  <span class="hljs-comment">//强制删除</span><br></code></pre></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/10/02/8raUBtOqLQy5ReX.png" alt="image-20210813161128768"></p></li></ul><h3 id="查看进程树pstree"><a href="#查看进程树pstree" class="headerlink" title="查看进程树pstree"></a>查看进程树pstree</h3><ul><li><img src="https://i.loli.net/2021/10/02/15FWce67udyXQTE.png" alt="image-20210813162224598"></li><li><img src="https://i.loli.net/2021/10/02/eONsWchMVPr8qkb.png" alt="image-20210813162243386"></li></ul><h3 id="服务管理service"><a href="#服务管理service" class="headerlink" title="服务管理service"></a>服务管理service</h3><ul><li><p><img src="https://i.loli.net/2021/08/15/p8QIPNAWaywnbOE.png" alt="image-20210813163455677"></p></li><li><p><img src="https://i.loli.net/2021/08/15/MjDkhR7UN5Lfysa.png" alt="image-20210814100817500"></p></li><li><p><img src="https://i.loli.net/2021/08/15/ZqXCzpPvlWb8xnS.png" alt="image-20210814105850452"></p></li><li><p>centos7以后service不再使用了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">service 服务名 status<br>service 服务名 stop<br>service 服务名 restart<br>step  <span class="hljs-comment">//进入系统服务界面</span><br></code></pre></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/08/15/YR6uFMawqep87vg.png" alt="image-20210814112143084"></p></li></ul><h3 id="服务的运行级别"><a href="#服务的运行级别" class="headerlink" title="服务的运行级别"></a>服务的运行级别</h3><ul><li><p><img src="https://i.loli.net/2021/08/14/2UalIuzv9nSrG7s.png" alt="image-20210814112347858"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">vim /tec/inittab  <span class="hljs-comment">//查看运行级别文件</span><br>systemctl get-default   <span class="hljs-comment">//查看当前的运行级别</span><br>systemctl set-default multi-user.target  <br></code></pre></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/08/15/WHsBc83RbPthEzf.png" alt="image-20210815120004426"></p></li></ul><h3 id="chkconfig指令"><a href="#chkconfig指令" class="headerlink" title="chkconfig指令"></a>chkconfig指令</h3><ul><li><p><img src="https://i.loli.net/2021/08/15/uKRHBceiX2s5kCo.png" alt="image-20210815121109777"></p></li><li><p><img src="https://i.loli.net/2021/08/15/b4rpkWYMJeuhT9i.png" alt="image-20210815171540116"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">chkconfig --list  <span class="hljs-comment">//查看服务</span><br>chkconfig --lsit | grep network  <span class="hljs-comment">//查看特定服务</span><br>chkconfig network --list  <span class="hljs-comment">//查看特定服务</span><br>chkconfig --level <span class="hljs-number">3</span> network off<br>chkconfig --level <span class="hljs-number">3</span> network on<br></code></pre></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/08/15/JHUiYuB4d6vqQyb.png" alt="image-20210815173052325"></p></li></ul><h3 id="systemctl管理指令"><a href="#systemctl管理指令" class="headerlink" title="systemctl管理指令"></a>systemctl管理指令</h3><ul><li><p><img src="https://i.loli.net/2021/08/15/62taTWZpFbE3M98.png" alt="image-20210815173653288"></p></li><li><p>指令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">ls -l /usr/lib/systemd/system  <span class="hljs-comment">//查看全部的系统内服务</span><br>systemctl list-unit-files [| grep 服务名]  <span class="hljs-comment">//查看服务的开机启动状态</span><br>systemctl status firewalld  <span class="hljs-comment">//查看防火墙服务的当前状态</span><br><span class="hljs-comment">//strat,stop是临时生效，永久不启动需要disable </span><br></code></pre></td></tr></table></figure></li></ul><ul><li><img src="https://i.loli.net/2021/08/17/gHcY6ZSQJwsxTBP.png" alt="image-20210817152652813"></li></ul><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><ul><li><img src="https://i.loli.net/2021/08/17/WDFYXQuCqZvBe56.png" alt="image-20210817154039921"></li></ul><h3 id="firewall指令"><a href="#firewall指令" class="headerlink" title="firewall指令"></a>firewall指令</h3><p><img src="https://i.loli.net/2021/08/17/KyVQMJf14czIjh7.png" alt="image-20210817154717038"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">netstat -anp | more  <span class="hljs-comment">//查看端口、协议等</span><br>win下<br>telnet <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span> <span class="hljs-number">111</span>   <span class="hljs-comment">//win10上先要安装这个服务</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/17/S9dx5vIueQosijJ.png" alt="image-20210817155316775"></p><p><img src="https://i.loli.net/2021/08/17/1Ep9ChkOtgFWMLV.png" alt="image-20210817160411772"><br><img src="https://i.loli.net/2021/08/17/49WlXi1VoHpGacz.png" alt="image-20210817160628088"></p><h3 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h3><ul><li><img src="https://i.loli.net/2021/08/17/9JgTLcCRFS8E65W.png" alt="image-20210817163858541"></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">top  <span class="hljs-comment">//查看动态监控进程</span><br></code></pre></td></tr></table></figure><ul><li><p><img src="https://i.loli.net/2021/08/17/IRNqmcvAGOBksXn.png" alt="image-20210817163614260"></p></li><li><p><img src="https://i.loli.net/2021/10/02/dgXvMT4s5Y7KFEa.png" alt="image-20210817164136536"></p></li><li><p><img src="https://i.loli.net/2021/08/17/V8keUbBYhqGtwNv.png" alt="image-20210817164859961"></p></li><li><p><img src="https://i.loli.net/2021/08/17/8rALOGX6uDMdjwP.png" alt="image-20210817164228136"></p></li><li><p>监控qxd用户的进程</p><p><img src="https://i.loli.net/2021/08/17/P4OiACnWc2K78G6.png" alt="image-20210817164615639"></p></li></ul><h3 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">netstat -anp | more  <span class="hljs-comment">//查看端口、协议等</span><br>netstat -anp | grep sshd<br></code></pre></td></tr></table></figure><ul><li><p><img src="https://i.loli.net/2021/08/17/XzV5QfO4iAoaLmG.png" alt="image-20210817165801670"></p></li><li><p>端对端的协议连接</p><p><img src="https://i.loli.net/2021/10/02/yEkrNupQKV3h4Wt.png" alt="image-20210817170517819"></p><p>断开连接有根据tcp协议，监听端口会进入timewait的状态</p></li></ul><h2 id="包的管理"><a href="#包的管理" class="headerlink" title="包的管理"></a>包的管理</h2><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><ul><li><img src="https://i.loli.net/2021/08/17/Ww5nMTrvIthildJ.png" alt="image-20210817171236432"></li><li><img src="https://i.loli.net/2021/08/17/YFJE1pSTKzd7uM5.png" alt="image-20210817171436981"></li><li><img src="https://i.loli.net/2021/08/17/CR5zuE2FSAoMlVU.png" alt="image-20210817171735400"></li><li><img src="https://i.loli.net/2021/08/17/OminP7gQUR59tMc.png" alt="image-20210817171944157"></li><li><img src="https://i.loli.net/2021/08/17/WG4Zqha6m8j3BXy.png" alt="image-20210817172134735"></li><li><img src="https://i.loli.net/2021/08/17/ntux84QErgpDOTN.png" alt="image-20210817174019866"></li></ul><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><ul><li><img src="https://i.loli.net/2021/08/17/4x9VbJFRlgfOmIy.png" alt="image-20210817174103472"></li><li><img src="https://i.loli.net/2021/08/18/UepLFTh4IPtHSM5.png" alt="image-20210818205703250"></li><li><img src="https://i.loli.net/2021/08/18/A1EQrlOPzgV7Xka.png" alt="image-20210818205824039"></li></ul><h2 id="搭建JavaEE环境"><a href="#搭建JavaEE环境" class="headerlink" title="搭建JavaEE环境"></a>搭建JavaEE环境</h2><ul><li><p><img src="https://i.loli.net/2021/08/18/8WNVJ6UYkzDTqRS.png" alt="image-20210818210412643"></p></li><li><p><img src="https://i.loli.net/2021/08/19/yDB9fsAC4kwujbI.png" alt="image-20210819104057711"></p></li><li><p>```json<br>echo $PATH  //查看环境变量<br>source /etc/profile  //刷新让修改后的文件生效</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>- ![image-<span class="hljs-number">20210819104922790</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span>CRnYKjqPHXLW3QZ.png)<br><br>- &lt;img src=<span class="hljs-string">&quot;https://i.loli.net/2021/08/19/OWxyzYAZ3ec8Bil.png&quot;</span>/&gt;<br><br><span class="hljs-comment">## 搭建tomcat</span><br><br>- ![image-<span class="hljs-number">20210819105331588</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span>xkyhlutSmn6w4Vv.png)<br>- ![image-<span class="hljs-number">20210819110928534</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span>WHSzMYlgD25nG3O.png)<br>- ![image-<span class="hljs-number">20210819110752367</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span><span class="hljs-number">1</span>ikZemyEw3RtVC7.png)<br>- ![image-<span class="hljs-number">20210819110947120</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span>nPX5c4o2VlgvChz.png)<br><br><span class="hljs-comment">## idea2020安装</span><br><br>- ![image-<span class="hljs-number">20210819115158580</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span>U3WCKjw6DBNPQXY.png)<br>- ![image-<span class="hljs-number">20210819115228335</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span>NRkJ5b1ZExzAfCc.png)<br>- ![image-<span class="hljs-number">20210819115401241</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">10</span><span class="hljs-regexp">/02/</span>Vi2rKFNewjASfO1.png)<br>- ![image-<span class="hljs-number">20210819115141590</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span>bYuwWE7AXiFVBxy.png)<br><br><span class="hljs-comment">## mysql5.7的安装</span><br><br>- ![image-<span class="hljs-number">20210819120358837</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span><span class="hljs-number">4</span>m5zp3RHTtEUlS1.png)<br>- ![image-<span class="hljs-number">20210819122922344</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span>cQirakxzAv7h8H1.png)<br>- ![image-<span class="hljs-number">20210819121726773</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span>YTcGjhAbKUaBiO9.png)<br>- ![image-<span class="hljs-number">20210819123658222</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">10</span><span class="hljs-regexp">/02/g</span>2FcaKElrzW8Yqk.png)<br>- ![image-<span class="hljs-number">20210819122501769</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">08</span><span class="hljs-regexp">/19/</span>duqHRhpgjbIlyLY.png)<br><br><span class="hljs-comment">## shell编程</span><br><br><span class="hljs-comment">### 什么是shell</span><br><br>- ![image-<span class="hljs-number">20210819123945977</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">10</span><span class="hljs-regexp">/02/</span><span class="hljs-number">8</span>Vf7PrBOpIvLYKH.png)<br><br><span class="hljs-comment">### shell脚本的执行方式</span><br><br>- ![image-<span class="hljs-number">20210819153805922</span>](https:<span class="hljs-regexp">//i</span>.loli.net<span class="hljs-regexp">/2021/</span><span class="hljs-number">10</span><span class="hljs-regexp">/02/</span>SyubWIZGXFUi9tn.png)<br><br>```shell<br><span class="hljs-comment">#!/bin/bash</span><br>echo <span class="hljs-string">&quot;hello,world~&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="shell的变量"><a href="#shell的变量" class="headerlink" title="shell的变量"></a>shell的变量</h3><ul><li><img src="https://i.loli.net/2021/10/02/FJVtCP9sR8N6zep.png" alt="image-20210819154508379"></li><li><img src="https://i.loli.net/2021/10/02/EpD7RcLTftJAWuU.png" alt="image-20210819161032530"></li><li><img src="https://i.loli.net/2021/10/02/D5PSZyGiEHvzBCd.png" alt="image-20210819161833087"></li><li><img src="https://i.loli.net/2021/10/02/ikaJIS3jfDEZ67K.png" alt="image-20210819162057317"></li></ul><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><ul><li><p><img src="https://i.loli.net/2021/10/02/mERw69Xg8jbPIGM.png" alt="image-20210819170304588"></p></li><li><p><img src="https://i.loli.net/2021/10/02/TIi1nBhRLDVcMX2.png" alt="image-20210819170149321"></p></li><li><p><img src="https://i.loli.net/2021/10/02/dkl1UHr7AGRTm6q.png" alt="image-20210819170712395"></p></li><li><p><img src="https://i.loli.net/2021/10/02/4otrUIv9Q8513iE.png" alt="image-20210819170804034"></p></li><li><p><img src="https://i.loli.net/2021/10/02/jctPKUWirH3vdLu.png" alt="image-20210819170906020"></p></li><li><p><img src="https://i.loli.net/2021/10/02/mdyI1D39xqOpfU8.png" alt="image-20210819170923046"></p></li><li><p>shell多行注释</p><p><img src="https://i.loli.net/2021/10/02/GXAYPqUTBreHv7k.png" alt="image-20210819171315447"></p></li></ul><h3 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h3><ul><li><img src="https://i.loli.net/2021/10/02/2eq8RfsM9BdWz1b.png" alt="image-20210819171442142"></li><li><img src="https://i.loli.net/2021/10/02/z8SyxJVvLlkI5hA.png" alt="image-20210819173529816"></li><li><img src="https://i.loli.net/2021/10/02/UORnIzQT4G2Powq.png" alt="image-20210819173542441"></li></ul><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><ul><li><img src="https://i.loli.net/2021/10/02/13ZbahVRKzrodBW.png" alt="image-20210819173618257"></li><li><img src="https://i.loli.net/2021/10/02/tqbUyfQnPZgOljH.png" alt="image-20210820124736055"></li><li><img src="https://i.loli.net/2021/10/02/WsxipCUvob9YzFS.png" alt="image-20210820124546855"></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><img src="https://i.loli.net/2021/10/02/m8ik5cguvsStBDd.png" alt="image-20210820125315981"></li><li><img src="https://i.loli.net/2021/10/02/2UP8u3AdvDCrSxV.png" alt="image-20210820170156514"></li><li><img src="https://i.loli.net/2021/10/02/RnTfUNBkdxZXq9e.png" alt="image-20210820170120625"></li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><ul><li><img src="https://i.loli.net/2021/10/02/87Kq6HWr2xSiknP.png" alt="image-20210820170428133"></li><li><img src="https://i.loli.net/2021/10/02/58aMynIH7cw9SOW.png" alt="image-20210820170450446"></li><li><img src="https://i.loli.net/2021/10/02/JkM7xdPFecytSZA.png" alt="image-20210822132129203"></li><li>中括号内有字符即为真，没有内容为假</li><li>中括号前后有空格</li></ul><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><ul><li><img src="https://i.loli.net/2021/10/02/1RsNyFGjtIfYVdL.png" alt="image-20210906194741026"></li><li><img src="https://i.loli.net/2021/10/02/2PneYvNRf5WCE9F.png" alt="image-20210908160318523"></li><li><img src="https://i.loli.net/2021/10/02/Axji3T76HQlkzYN.png" alt="image-20210908160343714"></li><li><img src="https://i.loli.net/2021/09/09/ekLa2sSFtHRJrvW.png" alt="image-20210908160505348"></li><li><img src="https://i.loli.net/2021/09/08/PTsBzSmhA8jJaeR.png" alt="image-20210908161042941"></li><li><img src="https://i.loli.net/2021/09/08/t89xiZhVJB2Ce4A.png" alt="image-20210908161139192"></li><li><img src="https://i.loli.net/2021/09/08/Xaxr3Fy9Bvld7fN.png" alt="image-20210908161952366"></li><li><img src="https://i.loli.net/2021/09/09/PLoVuN8miW3zQTA.png" alt="image-20210908162800387"></li><li><img src="https://i.loli.net/2021/09/08/pH9egOqKSdvnTlj.png" alt="image-20210908162841649"></li><li><img src="https://i.loli.net/2021/09/09/Lo1sgY4HpuwkIrP.png" alt="image-20210909130816848"></li><li><img src="https://i.loli.net/2021/09/09/vJFSeLwQD2Z4Bzj.png" alt="image-20210909130935042"></li><li><img src="https://i.loli.net/2021/09/09/7PhAkm6jSRzpC4Q.png" alt="image-20210909131629080"></li><li><img src="https://i.loli.net/2021/09/09/fMh159doaLSusBb.png" alt="image-20210909131706055"></li><li><img src="https://i.loli.net/2021/09/09/CY5FvkPHIB8ZOdt.png" alt="image-20210909131728406"></li></ul><h3 id="read读取控制台"><a href="#read读取控制台" class="headerlink" title="read读取控制台"></a>read读取控制台</h3><ul><li><img src="https://i.loli.net/2021/10/02/kG5NwPaWuzgDTnH.png" alt="image-20210909133221768"></li><li><img src="https://i.loli.net/2021/09/09/3lUvCfYSGneOyk9.png" alt="image-20210909133756311"></li><li><img src="https://i.loli.net/2021/09/09/wBIq4zuRhbTFfQW.png" alt="image-20210909133824276"></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>系统函数</p></li><li><p><img src="https://i.loli.net/2021/10/02/X4BEWDxpMcKGi8L.png" alt="image-20210909133858500"></p></li><li><p><img src="https://i.loli.net/2021/10/02/xKOb6RqhSfVPeWs.png" alt="image-20210909134145564"></p></li><li><p>自定义函数</p></li><li><p><img src="https://i.loli.net/2021/09/09/TrgZu5GxYVDJ1A7.png" alt="image-20210909134808788"></p></li><li><p><img src="https://i.loli.net/2021/09/09/nvpm5q9o4syKXe7.png" alt="image-20210909135315755"></p></li><li><p><img src="https://i.loli.net/2021/09/09/FJxQ8shoDgayCpK.png" alt="image-20210909135249294"></p></li></ul><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><ul><li><img src="https://i.loli.net/2021/09/09/Ol25URrBifV6yLJ.png" alt="image-20210909135416732"></li><li><img src="https://i.loli.net/2021/09/09/YK5rSQoWqbG93LH.png" alt="image-20210909142331103"></li><li><img src="https://i.loli.net/2021/09/09/yP8rfGN9Ze4FEUX.png" alt="image-20210909142518517"></li><li><img src="https://i.loli.net/2021/10/02/M96YZXcdBagj3iE.png" alt="image-20210909142713558"></li></ul><h2 id="Uuntu"><a href="#Uuntu" class="headerlink" title="Uuntu"></a>Uuntu</h2><ul><li><img src="https://i.loli.net/2021/09/09/BCknZcXxFzV9vTd.png" alt="image-20210909142901085"></li></ul><h3 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a>root用户</h3><ul><li><img src="https://i.loli.net/2021/09/09/ufdwbW9CDlPYoaZ.png"></li><li><img src="https://i.loli.net/2021/09/09/68tUSuf3gXMJQNq.png"></li></ul><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><ul><li><img src="https://i.loli.net/2021/10/02/oFfCTkR1P8S3sU4.png"></li></ul><h2 id="APT软件管理和远程登陆"><a href="#APT软件管理和远程登陆" class="headerlink" title="APT软件管理和远程登陆"></a>APT软件管理和远程登陆</h2><ul><li><img src="https://i.loli.net/2021/09/09/kjcmnbpsaUCZ9Sg.png"></li></ul><h3 id="软件操作相关命令"><a href="#软件操作相关命令" class="headerlink" title="软件操作相关命令"></a>软件操作相关命令</h3><p><img src="https://i.loli.net/2021/09/09/HnxtWu51CSQcIPM.png"></p><h3 id="更新ubantu软件下载地址"><a href="#更新ubantu软件下载地址" class="headerlink" title="更新ubantu软件下载地址"></a>更新ubantu软件下载地址</h3><ul><li><p>先备份文件</p></li><li><p><img src="https://i.loli.net/2021/10/02/K9TxLkU42wWqpvZ.png"></p></li><li><p><img src="https://i.loli.net/2021/09/09/9d71GbyMnR4QlAo.png"></p></li><li><p><img src="https://i.loli.net/2021/09/09/7x8SPdfAzYnvbN4.png"></p></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><img src="https://i.loli.net/2021/09/09/HgZUNmDCJ4cp25W.png"></li></ul><h3 id="远程登陆"><a href="#远程登陆" class="headerlink" title="远程登陆"></a>远程登陆</h3><p><img src="https://i.loli.net/2021/10/02/FPtVJybI3KTAaCx.png"></p><p><img src="https://i.loli.net/2021/09/09/OFjmApokLSNsW73.png"></p><p>netstat -anp | more</p><p><img src="https://i.loli.net/2021/09/09/oqCdE5nQN7aJUgt.png"></p><p>没有22号端口</p><p><img src="https://i.loli.net/2021/10/02/jFKTv5p6yxAmOie.png"></p><p><img src="https://i.loli.net/2021/10/02/79S8DBp4sbPY1fH.png" alt="image-20210909153749128"></p><p>ifconfig</p><h3 id="linux对Linux"><a href="#linux对Linux" class="headerlink" title="linux对Linux"></a>linux对Linux</h3><p><img src="https://i.loli.net/2021/09/09/SjUEpMDocatmG5Y.png"></p><p><img src="https://i.loli.net/2021/10/02/IFQiLW28RZxM9VG.png"></p><h2 id="Centos8-1-8-2"><a href="#Centos8-1-8-2" class="headerlink" title="Centos8.1/8.2"></a>Centos8.1/8.2</h2><p>生产环境选择最小安装</p><p><img src="https://i.loli.net/2021/10/02/9hBUEJDI1i8oGMf.png"></p><p><img src="https://i.loli.net/2021/09/09/sxJVWpiLb6ceSFU.png"></p><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><ul><li><img src="https://i.loli.net/2021/09/09/dvqZuFKwlQoN36E.png"></li><li><img src="https://i.loli.net/2021/09/09/8VSiXE3tvO9UhYn.png"></li></ul><h3 id="系统常用日志"><a href="#系统常用日志" class="headerlink" title="系统常用日志"></a>系统常用日志</h3><ul><li><p><img src="https://i.loli.net/2021/09/09/FEgXHkUG8AuY5yI.png" alt="image-20210909161851631"></p></li><li><p><img src="https://i.loli.net/2021/10/02/wJ2y6eZVpzmSrN9.png"></p></li></ul><h3 id="日志管理服务-rsyslogd"><a href="#日志管理服务-rsyslogd" class="headerlink" title="日志管理服务 rsyslogd"></a>日志管理服务 rsyslogd</h3><ul><li><img src="https://i.loli.net/2021/10/02/3TuqVnWmpKtRr51.png"></li><li><img src="https://i.loli.net/2021/09/09/IpR9zewNrsUmbnQ.png"></li><li><img src="https://i.loli.net/2021/10/02/oCD8Okj5wNecgRy.png"></li><li><img src="https://i.loli.net/2021/10/02/JTipHQu9NRhxqkc.png" alt="image-20210911085012298"></li><li><img src="https://i.loli.net/2021/10/02/jBMvJ6NeH5qKZgr.png" alt="image-20210911085223101"></li><li><img src="https://i.loli.net/2021/10/02/4eun6OGcQUoXNPj.png" alt="image-20210911085254912"></li><li><img src="https://i.loli.net/2021/09/11/zBdHuLNYC52wWoG.png" alt="image-20210911085345951"></li><li><img src="https://i.loli.net/2021/10/02/4SrCY9UKoMD6ZWO.png" alt="image-20210911085615920"></li><li><img src="https://i.loli.net/2021/09/11/afzdLOmEHejrYMV.png" alt="image-20210911090137186"></li><li>用户是主机名字</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li><img src="https://i.loli.net/2021/10/02/PrIOEzi2dGufAsD.png" alt="image-20210911090327002"></li><li><img src="https://i.loli.net/2021/10/02/1gC8c7yRwBKNXTQ.png" alt="image-20210911091138372"></li><li><img src="https://i.loli.net/2021/10/02/6wA9lY2TmJqonc8.png"></li><li><img src="https://i.loli.net/2021/10/02/xW95QOmKaj1zUY4.png"></li></ul><h3 id="日志轮替"><a href="#日志轮替" class="headerlink" title="日志轮替"></a>日志轮替</h3><ul><li><img src="https://i.loli.net/2021/10/02/8bkNGAlwcOmxqDC.png"></li><li><img src="https://i.loli.net/2021/10/02/XspeGOhEF81txHT.png"></li><li><img src="https://i.loli.net/2021/10/02/ns3P6oUWbZKtBel.png" alt="image-20210911091817445"></li><li><img src="https://i.loli.net/2021/10/02/28wog1VkRA39isn.png" alt="image-20210911092349413"></li></ul><h3 id="把自己的日志加入日志轮替"><a href="#把自己的日志加入日志轮替" class="headerlink" title="把自己的日志加入日志轮替"></a>把自己的日志加入日志轮替</h3><ul><li><img src="https://i.loli.net/2021/10/02/LHl8gr7EtxfyaiV.png" alt="image-20210911093909111"></li><li><img src="https://i.loli.net/2021/10/02/wicgLuAS4xjWJP9.png" alt="image-20210911094143387"></li></ul><h3 id="日志轮替机制"><a href="#日志轮替机制" class="headerlink" title="日志轮替机制"></a>日志轮替机制</h3><ul><li><img src="https://i.loli.net/2021/09/11/eghKf6tTwm7F5SE.png" alt="image-20210911094618331"></li><li><img src="https://i.loli.net/2021/10/02/BCys6KwZLxPXYWq.png" alt="image-20210911094923484"></li></ul><h3 id="查看内存日志"><a href="#查看内存日志" class="headerlink" title="查看内存日志"></a>查看内存日志</h3><ul><li><img src="https://i.loli.net/2021/10/02/CmhdJnw6iWO2c5U.png" alt="image-20210911100055825"></li></ul><h2 id="Linux系统定制"><a href="#Linux系统定制" class="headerlink" title="Linux系统定制"></a>Linux系统定制</h2><ul><li><p><img src="https://i.loli.net/2021/10/02/Vefmp1qQhtb5w2r.png" alt="image-20210911100526906"></p></li><li><p><img src="https://i.loli.net/2021/10/02/FzpjGmlsbZOPov5.png" alt="image-20210911100547893"></p></li><li><p><img src="https://i.loli.net/2021/10/02/xt2XoEHV6GQKjBD.png" alt="image-20210911100648997"></p></li><li><p><img src="https://i.loli.net/2021/10/02/xpn2fhkwZabDmHy.png" alt="image-20210911105902166"></p></li></ul><h2 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h2><ul><li><img src="https://i.loli.net/2021/09/16/8lonwiTDzRKdONm.png" alt="image-20210916085659011"></li><li><img src="https://i.loli.net/2021/10/02/qsVDCEaeP3b5SK4.png" alt="image-20210916085857737"></li><li><img src="https://i.loli.net/2021/10/02/tSX961fmgWrDcJz.png" alt="image-20210916090127825"></li></ul><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><img src="https://i.loli.net/2021/09/16/27Y6S84BQqObyeF.png" alt="image-20210916134707189"></li></ul><h3 id="init中的main-c"><a href="#init中的main-c" class="headerlink" title="init中的main.c"></a>init中的main.c</h3><ul><li>void main(void)<img src="https://i.loli.net/2021/10/02/yCYS5kUosZ8rqIj.png" alt="image-20210916135629938"></li></ul><h2 id="Linux内核最新版和内核升级"><a href="#Linux内核最新版和内核升级" class="headerlink" title="Linux内核最新版和内核升级"></a>Linux内核最新版和内核升级</h2><ul><li><img src="https://i.loli.net/2021/09/16/V3Q6ewOc5rgUaiv.png" alt="image-20210916140739159"></li><li>yum update kernel //升级内核</li></ul><h2 id="Linux的系统与备份"><a href="#Linux的系统与备份" class="headerlink" title="Linux的系统与备份"></a>Linux的系统与备份</h2><ul><li><img src="https://i.loli.net/2021/09/16/kAPY93Tog6HqvIc.png" alt="image-20210916141423976"></li><li><img src="https://i.loli.net/2021/09/16/pC7JbONqBgntKiu.png" alt="image-20210916141437526"></li></ul><h3 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h3><ul><li><img src="https://i.loli.net/2021/10/02/WSEM4Hclg97nZBr.png" alt="image-20210916141611441"></li><li><img src="https://i.loli.net/2021/10/02/j1sSqMI2F6ALCEi.png" alt="image-20210916142500851"></li><li><img src="https://i.loli.net/2021/09/16/FVxC56kwhAWsMag.png" alt="image-20210916142531736"></li><li><img src="https://i.loli.net/2021/09/16/w9y21HprbZcg8jJ.png" alt="image-20210916142737952"></li></ul><h3 id="restore"><a href="#restore" class="headerlink" title="restore"></a>restore</h3><ul><li><img src="https://i.loli.net/2021/09/16/8VTNZmiv2uAa14I.png" alt="image-20210916145021305"></li><li><img src="https://i.loli.net/2021/10/02/iaphYOglA3vDcxK.png" alt="image-20210916145427461"></li><li><img src="https://i.loli.net/2021/10/02/tqgTYnFvfaxOdKJ.png" alt="image-20210916145446421"></li><li><img src="https://i.loli.net/2021/09/16/5tNaWfZy9BjR2JY.png" alt="image-20210916145520921"></li></ul><h2 id="Linux可视化管理webmin和bt运维工具"><a href="#Linux可视化管理webmin和bt运维工具" class="headerlink" title="Linux可视化管理webmin和bt运维工具"></a>Linux可视化管理webmin和bt运维工具</h2><h3 id="webin"><a href="#webin" class="headerlink" title="webin"></a>webin</h3><ul><li><img src="https://i.loli.net/2021/09/16/6G4NcMiBmHzE8sC.png" alt="image-20210916145705986"></li><li><img src="https://i.loli.net/2021/10/02/uJCGI3iT5crEVKL.png" alt="image-20210916145729555"></li><li><img src="https://i.loli.net/2021/10/02/ZJASdrzvkXN8YjF.png" alt="image-20210916145901813"></li></ul><h3 id="bt"><a href="#bt" class="headerlink" title="bt"></a>bt</h3><ul><li><img src="https://i.loli.net/2021/09/16/E71hejQXJcRlWUL.png" alt="image-20210916150649197"></li><li><img src="https://i.loli.net/2021/09/16/ZV7YtL1QHkOmUBu.png" alt="image-20210916151600943"></li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h2 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h2><p><img src="https://i.loli.net/2021/10/02/YsdbAwzPOylGuq4.png" alt="image-20210916152816598"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo写作格式与技巧</title>
    <link href="/2021/10/01/Hexo%E6%8A%80%E5%B7%A7%E4%B8%8E%E5%86%99%E4%BD%9C/"/>
    <url>/2021/10/01/Hexo%E6%8A%80%E5%B7%A7%E4%B8%8E%E5%86%99%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>更多详请查看<a href="https://hexo.io/docs/">Hexo文档</a>、<a href="https://hexo.fluid-dev.com/docs/start/">Fluid主题文档</a>、<a href="https://hexo.fluid-dev.com/">Fluid主题展示和功能介绍</a></p><h1 id="Hexo写作流程"><a href="#Hexo写作流程" class="headerlink" title="Hexo写作流程"></a>Hexo写作流程</h1><h2 id="创建新帖"><a href="#创建新帖" class="headerlink" title="创建新帖"></a>创建新帖</h2><ul><li><p>方法一</p><p>要创建新帖子或新页面，您可以运行以下命令：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p><code>post</code>是默认值<code>layout</code>，但您可以提供自己的。您可以通过编辑 中的<code>default_layout</code>设置来更改默认布局<code>_config.yml</code>。</p><p>Hexo 中有 3 种默认布局：<code>post</code>,<code>page</code>和<code>draft</code>. 他们每个人创建的文件都保存到不同的路径。新创建的帖子将保存到该<code>source/_posts</code>文件夹中。</p><p><img src="https://i.loli.net/2021/10/02/h2Bjabc7RuN1UXS.png"></p><p>如果您不希望使用主题处理文章（帖子/页面），请将<code>layout: false</code>其设置为头版。有关更多详细信息，请参阅<a href="https://hexo.io/docs/front-matter#Layout">本节</a>。</p></li><li><p>方法二</p><p>直接在目录下找 \source_posts,并在文件夹中添加写好的.md文件</p></li></ul><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br>也可简写为：<br>$ hexo g<br></code></pre></td></tr></table></figure><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><p>这一步也可以跳过，用于查看在本地查看生成的静态网页的效果，因为部署到服务器需要一定的时间，所以一般在本地先查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><p>这一步通常需要一定的时间，具体时间不等，需要多次刷新查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br>可简写为：<br>$ hexo d<br></code></pre></td></tr></table></figure><h2 id="清楚缓存"><a href="#清楚缓存" class="headerlink" title="清楚缓存"></a>清楚缓存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p>更多命令查看<a href="https://hexo.io/zh-cn/docs/commands.html">Hexo指令</a></p><h1 id="Hexo写作"><a href="#Hexo写作" class="headerlink" title="Hexo写作"></a>Hexo写作</h1><h2 id="文档名称"><a href="#文档名称" class="headerlink" title="文档名称"></a>文档名称</h2><ul><li>通常情况下Hexo 使用帖子标题作为其文件名。您可以编辑<code>new_post_name</code>设置<code>_config.yml</code>以更改默认文件名。例如，<code>:year-:month-:day-:title.md</code>将使用帖子创建日期作为文件名的前缀。您可以使用以下占位符：<img src="https://i.loli.net/2021/10/02/SxLoZitAIg1dfXH.png" alt="image-20211002100532390"></li></ul><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>之前，我们提到了 Hexo 中的一个特殊布局：<code>draft</code>. 使用此布局初始化的帖子将保存到该<code>source/_drafts</code>文件夹中。您可以使用该<code>publish</code>命令将草稿移动到<code>source/_posts</code>文件夹中。<code>publish</code>与<code>new</code>命令的工作方式类似。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo publish [布局] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>默认情况下不显示草稿。您可以<code>--draft</code>在运行 Hexo 时添加该选项或启用该<code>render_drafts</code>设置<code>_config.yml</code>以渲染草稿。</p><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><p>创建帖子时，Hexo 将根据文件<code>scaffolds</code>夹中的相应文件构建文件。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo 新照片“我的相册”<br></code></pre></td></tr></table></figure><p>当您运行此命令时，Hexo 将尝试<code>photo.md</code>在<code>scaffolds</code>文件夹中查找并基于它构建帖子。脚手架中提供以下占位符：</p><p><img src="https://i.loli.net/2021/10/02/KHGzyM5OVckYCDS.png" alt="image-20211002103859285"></p><p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/96774636">Hexo文章的Scaffolds脚手架</a></p><h2 id="支持格式"><a href="#支持格式" class="headerlink" title="支持格式"></a>支持格式</h2><p>以任何格式编写的 Hexo 支持帖子，只要安装了相应的渲染器插件即可。</p><p>例如，Hexo默认已安装<code>hexo-renderer-marked</code>并<code>hexo-renderer-ejs</code>安装，因此您可以<code>markdown</code>在<code>ejs</code>. 如果您已经<code>hexo-renderer-pug</code>安装，那么您甚至可以用 pug 模板语言编写您的帖子。</p><p>您可以重命名您的文章和改变文件扩展名<code>.md</code>来<code>.ejs</code>，然后HEXO将使用<code>hexo-renderer-ejs</code>来呈现文件，这样做对其他格式。</p><h2 id="文章头"><a href="#文章头" class="headerlink" title="文章头"></a>文章头</h2><p>Front-matter 是文件开头的 YAML 或 JSON 块，用于为您的作品配置设置。以 YAML 编写时，前面的内容以三个破折号结尾，以 JSON 编写时以三个分号结尾。</p><p>YAML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-string">标题：</span> <span class="hljs-string">Hello</span>  <span class="hljs-string">World</span><br><span class="hljs-string">日期：</span> <span class="hljs-number">2013</span> <span class="hljs-string">/7/13</span>  <span class="hljs-number">20</span> <span class="hljs-string">:46:25</span> <br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>JSON</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span>, <br><span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2013/7/13 20:46:25&quot;</span> <br>;;;<br></code></pre></td></tr></table></figure><p>markdown</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo写作格式</span>      <span class="hljs-string">//题目</span><br><span class="hljs-attr">date:</span>    <span class="hljs-string">//日期</span><br><span class="hljs-attr">tags:</span>             <span class="hljs-string">//标签</span><br><span class="hljs-attr">categories:</span>              <span class="hljs-string">//分类</span><br><span class="hljs-attr">index_img:</span>               <span class="hljs-string">//文章图片</span><br><span class="hljs-attr">description:</span>             <span class="hljs-string">//这是显示在首页的概述，正文内容均会被隐藏。</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>文章内容对应下方的位置，不设置title的话默认是文章内容，不是文件名</p><p><img src="https://i.loli.net/2021/10/02/2TnRSVeqIvltUFb.png" alt="image-20211002101243201"></p><p>更多格式如下：</p><p><img src="https://i.loli.net/2021/10/02/GE95OrNfeWax3hI.png" alt="image-20211002104846366"></p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>默认布局为<code>post</code>，根据 中<a href="https://hexo.io/docs/configuration#Writing"><code>default_layout</code></a>设置的值<code>_config.yml</code>。当文章中的布局被禁用 ( <code>layout: false</code>) 时，它将不会使用主题进行处理。但是，它仍然会被任何可用的渲染器渲染：如果一篇文章是用 Markdown 编写的，并且安装了 Markdown 渲染器（如默认的<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>），它将被渲染为 HTML。</p><p>无论布局如何，<a href="https://hexo.io/docs/tag-plugins">标签插件</a>总是被处理，除非被<code>disableNunjucks</code>设置或<a href="https://hexo.io/api/renderer#Disable-Nunjucks-tags">渲染器</a>禁用。</p><h2 id="类别和标签"><a href="#类别和标签" class="headerlink" title="类别和标签"></a>类别和标签</h2><p>只有帖子支持使用类别和标签。类别按顺序应用于帖子，从而形成分类和子分类的层次结构。标签都定义在同一层级上，因此它们出现的顺序并不重要。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">类别：<br><span class="hljs-bullet">- </span>运动<br><span class="hljs-bullet">- </span>棒球<br>标签：<br><span class="hljs-bullet">- </span>受伤<br><span class="hljs-bullet">- </span>格斗<br><span class="hljs-bullet">- </span>令人震惊<br></code></pre></td></tr></table></figure><p>如果要应用多个类别层次结构，请使用名称列表而不是单个名称。如果 Hexo 在帖子上看到任何以这种方式定义的类别，它将将该帖子的每个类别视为自己独立的层次结构。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">类别：<br><span class="hljs-bullet">- </span>[体育，棒球] <br><span class="hljs-bullet">- </span>[美国职棒大联盟，美国 联盟，波士顿 红 红袜] <br><span class="hljs-bullet">- </span>[美国职棒大联盟，美国的 同盟，新的 纽约 洋基队] <br><span class="hljs-bullet">- </span>对抗<br></code></pre></td></tr></table></figure><h1 id="Hexo语法"><a href="#Hexo语法" class="headerlink" title="Hexo语法"></a>Hexo语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ul><li>首先fluid不支持[toc]显示整个文章的目录</li></ul><p>标题的语法与markdown无区别，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">/*<br><span class="hljs-meta">#</span><span class="bash"> 一级标题</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 二级标题</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## 三级标题</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">### 四级标题</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#### 五级标题</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">##### 六级标题</span></span><br>(In addition: do not foget the space behind #.)<br>*/<br></code></pre></td></tr></table></figure><h2 id="字体Typeface"><a href="#字体Typeface" class="headerlink" title="字体Typeface"></a>字体Typeface</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">加粗  **内容**</span><br><span class="hljs-comment">代码高亮显示  ==内容==</span><br><span class="hljs-comment">删除线  ~~内容~~</span><br><span class="hljs-comment">斜体  *内容*</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>加粗 ：  <strong>加粗的内容</strong></p><p>代码高亮显示：  ==高亮的内容==</p><p>删除线：  <del>有删除线的内容</del></p><p>斜体： <em>斜体内容</em></p><h2 id="引用Quote"><a href="#引用Quote" class="headerlink" title="引用Quote"></a>引用Quote</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">&gt;引用内容</span><br><span class="hljs-comment">&gt;&gt;引用内容</span><br><span class="hljs-comment">&gt;&gt;&gt;yy内容</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><blockquote><p>内容</p><blockquote><p>内容</p></blockquote><blockquote><blockquote><p>内容</p></blockquote></blockquote></blockquote><h2 id="分割线Lines"><a href="#分割线Lines" class="headerlink" title="分割线Lines"></a>分割线Lines</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分割线1： </span><br><span class="hljs-comment">---</span><br><span class="hljs-comment">分割线2：</span><br><span class="hljs-comment">***</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>分割线1： </p><hr><p>分割线2：</p><hr><h2 id="图像Picture"><a href="#图像Picture" class="headerlink" title="图像Picture"></a>图像Picture</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//插入在线图片||本地图片 #注意必须用英文#</span><br>![图片名字](图片路径<span class="hljs-keyword">or</span>地址)<br>    如：![](C:\Users\Husile\Desktop\=\心理学\民大\<span class="hljs-number">98E1376</span>B2FA94D942168E531C228FECA.jpg)<br></code></pre></td></tr></table></figure><h5 id="插入本地图片"><a href="#插入本地图片" class="headerlink" title="插入本地图片"></a>插入本地图片</h5><p><a href="https://imgchr.com/i/DViYRA"><img src="https://s3.ax1x.com/2020/11/17/DViYRA.gif" alt="DViYRA.gif"></a></p><ul><li>利用==图床==工具，可将本地图片保存到云并生成相应连接</li></ul><p>插入网络链接图片</p><p><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1141259048,554497535&fm=26&gp=0.jpg" alt="test"></p><h2 id="超链接Hyperlink"><a href="#超链接Hyperlink" class="headerlink" title="超链接Hyperlink"></a>超链接Hyperlink</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//超链接语法</span><br>[名字](地址链接)<br>如：[我的给github](https:<span class="hljs-comment">//github.com/Bsheepcoder/New_thread_learn/tree/master)</span><br></code></pre></td></tr></table></figure><h5 id="超链接语法："><a href="#超链接语法：" class="headerlink" title="超链接语法："></a>超链接语法：</h5><p><a href="https://github.com/Bsheepcoder/New_thread_learn/tree/master">我的给github</a></p><h2 id="列表Listing"><a href="#列表Listing" class="headerlink" title="列表Listing"></a>列表Listing</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//无序列表 · 这种</span><br>- 内容<br>- 内容<br><span class="hljs-comment">//有序(1+.+名称)   要加空格</span><br>    <span class="hljs-number">1.</span> 哈哈<br>    <span class="hljs-number">2.</span> 嘻嘻<br></code></pre></td></tr></table></figure><h5 id="无序："><a href="#无序：" class="headerlink" title="无序："></a>无序：</h5><ul><li>内容1</li><li>内容2</li></ul><h5 id="有序："><a href="#有序：" class="headerlink" title="有序："></a>有序：</h5><ol><li>内容</li><li>内容</li><li></li></ol><h2 id="表格Tabulation"><a href="#表格Tabulation" class="headerlink" title="表格Tabulation"></a>表格Tabulation</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//表格代码很复杂，一般不用语言写</span><br>| <span class="hljs-number">1</span>    | <span class="hljs-number">0</span>    | <span class="hljs-number">0</span>    |<br>| ---- | ---- | ---- |<br>| <span class="hljs-number">0</span>    | <span class="hljs-number">1</span>    | <span class="hljs-number">0</span>    |<br>| <span class="hljs-number">0</span>    | <span class="hljs-number">0</span>    | <span class="hljs-number">1</span>    |<br>    <span class="hljs-comment">//直接右键插入/ctrl t</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">1</th><th align="center">0</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr></tbody></table><h2 id="另In-addition"><a href="#另In-addition" class="headerlink" title="另In addition"></a>另In addition</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//常用的快捷键也很好用</span><br>    <br>    ctrl <span class="hljs-number">1</span>  ~ <span class="hljs-number">6</span>     标题<br>    ctrl shift k/m  代码块或公式块<br>    ctrl t          插入表格  <br></code></pre></td></tr></table></figure><h2 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h2><ul><li><p><strong>问题原因</strong>：远程库与本地库不一致造成的，在hint中也有提示把远程库同步到本地库就可以了。</p><p><strong>解决办法</strong>：使用命令行：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull --rebase origin master<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190103111754961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RpZXRpbWUxOTQz,size_16,color_FFFFFF,t_70" alt="运行图象"></p><p>成功后即可push</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/30/hello-world/"/>
    <url>/2021/09/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
