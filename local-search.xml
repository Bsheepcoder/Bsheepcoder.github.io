<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>人工智能与炼金术</title>
    <link href="/2021/10/10/AIhistory/"/>
    <url>/2021/10/10/AIhistory/</url>
    
    <content type="html"><![CDATA[<h2 id="话说炼金术"><a href="#话说炼金术" class="headerlink" title="话说炼金术"></a>话说炼金术</h2><p><img src="https://i.loli.net/2021/10/08/TEPWU19gOSdRvNz.png" alt="炼金术士"></p><p>炼金术(中国类似炼丹)，一种魔法般的技艺，不论是古代中国、还是中世纪的西方,都有着一群信仰者不断的去探索。</p><p>由于我们再熟悉不过的科学巨人牛顿也曾经进行过大量的炼金术的试验，它常常出现在人们的幻想当中。</p><blockquote><p>在16世纪到18世纪，大约有4000本相关于炼金术的书籍出版。</p><p>从当时留下的诸多手稿、信札、笔记和文学作品中，可以轻松找到炼金术的痕迹。</p><p><img src="https://i.loli.net/2021/10/10/VJWnbXdRTUCYhOK.png" alt="炼金术法则"></p></blockquote><p>我们现代人看来这似乎是可笑的，以当时的技术，想把一抔铁渣变成金子，基本是不可能的。</p><p>即便是如今的科技也没有可行的方法，反而大量的研究表明是不可能的。</p><p>那么这些为之努力的探索者岂不是白白耗费了精力？</p><p>我想并没有。尽管我们今天的科学已经摆脱了神学和迷信，但是也不能磨灭那些古老的炼金术士在照明、炸药、实验化学等领域留下的印记。</p><p>他们甚至为现代科学打下了基础。</p><p><strong>当时那些充满“信仰”不知疲倦的探索的术士们并不知道自己的研究对以后的人们有怎样的影响。他们只是在冰山下的一角雕刻属于自己的花纹，漂流在历史的大海中。</strong></p><p>那么炼金术与人工智能有什么关系呢？下面由我细细道来。</p><h2 id="机器觉醒"><a href="#机器觉醒" class="headerlink" title="机器觉醒"></a>机器觉醒</h2><p>是谁先提出让机器去思考这个问题呢？<br>从古至今都有不少人想象一种机器有人一样的智能，也有不少人去实践，当然也有迷信神学的身影。但是要说真正在计算科学史上留名的第一人，那我们就不得不介绍这样一位传奇的计算科学家艾伦·图灵。</p><blockquote><p><img src="https://i.loli.net/2021/10/10/AMQl7Ct6BxPVvgD.png"></p><p><strong>艾伦·麦席森·图灵</strong>（1912年6月23日－1954年6月7日）是英国计算机科学家、数学家、逻辑学家、密码分析学家和理论生物学家，他被誉为计算机科学与人工智能之父。二次世界大战期间，（Hut 8）小组，负责德国海军密码分析。 期间图灵设计了一些加速破译德国密码的技术，包括改进波兰战前研制的机器Bombe，一种可以找到恩尼格玛密码机设置的机电机器。 图灵在破译截获的编码信息方面发挥了关键作用，使盟军能够在包括大西洋战役在内的许多重要交战中击败纳粹，并因此帮助赢得了战争。 </p></blockquote><p>图灵的传奇是他不仅在科学理论上提出新颖的理论，而且在第二次世界大战期间将计算科学的理论用于解决实际问题，成功破译了德国的密码技术，之后有人估计，图灵的贡献使二战提早结束两年。</p><p>当然，我们不需要被一长串的介绍吓到，关于这位大佬在人工智能领域，我们只需要记住它的两个重要贡献：</p><ul><li>图灵机</li><li>图灵测试（模仿游戏）</li></ul><p>那什么是图灵机和图灵测试？ 我不详细展开，只做简要的概括帮助理解。</p><h3 id="图灵机"><a href="#图灵机" class="headerlink" title="图灵机"></a>图灵机</h3><p><img src="https://i.loli.net/2021/10/08/ig27bQy9krRCcNM.png" alt="图灵机"></p><blockquote><p><strong>图灵机</strong>是图灵于1936年提出的一种将人的计算行为抽象化的数学逻辑机，其更抽象的意义为一种计算模型，可以看作等价于任何有限逻辑数学过程的终极强大逻辑机器。</p><p>图灵机就是指一个抽象的机器，它有一条无限长的纸带，纸带分成了一个一个的小方格，每个方格有不同的颜色。有一个机器头在纸带上移来移去。机器头有一组内部状态，还有一些固定的程序。在每个时刻，机器头都要从当前纸带上读入一个方格信息，然后结合自己的内部状态查找程序表，根据程序输出信息到纸带方格上，并转换自己的内部状态，然后进行移动。</p></blockquote><p>关于图灵机存在一个普遍的误解，这关系到图灵当初为论证<strong>可计算的数</strong>时提出的抽象的“计算机器”，然而我们在详细的了解了图灵机的运作过程之后你就会明白，图灵机实际上是指一台机器的一个特定的运行过程或使用方式，包括对初态和终态的划分，并不是一个特定的机器。这里有更多详细的内容可以参考<a href="https://www.thepaper.cn/newsDetail_forward_7683950">计算机不是只会 “计算”，图灵机也不是一台“机器”</a>、<a href="https://www.jianshu.com/p/095d80463509">图灵机的运作过程</a>。</p><p>这里有些抽象，本就是因为图灵机就是图灵抽象出来的，不必深究，但是这种让机器用于证明计算的方式一直被后来的科学家沿用，影响深远。</p><p>我们知道了什么是图灵机，再来看看另一个重要问题的提出，其中就包含了图灵测试。</p><h3 id="机器能思维吗？"><a href="#机器能思维吗？" class="headerlink" title="机器能思维吗？"></a>机器能思维吗？</h3><p><img src="https://i.loli.net/2021/10/09/Ed9XBO3T8my5Zca.png"></p><blockquote><p>如果他们发现一只鹦鹉可以回答一切问题，我会毫不犹豫宣布它存在智能。— 狄德罗</p></blockquote><p>其实早在1637年，笛卡尔就预言了图灵测试。</p><p>笛卡尔指出，机器能够与<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E9%A1%9E">人类</a>交互，但认为这样的机器不能作出适当的反应，但是任何人都可以。</p><p>因此，笛卡尔借此区分机器与人类。笛卡尔没有考虑到机器语言能力未来能够被克服。</p><p>其实哲学家们很早就开始探讨这一问题，有唯心和唯物两种观点，但是一直在争论之中。</p><p>没有人去真正的找到一种证明的方法，直到图灵发表了一篇划时代的论文。</p><p><img src="https://i.loli.net/2021/10/09/6P7vJd5XGeVcZzY.png" alt="计算机器与智能"></p><p>1950年，图灵在 MIND 期刊上发表了一篇题为《计算机器与智能》(Computing machinery and intelligence)的论文。</p><p>文中他预言了创造出具有真正智能的机器的可能性，并提出了图灵测试用于定义“智能”这一概念，最后对机器能否拥有思维这一问题有异议的不同声音进行了回答。</p><p>这在当时引起了轰动，关于这篇论文的译文可查看<a href="https://bsheepcoder.github.io/2021/10/07/%E6%9C%BA%E5%99%A8%E8%83%BD%E6%80%9D%E7%BB%B4%E5%90%97%EF%BC%9F/">计算机器与智能</a>。</p><p>通过译文我们就可以知道，图灵希望通过一种游戏的形式来回答“机器能思考吗？”这个元问题。文中介绍的测试场景是这样的：</p><p><img src="https://i.loli.net/2021/10/09/cGj2yn6SAueMVOi.png" alt="图灵测试"></p><blockquote><p>这个游戏需要三个人来玩，一个男人(A)，一个女人(B)和一个男女皆可的提问者(C)。</p><p>提问者呆在一个与另外两人相隔离的屋子里，游戏的目标是提问者要判断出外面哪个是男人，哪个是女人。</p><p>问者用标签X，Y指称外面的两个人，游戏结束时，他要说出“X是A，Y是B”或者“X是B，Y是A”。</p><p>提问者C允许向A和B提出下面这样的问题：</p><ul><li>C：X，请告诉我你头发的长度。</li></ul><p>现在假如X实际上是A，那么A必须回答。A在游戏中的目标是努力使C做出错误的判断，他的回答可以是：　　</p><ul><li>我的头发乌黑发亮，最长的一缕大概九英寸长。　</li></ul><p> 为了排除声音帮助提问者得出结论，问题的答案应该写出来，最好是打出来。理想的安排是，让两个屋子用远程打印通讯，也可以通过中间人传递答案。而B在这个游戏中的任务是努力帮助提问者，她的最优策略可能就是给出正确答案。她可以在她的答案中加入“我是女的，别听他的”这样的话，但是这并不能提供更多的帮助，因为男人A同样也能做出相似的评论。</p><p> 现在提出这样一个问题，“如果用机器代替A，将会发生什么情况？”同与两个人玩这个游戏相比，提问者判断错误的几率是否发生变化？这个问题取代了原问题“机器能思考吗? ”</p></blockquote><p>图灵测试的意义有多大呢？尽管到如今有很多组织、团队宣传自己通过了图灵测试，但是当那个所谓的智能出现在我们面前时，实际上我们可以很轻易的知道它并没有自己的思想，也不存在想人一样的智能。</p><blockquote><p>计算机首次通过图灵测试意味着什么？</p><p>意味着图灵测试该升级了。    –知乎</p></blockquote><p>下面是一个关于2208年图灵测试的漫画：</p><p><img src="https://i.loli.net/2021/10/09/roCROLp4V7x3dAU.png" alt="图灵测试漫画"></p><p>玩笑的同时，我找到西瓜书的作者南京大学的周志华教授有这样一段话：</p><blockquote><p>“对图灵测试的一个重要反思就是它可能混淆了 cheat human 与 think like human 的能力，做到前者并不需要能做到后者。这催生了替代图灵测试的<a href="https://en.wikipedia.org/wiki/Winograd_schema_challenge">维诺格拉德测试</a> 。”</p></blockquote><p>显然，图灵测试并不能满足人们对人工智能的幻想，维诺格拉德测试是近几年流行起来的测试，是图灵测试的改进版，旨在找到能够匹配人类表现的最佳系统。但是同样也存在一些漏洞和质疑，不论是什么测试，我们都可以很清楚的知道，真正的智能离我们还很远。</p><p>那现在的人工智能发展到什么地步了？什么时候才能有真正的智能出现？</p><p>为了解决这些问题，我们不得不先来看一看人工智能的发展。</p><p>看累了可以先休息一下再继续阅读，来杯卡布奇诺^-^ 。</p><p><img src="https://i.loli.net/2021/10/10/61DEafFRrnqcWjt.jpg" alt="bsWiqXPm7SrVG4F"></p><h2 id="人工智能科学简明史"><a href="#人工智能科学简明史" class="headerlink" title="人工智能科学简明史"></a>人工智能科学简明史</h2><blockquote><p>“技术日新月异，人类生活方式正在快速转变，这一切给人类历史带来了一系列不可思议的奇点。我们曾经熟悉的一切，都开始变得陌生。”——约翰·冯·诺依曼(John von Neumann)</p></blockquote><p>下面我们就进入人工智能科学的起点。</p><h3 id="黎明"><a href="#黎明" class="headerlink" title="黎明"></a>黎明</h3><p>在20世纪40年代初期，许多不同领域的科学家（数学，心理学，工程学，经济学和政治学等）都对图灵提出的问题感兴趣，便都想着手去研究、探讨制造人工大脑的可能性。</p><p>人工智能科学当然不是凭空出现的，在这个系统学科被确定之前，就有许多先贤已经涉足这个领域,包括图灵在内的众多计算科学家，例如：</p><blockquote><p>1951年，马文·明斯基（Marvin Minsky）建立了一个神经网络（SNARC），用于模拟神经信号的传递，在人工智能领域有一定的开创作用。这也被认为是人工智能的起源。</p><p>1955年，赫伯特·西蒙（Herbert Simon）、艾伦·纽维尔（Allen Newwell）实现了一个名为“逻辑理论家”（Logic Theorist）的程序，用来模拟人类解决问题，证明了一本大学数学教科书里52个定理的38个。(后来经过改进，52个定理都被证明了。)，后来这个程序被称为“史上首个人工智能程序”。</p></blockquote><p>黎明以至，所有从事相关研究的工作者都知道新事物将冉冉升起。</p><h3 id="初秋的会议"><a href="#初秋的会议" class="headerlink" title="初秋的会议"></a>初秋的会议</h3><p>时间来到1956年，当时科学界对人工智能没有统一的名称命名，但是对人工智能这一类问题的科学研究已经是许多人关注的方向，因此在这样一个特殊的结点，众多科学家齐聚达特茅斯学院召开了著名的<a href="https://zh.wikipedia.org/wiki/%E8%BE%BE%E7%89%B9%E7%9F%9B%E6%96%AF%E4%BC%9A%E8%AE%AE">达特茅斯会议</a>，这次大会标志着“人工智能”这一概念的诞生。</p><p><img src="https://i.loli.net/2021/10/09/OmYIgp4EzuNvtZK.png" alt="达特茅斯学院"></p><h3 id="熊熊炉火"><a href="#熊熊炉火" class="headerlink" title="熊熊炉火"></a>熊熊炉火</h3><p>在这次会议之前，其实就已经有了小规模的讨论，但是并不敬人意。其中包含了贝尔实验室的香浓所编的文集，但是香浓对智能并不是很感兴趣：</p><blockquote><p>1953年夏天，麦卡锡和明斯基都在贝尔实验室为香农打工。香农那时的兴趣是图灵机以及是否可用图灵机作为智能活动的理论基础，麦卡锡向香农建议编一本文集，请当时做智能研究的各位大佬贡献文章，这本文集直到1956年才以《自动机研究》(Automata Studies)为名出版，这个书名最后是香农起的，他不想花里胡哨，但麦卡锡认为这没有反映他们的初衷。</p></blockquote><p>贝尔实验室是相当有名的，香浓本人可能对推动人工智能发展这一功绩可能毫不在意，但是确实失去了一个很好的机会。麦卡锡本人看到自己的想法不能被很好的体现，自然想着筹备后续的计划。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/John_McCarthy_Stanford.jpg/220px-John_McCarthy_Stanford.jpg" alt="John McCarthy Stanford.jpg"></p><p>那么这场会议的提议者<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%BF%B0%C2%B7%E9%BA%A6%E5%8D%A1%E9%94%A1">约翰·麦卡锡</a>（J. McCarthy），当时在会议开办前，关于人工智能这个名字的来源还有一个这样的小插曲：</p><blockquote><p>麦卡锡给这个第二年的活动起了个当时看来别出心裁的名字：“人工智能夏季研讨会”(Summer Research Project on Artificial Intelligence)。普遍的误解是“人工智能”这个词是麦卡锡想出来的，其实不是。麦老晚年回忆也承认这个词最早是从别人那里听来的，但记不清是谁。后来英国数学家菲利普.伍德华(Woodward)给《新科学家》杂志写信说他是AI一词的始作俑者，麦卡锡最早是听他说的，因为他1956年曾去MIT交流，见过麦卡锡。但麦卡锡的建议书1955年就开始用“人工智能”了，人老了回忆真不靠谱。当事人除了明斯基之外，都已仙逝，这事恐怕要成悬案了。</p></blockquote><h3 id="盛宴开始"><a href="#盛宴开始" class="headerlink" title="盛宴开始"></a>盛宴开始</h3><p>刚刚入秋的新罕布什尔州汉诺威镇，冷气已经席卷，但是科学家们对新事物的诞生的热情不减，会议在众人的支持下顺利召开。达特茅斯研讨会进行了两个月，其中，纽厄尔和西蒙公布的程序“逻辑理论家”（Logic Theorist）引起参会者极大的兴趣。</p><p>前面介绍过这个程序模拟人证明符号逻辑定理的思维活动，并成功证明了《数学原理》第2章52个定理中的38个定理，被认为是用计算机探讨人类智力活动的第一个真正成果，也是图灵关于机器可以具有智能这一论断的第一个实际证明。此外，逻辑理论家开创了机器定理证明这一新的学科领域。</p><p>来下面来一张帅哥海报，哈哈~</p><img src="https://i.loli.net/2021/10/09/vyX8fTr35gtzw2m.png" alt="image-20211009163813765" style="zoom:80%;" /><p>图片中的都是参会的各个领域的大佬，份量都是顶级的：</p><blockquote><p>John McCarthy：数学博士，发明Lisp语言、斯坦福大学人工智能实验室的主任、人工智能之父。<br>Marvin  Minsky：数学家，建立了一个神经网络、人工智能框架理论的创立者、人工智能之父。<br>Claude  Shannon：数学家，信息论创始人、引入信息熵。<br>Ray Solomonoff：机器学习的先驱，算法概率论的创始人，通用概率分布之父，通用归纳推理理论的创建者。<br>Alan Newell：计算机科学和认知信息学领域的科学家，信息处理语言发明者，写了该语言最早的两个AI程序。<br>Herbert Simon：计算机领域著名科学家，获得”诺贝尔经济学奖“，计算机领域的“图灵奖”，罕见的通才。<br>Arthur Samuel：是计算机游戏和人工智能领域的先驱，“机器学习”术语的创造者。<br>Oliver Selfridge：模式识别的奠基人，后来领导了MAC项目，后演变为麻省理工学院最大的实验室MIT CSAIL。<br>Nathaniel Rochester：IBM 701总设计师，编写了第一个汇编语言。</p></blockquote><p><img src="https://i.loli.net/2021/10/09/75mR6Xe3FgbPEls.png" alt="2006年达特茅斯会议当事人重聚，左起：摩尔、麦卡锡、明斯基、塞弗里奇、所罗门诺夫。"></p><p>会议的内容大致如下：</p><ul><li>自动计算机（自动指可编程）</li><li>如何为计算机编程，使其能够使用语言</li><li>神经网络</li><li>计算规模理论</li><li>自我改进（指机械学习）</li><li>抽象</li><li>随机性与创造性</li></ul><p>但是会上学者们对“人工智能”这个词并没取得完全共识，很多人认为啥事一加“人工”就变味了。纽厄尔和司马贺一直主张用“复杂信息处理”这个词，以至他们发明的语言就叫IPL(Information Processing Language)。他们从某种意义上说偏功能学派，也就是说找到智能的功能不一定非得依靠结构相同或相似。图灵机和递归函数等价，但结构完全不同，所以他们强调“信息处理”，他们俩一开始颇不喜“人工智能”几个字。</p><p><img src="https://i.loli.net/2021/10/09/XQWnmNACls2rkd1.png"></p><p>但是这并没有阻止“人工智能”这一说法在AI的学者中广为流传，直至第一次人工智能的寒冬，才彻底被学界所知。</p><blockquote><p>“人工智能”一词真正被学界接受要到1965年，德雷弗斯（Hubert Dreyfus）发表了著名的《炼金术与人工智能》报告，这一报告对当时人工智能的研究提出质疑，意图说明这些研究是没有基础的无用功。由于报告标题与内容过于大胆，最初兰德公司仅以备忘录的方式发布了油印版，直至1967年，兰德公司才正式发布了这一报告的印刷版。该报告后来成为兰德公司销量最高的报告之一，在AI学者中广为流传。</p></blockquote><p>人工智能是如何经历第一次发展低潮的，我们稍后再讲。</p><p>具体的学术名称是根据定义来确定的，讲到这里我们就不得不深入了解一下，人工智能中的智能，在学者们眼中究竟是什么？</p><h3 id="智能元问题"><a href="#智能元问题" class="headerlink" title="智能元问题"></a>智能元问题</h3><img src="https://i.loli.net/2021/10/09/WHLaGMRzjQ1XCsB.png" alt="image-20211009181835641" style="zoom:50%;" /><p>我常常在思索人是如何思考的？是因为有灵魂吗？还是大脑内神经元的交互作用？尚未有明确的答案，但是我曾在《生物心理学》中看到过这样一句话：</p><blockquote><p> 如果意识是没有实体的，那它如何去影响物质的身体呢？</p></blockquote><p>这句话似乎表明了一些东西，但仍存很多疑虑，我们可以先把这个问题放在一边。就像我们还没有研究出人类智能的起源，那么我们就不能去定义它。尽管有许多科学家已经发表了自己的看法：</p><blockquote><p>有人从生物学角度定义为“中枢神经系统的功能”，有人从心理学角度定义为“进行抽象思维的能力”，甚至有人同义反复地把它定义为“获得能力的能力”，或者不求甚解地说它“就是智力测验所测量的那种东西”。</p></blockquote><p>这些定义并未被人们所普遍接受。既然连人类智能都无法给出精确的定义，对人工智能也只好众说纷纭了。例如：</p><ul><li>西蒙认为：AI是学会怎样编制计算机程序完成机智的行为，学习人类怎样做这些机智行为。</li><li>明斯基则认为人工智能一方面帮助人的思考，另一方面使计算机更有用。</li><li>鉴于图林是用行为来判断机器是否具有智能，麻省理工学院温斯顿（P. Winston）在AI教科书里下定义说：“人工智能就是研究如何使计算机去做过去只有人才能做的智能的工作。”</li></ul><p>事实上，我怎么对于什么是人类智能（或者说智力），科学界至今还没有给出令人满意的答案。</p><p>难道一切都到此为止了吗？并没有。</p><img src="https://media2.giphy.com/media/777Aby0ZetYE8/giphy.gif?cid=ecf05e4789hlob1psu2f5wzlkofi85q8vyrbkj8lmdlczr3z&rid=giphy.gif&ct=g" alt="Think Winnie The Pooh GIF" style="zoom:50%;" /><p>关于这个<strong>人工智能的元问题</strong>，即便没有结果我们当然也可以坐下来，好好研究一晚上、一个星期，甚至一整年。但是人工智能的发展不会因此停下脚步，众多科学家另辟蹊径，让人工智能这颗树苗开枝散叶。</p><p><strong>往后的讲述，我不想通过哲学的派别来介绍人工智能的发展，我觉得这并不利于初学者理解发展的联系，过多的阐述抽象的思想会让初学者有理解上的负担，因此我旨在用具体的技术的发展来讲述人工智能的兴衰。</strong></p><h3 id="AI大发现年代（1956-1974）"><a href="#AI大发现年代（1956-1974）" class="headerlink" title="AI大发现年代（1956 - 1974）"></a>AI大发现年代（1956 - 1974）</h3><p>达特茅斯会议之后，许多研究者被强大的号召力所吸引，那种对未知领域的探索精神也同样鼓舞着众多学者孜孜不倦。这一阶段开发出的程序堪称神奇，从50年代后期到60年代涌现了大批成功的AI程序和新的研究方向。下面列举其中最具影响的几个。</p><ul><li>专家系统</li></ul><blockquote><p>1965年， 在斯坦福大学化学专家的配合下，费根鲍姆研制的第一个专家系统DENDRAL是化学领域的“专家”。在输入化学分子式和质谱图等信息后，它能通过分析推理决定有机化合物的分子结构，其分析能力已经接近、甚至超过了有关化学专家的水平。该专家系统为AI的发展树立了典范，其意义远远超出了系统本身在实用上创造的价值。在费根鲍姆发表演讲后， 专家系统如同雨后春笋迅速遍及世界各地。</p><p>为继承DRNDRAL的衣钵，化学领域判断结构的专家系统大量涌现，有判断蛋白质结构的，有判定原子排列结构的，有推论未知化合物分子结构的，目前已呈汗牛充栋之势。此外，在极其广泛的领域， 人工智能研究者构建了不计其数的“电脑专家” 。 如数学专家MACSYMA，农业专家PLANT，生物专家MOLGEN，地质探矿专家PROSPECTOR，教育专家GUIDON，法律专家LDS，军事专家ACES、ADEPT、ANALYST等系统。</p></blockquote><ul><li></li><li><p>搜索式推理</p><img src="https://i.loli.net/2021/10/09/WYoXZICczNQBRMa.png" alt="image-20211009150655285" style="zoom:67%;" /><blockquote><p>许多AI程序使用相同的基本算法。为实现一个目标（例如赢得游戏或证明定理），它们一步步地前进，就像在迷宫中寻找出路一般；如果遇到了死胡同则进行回溯。这就是“搜索式推理”。</p></blockquote><p>这个问题的困难就是随着逻辑岔路的增多，问题的规模是成指数级增长的，因此在这一问题的解决上，多个计算科学家从包括几何定理、目标和子目标等思路做出程序或系统来解决问题。</p></li><li><p>机器数学家</p><img src="https://media4.giphy.com/media/3UBa2cTg7NDA4/giphy.gif?cid=ecf05e4782rwnscjry30s1zo1lu1u8xd1kbb5b1ctr0pz6qf&rid=giphy.gif&ct=g" alt="health ai GIF" style="zoom:50%;" /><p>这是一个华裔科学家的例子。如今这位王浩教授在国内鲜有人知，但却是在当时有着不菲的成绩，足以在人工智能的历史上留下一笔。</p></li></ul><blockquote><p>在纽厄尔和赫伯特·西蒙之后，美籍华人学者、洛克菲勒大学教授王浩在“自动定理证明”上获得了更大的成就。</p><p>1959年，王浩用他首创的“王氏算法”，在一台速度不高的IBM704电脑上再次向《数学原理》发起挑战。不到9 分钟，王浩的机器把这本数学史上视为里程碑的著作中全部（350条以上） 的定理，统统证明了一遍。</p><p>该书作者、数学大师罗素得知此事后感慨万端，他在信里写到：“我真希望，在怀海特和我浪费了10年的时间用手算来证明这些定理之前，就知道有这种可能。”王浩教授因此被国际上公认为机器定理证明的开拓者之一。</p></blockquote><p>​    另外在数学证明方面，还有一个有说服力的例子，那就是四色定理的证明，这里不再展开。</p><ul><li><p>自然语言</p><img src="https://i.loli.net/2021/10/09/tBjynrCL42HKNqP.png" alt="语义网" style="zoom:80%;" /><p>自然语言相对视觉方面是最先有突破的领域，因为语言相对规则有序，很自然的联系到能否用计算机来处理。</p><img src="https://i.loli.net/2021/10/09/23vn1JqdFm8GZbi.png" alt="image-20211009154610224" style="zoom:80%;" /><p>Joseph Weizenbaum的ELIZA是第一个聊天机器人，可能也是最有趣的会说英语的程序。与ELIZA“聊天”的用户有时会误以为自己是在和人类，而不是和一个程序，交谈。但是实际上ELIZA根本不知道自己在说什么。点击旁边就可进入到聊天页面<a href="https://web.njit.edu/~ronkowit/eliza.html">与ELIZA聊天吧</a>。</p></li><li><p>感知机</p><img src="https://th.bing.com/th/id/OIP.iKaVWo6XFoQug0nZPK2xAQHaEK?pid=ImgDet&rs=1" alt="See the source image" style="zoom: 80%;" /><p>第一眼看到这张图肯定会有许多不解，我们可以忽略它的符号表示，简单的看图像的样式，我们就可以很容易的联想到一种组成思维必备的元素那就是神经元。</p><blockquote><p><strong>感知器</strong>（英语：Perceptron）是Frank Rosenblatt在1957年就职于<a href="https://ws.wiki.gaogevip.com/w/index.php?title=%E5%BA%B7%E5%A5%88%E5%B0%94%E8%88%AA%E7%A9%BA%E5%AE%9E%E9%AA%8C%E5%AE%A4&action=edit&redlink=1">康奈尔航空实验室</a>（Cornell Aeronautical Laboratory）时所发明的一种<a href="https://ws.wiki.gaogevip.com/baike-%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">人工神经网络</a>。它可以被视为一种最简单形式的<a href="https://ws.wiki.gaogevip.com/baike-%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">前馈神经网络</a>，是一种二元<a href="https://ws.wiki.gaogevip.com/baike-%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB%E5%99%A8">线性分类器</a>。</p></blockquote><p> 可以说罗森布拉特就是人工神经网络的开山鼻祖，它是最简单的机器学习模型算法。如今的深度学习神经网络，依然有感知机的理论思想。</p></li></ul><p>这时候的学者们普遍给予人工智能的发展极其乐观的估计，比较出名的便是那四大预言：</p><blockquote><ul><li>1958年，艾伦·纽厄尔和赫伯特·西蒙：「十年之内，数字计算机将成为西洋棋世界冠军。」 「十年之内，数字计算机将发现并证明一个重要的数学定理。」</li><li>1965年，赫伯特·西蒙：「二十年内，机器将能完成人能做到的一切工作。」</li><li>1967年，马文·闵斯基：「一代之内……创造『人工智慧』的问题将获得实质上的解决。」</li><li>1970年，马文·闵斯基：「在三到八年的时间里我们将得到一台具有人类平均智能的机器。」</li></ul></blockquote><p>此时的资助可以说是无条件的，谁曾想凛冬将至…..</p><h3 id="AI的第一次寒冬（1974-1980）"><a href="#AI的第一次寒冬（1974-1980）" class="headerlink" title="AI的第一次寒冬（1974 - 1980）"></a>AI的第一次寒冬（1974 - 1980）</h3><p>由于前期AI研究者们过于乐观的估计，未能对自己选择的研究课题有正确的判断，使之前的承诺不能兑现，导致大量的资助流失。这和后来的日本要研制第五代计算机如出一辙，还是没有吸取教训呀。</p><blockquote><p>1965年12月，休伯特·德雷福斯以兰德公司顾问的身份，发表了编号为P-3244的《人工智能与炼金术》的研究报告，对兰德公司本身主导的人工智能（以下简称AI）研究提出了重大理论挑战，1972年德雷福斯以该报告为基础出版了《计算机不能做什么——人工智能的极限》，该书与1966年美国国家科学院ALPAC报告，1973年英国科学研究理事会的LightHill报告一起，标志着AI发展历史上的第一次寒冬。</p></blockquote><p>哲学家休伯特·L·德雷福斯认为：过去AI领域的蓬勃发展是基于少量的数据，以及基本的定理式的计算，与正在的智能所需的复杂程度不再同一个量级，在计算机上模拟认知过程的尝试遇到了比预期更大的困难。当中还有一个形象的比喻，真正的智能好比地球到月亮，AI现在的发展不过只是在大气层飞罢了。</p><p>当时的AI研究者们遇到了瓶颈，不少局限显现出来：</p><ul><li>计算机的运算能力</li><li>计算复杂性和指数爆炸</li><li>常识与推理</li><li>莫拉维克悖论</li><li>框架和资格问题</li></ul><p>再加上《人工智能与炼金术》这一研究报告的推动，更多的人们对人工智能发展的前景失去希望，随之而来的就是资金缩减，不少学校也出现了批评的声音，感知机等神经网络算法也因为1969年Minsky和Papert出版的著作《感知器》提出的批评而没落。</p><p>如今有人找到休伯特教授，提出了当初的疑问：</p><blockquote><p><strong>问：</strong>休伯特教授，您好，我们首先想了解的是，您从现象学出发对人工智能提出一些看法，是否起到了作用？</p><p><strong>休伯特：</strong>我对哲学家们能够充当科学技术的批判者这一角色很感兴趣。因此，我作为一名哲学家，曾受政府基金管理部门(比如国防部)的邀请做他们的投资顾问。他们问我，向符号化的人工智能提供资助，是否有价值。我说，“肯定没有价值”。于是，他们停止了对这个领域的资助，然后，人工智能就进入所谓的“寒冬”期。这意味着，没有人再从事这项工作。我不能说，这是我造成的，我只能说，我的看法被当局采纳了，我赢了。</p></blockquote><p>我不禁想说，这老头子说得很有道理。</p><h3 id="AI的复兴（1980-1987）"><a href="#AI的复兴（1980-1987）" class="headerlink" title="AI的复兴（1980-1987）"></a>AI的复兴（1980-1987）</h3><p>历史总是螺旋上升的，我们不难判断，在长期的销声匿迹之后又会有这新的事物出现。</p><blockquote><p> 在80年代，一类名为“<a href="https://zh.wikipedia.org/wiki/%E4%B8%93%E5%AE%B6%E7%B3%BB%E7%BB%9F">专家系统</a>”的AI程序开始为全世界的公司所采纳，而“知识处理”成为了主流AI研究的焦点。日本政府在同一年代积极投资AI以促进其第五代计算机工程。80年代早期另一个令人振奋的事件是John Hopfield和David Rumelhart使联结主义重获新生。AI再一次获得了成功。</p></blockquote><ul><li><p>专家系统</p><p>“长江后浪推前浪”，1977年，曾是赫伯特·西蒙的研究生、斯坦福大学青年学者费根鲍姆（E.Feigenbaum），在第五届国际人工智能大会上提出了“知识工程”的概念，标志着AI研究从传统的以推理为中心，进入到以知识为中心的新阶段。人工智能重新获得人们的普遍重视，逐步跨进了复兴期。</p><p>专家系统在AI大发现年代就已经出现，只不过在第二次浪潮时达到了顶峰。</p></li></ul><blockquote><p>在大学的一次讲演中，费根鲍姆向听众发起挑战：“各位正在研究博弈问题，下棋和逻辑推理都属于博弈。假如你们解决了下棋和逻辑推理，那么博弈问题也就得到了解决，各位正在做的仅此而已。请大家跨入真实世界，努力解决现实世界中的问题吧！”他具体介绍了他们开发的第一个“专家系统”，并提出“知识库”、“知识表达”和“知识工程”等一系列全新的概念。</p><p>要说明什么是“专家系统”，必须弄清什么是人类“专家”。一个人要成为专家，至少必须掌握某一学科渊博的知识，具有丰富的实践经验，能解决一般人不能够解决的疑难问题。专家的数量和质量标志着一个国家、一个时代的科学水平。</p></blockquote><ul><li><p>Hopfield神经网络</p><p>神经网络在1980年代复兴归功于物理学家约翰·霍普菲尔德（Hopfield）。</p><blockquote><p>1982年，霍普菲尔德提出了一种新的神经网络，可以解决一大类模式识别问题，还可以给出一类组合优化问题的近似解。这种神经网络模型后被称为Hopfield神经网络。</p></blockquote><p>Hopfield神经网络是一种递归神经网络，由约翰.霍普菲德在1982年发明。Hopfield网络是一种结合存储系统和二元系统的神经网络。它保证了向局部极小的收敛，但收敛到错误的局部极小值（local minimum），而非全局极小（global minimum）的情况也可能发生。</p><p>Hopfield网络也提供了模拟人类记忆的模型。Hopfield网络原理基于Lyapunov稳定性定理和LaSalle不变性定理。对于初次接触Hopfield网络的非控制领域的人来说，Hopfield网络的核心理论晦涩难懂。本文忽略艰深的理论，取而代之的利用应用例子来介绍Hopfield神经网络的工作原理。一旦建立了Hopfield神经网络的总体认识后，再去细究其理论基础（书上及网上博客）就会有高瞻远瞩的感觉，最终完全掌握Hopfield神经网络及其思想。</p></li><li><p>第五代计算机</p><blockquote><p>1981年，日本经济产业省拨款八亿五千万美元支持<a href="https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%BA%94%E4%BB%A3%E9%9B%BB%E8%85%A6">第五代计算机</a>项目。其目标是造出能够与人对话，翻译语言，解释图像，并且像人一样推理的机器。令“芜杂派”不满的是，他们选用<a href="https://zh.wikipedia.org/wiki/Prolog">Prolog</a>作为该项目的主要编程语言。</p></blockquote><p>然而，“五代机”的命运是悲壮的。1992年，因最终没能突破关键性的技术难题，无法实现自然语言人机对话、程序自动生成等目标，导致了该计划最后阶段研究的流产，渊一博也不得不重返大学讲坛。也有人认为，“五代机”计划不能算作失败，它在前两个阶段基本上达到了预期目标。 1992年6月，就在“五代机”计划实施整整10年之际，ICOT展示了它研制的五代机原型试制机，由64台处理器实现了并行处理，已初步具备类似人的左脑的先进功能，可以对蛋白质进行高精度分析，已经在基因研究中发挥了作用。</p><p>　　流产也好，失败也罢，历史已经给“五代机”划上了句号，现实迫使人们寻找研制智能电脑新的途径。日本民族是顽强的，就在1992年，它重新开始实施“现实世界计算机”计划，接着研制具有类似于人的右脑功能的计算机。</p></li></ul><h3 id="AI的第二次寒冬（1987-1993）"><a href="#AI的第二次寒冬（1987-1993）" class="headerlink" title="AI的第二次寒冬（1987-1993）"></a>AI的第二次寒冬（1987-1993）</h3><blockquote><p>80年代后期到90年代初期这段时间，人工智能在经历了一系列金融挫折后进入了第二个冬天。起初由于苹果公司和IBM生产台式电脑，专家系统和很多硬件公司日渐衰落，后来加之宣传方面的问题以及越来越少的投资者等综合因素再次导致人们对人工智能的关注度下降。</p></blockquote><p>专家系统在备受关注后，也遇到了瓶颈，不久之后很多人也转向失望。这些原理上研究的停滞导致大量财政削减，整个人工智能学科的发展受到了阻碍。</p><h3 id="AI稳定期（1993-2011）"><a href="#AI稳定期（1993-2011）" class="headerlink" title="AI稳定期（1993-2011）"></a>AI稳定期（1993-2011）</h3><blockquote><p>此时的学者已经充分的反思了学科发展的缺陷，每一步都谨慎小心。“实现人类水平的智能”这一最初的梦想曾在60年代令全世界的想象力为之着迷，其失败的原因至今仍众说纷纭。各种因素的合力将AI拆分为各自为战的几个子领域，有时候它们甚至会用新名词来掩饰“人工智能”这块被玷污的金字招牌。</p></blockquote><ul><li><p>深蓝</p><p>199年俄罗斯国际象棋大师加里·卡斯帕罗夫（Garry Kasparov）输给了人工智能深蓝（Deep Blue），引起了全球轰动。到了这个时代，计算机的处理能力已经有了质的飞跃。</p><blockquote><p>深蓝是美国<a href="https://baike.baidu.com/item/IBM/9190">IBM</a>公司生产的一台超级<a href="https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E8%B1%A1%E6%A3%8B/80888">国际象棋</a>电脑，重1270公斤，有32个大脑（微处理器），每秒钟可以计算2亿步。“深蓝”输入了一百多年来优秀棋手的对局两百多万局。</p></blockquote><p>深蓝的成功并不是人工智能理论框架的进步，而是由于当时的硬件和算法达到了高度的吻合，研究人员不惜专门研究适用于下棋算法的硬件来达到这样一个效果。但是不能否认，效果是良好的，很多人又对人工智能重拾信心。</p></li><li><p>摩尔定律</p><p>摩尔定律是英特尔创始人之一<a href="https://baike.baidu.com/item/%E6%88%88%E7%99%BB%C2%B7%E6%91%A9%E5%B0%94/1085446">戈登·摩尔</a>的经验之谈，其核心内容为：</p><blockquote><p>集成电路上可以容纳的晶体管数目在大约每经过18个月便会增加一倍。换言之，处理器的性能每隔两年翻一倍。</p></blockquote><p>摩尔定律是内行人摩尔的经验之谈，汉译名为“定律”，但并非自然科学定律，它一定程度揭示了信息技术进步的速度。</p><p>这样高的计算机迭代速度支撑着如今的计算机运行庞大的深度学习算法，但摩尔定律在现如今已经有些放缓。</p></li><li><p>深层神经网络</p><p>功夫不负有心人，2006年Hinton和学生发表了利用RBM编码的深层神经网络的Science Paper：Reducing the Dimensionality of Data with Neural Networks，不过回头来看，这篇paper在当今的实用性并不强，它的更大作用是把神经网络又推回到大家视线中，利用单层的RBM自编码预训练使得深层的神经网络训练变得可能，但那时候Deep learning依然争议很多，最终真正爆发是2012年的ImageNet的夺冠，这是后话。</p></li></ul><h3 id="AI-赋能时代（2011-至今）"><a href="#AI-赋能时代（2011-至今）" class="headerlink" title="AI+赋能时代（2011-至今）"></a>AI+赋能时代（2011-至今）</h3><p>这个阶段AI的各个领域都有着快速的发展。</p><ul><li><p>大数据</p><p>近20年是计算机以及互联网快速普及的时期，不仅几乎所有的企业、政府单位，甚至包括绝大部分的个人都可以在网络上产生数据，大数据时代悄然来临。</p><blockquote><p>麦肯锡全球研究院在一份题为《大数据：创新、竞争和生产力的下一个前沿领域》的报告中估计，到2009年，美国经济所有行业中具有1000名以上员工的公司都至少平均拥有一个200兆兆字节的存储数据。</p></blockquote><p>相信现在的存储数据也已经不是在一个量级上了，就是因为有这样大量的数据，使得机器可以通过神经网络来大量的学习。这在之前的发展时期几乎是不可能的，因此深度学习为什么能引领第三次浪潮也很容易理解了。</p></li><li><p>卷积神经网络</p><p>首先介绍一下ImageNet：</p><blockquote><p><strong>ImageNet</strong>项目是一个大型可视化<a href="https://en.wikipedia.org/wiki/Database">数据库</a>设计用于使用<a href="https://en.wikipedia.org/wiki/Outline_of_object_recognition">可视对象识别软件</a>的研究。该项目已经对超过 1400 万张图像进行了手工注释，以指示所描绘的对象，并且在至少 100 万张图像中，还提供了边界框。这里不得不提一下华人科学家李飞飞，她是这个项目主要的推动者。</p><p><a href="https://www.ted.com/talks/fei_fei_li_how_we_re_teaching_computers_to_understand_pictures?language=en">这里有一段李飞飞TED的视频感兴趣可以看一下</a></p></blockquote><p>由此产生的年度竞赛现在被称为 ImageNet 大规模视觉识别挑战赛 (ILSVRC)。ILSVRC 使用仅包含 1000 个图像类别或“类”的“修剪”列表，包括按完整 ImageNet 模式分类的 120 个狗品种中的 90 个。</p><p>2010 年代，图像处理取得了巨大进步。2011 年左右，一个好的 ILSVRC 分类 top-5 错误率为 25%。2012 年，一个名为<a href="https://en.wikipedia.org/wiki/AlexNet">AlexNet</a>的深度<a href="https://en.wikipedia.org/wiki/Convolutional_neural_network">卷积神经网络</a>达到了 16%；在接下来的几年里，top-5 错误率下降到几个百分点。虽然 2012 年的突破“结合了之前所有的部分”，但显着的数量改进标志着全行业人工智能热潮的开始。</p></li><li><p>AlphaGo</p><p>这个离我们就很近了，我做简单介绍</p><blockquote><p>阿尔法围棋（AlphaGo）是第一个击败人类职业<a href="https://baike.baidu.com/item/%E5%9B%B4%E6%A3%8B/111288">围棋</a>选手、第一个战胜<a href="https://baike.baidu.com/item/%E5%9B%B4%E6%A3%8B%E4%B8%96%E7%95%8C%E5%86%A0%E5%86%9B">围棋世界冠军</a>的人工智能机器人，由<a href="https://baike.baidu.com/item/%E8%B0%B7%E6%AD%8C/117920">谷歌</a>（Google）旗下<a href="https://baike.baidu.com/item/DeepMind">DeepMind</a>公司<a href="https://baike.baidu.com/item/%E6%88%B4%E5%AF%86%E6%96%AF%C2%B7%E5%93%88%E8%90%A8%E6%AF%94%E6%96%AF/16309602">戴密斯·哈萨比斯</a>领衔的团队开发。其主要工作原理是“<a href="https://baike.baidu.com/item/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/3729729">深度学习</a>”。</p></blockquote><p>围棋，是我们通常一直轻视的一个事物，在现有的计算尺度来看，围棋的变化复杂程度和宇宙种原子变化的复杂程度在同一个量级。这就是为什么当机器能在围棋上战胜人类的时候，会出现如此大的轰动。如同第二次浪潮的开端一样，这无疑又给人工智能提供了一个发展的良好阶段。</p></li></ul><p>不经长舒一口气，人工智能的发展真是曲曲折折。</p><p>我们花了很大的功夫终于介绍完了整个发展的历程，过程并没有很详细，还有很多未纳入的成果和研究，只是希望通过一系列的例子来简明的展示整个人工智能的发展这一个复杂的过程。</p><p>我们现在回头来看开头的关于智能的问题，人们解决什么是智能了吗？</p><p>实际上并没有，将近百年的发展，科学家依然没有对什么是智能这个元问题有很好的解答。</p><p>真正的智能，就像文章开头所说的炼金术一样，是当时人们无法理解的原理，但是这不影响前仆后继的研究者们信仰人工智能的诞生。</p><p>我们不能说如今的一切努力都是没有用的，因为人工智能切切实实的改变了我们的生活。就像炼金术时代同样发明了火药、和一些其他的技艺改变了人们的生活。</p><p>那么强人工智能何时到来？下面为你解答。</p><h2 id="强与弱人工智能"><a href="#强与弱人工智能" class="headerlink" title="强与弱人工智能"></a>强与弱人工智能</h2><p>事实上，如今我们所接触到的人工智能均属弱人工智能，你可能有些失望。有时候我们会开玩笑说眼前的AI简直是人工智障，但自从AlphaGo在围棋上战胜人类后，许多人就已经望而生畏，如今对于强弱人工智能大致有下面定义：</p><ul><li><p>强人工智能</p><p>希望研制出达到甚至超越人类智慧水平的人造物，具有心智和意识、能根据自己的意图开展行动。</p></li><li><p>弱人工智能</p><p>借鉴人类的智能行为，研制出更好的工具以减轻人类智力劳动。</p></li></ul><p>知道了定义，我们再看身边的Siri、语音识别的工具等，确实都是弱人工智能。</p><blockquote><p>人工智能技术现在所取得的进展和成功，是缘于“弱人工智能”而不是“强人工智能”的研究。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180117/44e9078f6b39444081d917432a3ab866.jpeg"></p><p>正如国际人工智能联合会前主席、牛津大学计算机系主任迈克尔·伍德里奇(Michael Wooldrige)教授在 2016 年 CCF-GAIR 大会¹报告中所说：强人工智能几乎没有进展，甚至「几乎没有严肃的活动」(「little progress, little serious activity」)。</p></blockquote><p>事实上，人工智能国际主流学界所持的目标就是弱人工智能，也少有人致力于强人工智能。那么，这是不是因为强人工智能太难，所以大家退而求其次呢？不然。绝大多数人工智能研究者认为，不能做、不该做！</p><p>我们来详细看一下原因：</p><ul><li><p>技术迭代的风向标并不是朝着强人工智能</p><p>现在人工智能取得的成功包括图像识别、语音识别、实时翻译、棋类游戏等在某一领域的功能，上述的成功有一个共同的特点：<strong>它们都是在考虑某种特定类型的智能行为，而不是「完全智能」行为</strong>。因此，现有技术即便发展再快、发展再好，也不会直接使得强人工智能成为可能，还是因为元问题。</p></li><li><p>想研究强人工智能，就躲不开元问题</p><p>想回答元问题可不是易事，有一种观点认为，我们只要用电路模拟出大脑的神经连接不就会产生只能了吗？然而这种说法从来没有得到过丝毫证明，也不能称其为猜想。因为猜想也应该有一些即便不够完备但尚能显示可能性的证据，例如通过仿制简单细胞，做出了单细胞智能生物。实际上，我们完全有更强烈的理由认为，即便能精确地观察和仿制出神经细胞的行为，也无法还原产生出智能行为。</p><blockquote><p>国际人工智能终身成就奖得主、多伦多大学赫克托·莱韦斯克(Hector J. Levesque)教授在他2017年的新著⁵中所说，即便在最理想的情况下，神经科学家也仅是能获得「目标代码」而已，没有理由认为获得了目标代码就能还原出源代码，因为这样的「反向工程」即便对软件程序来说也几乎是不可能的，更何况神经细胞内部还存在「分布式表示」。</p></blockquote></li><li><p>即便可能，强人工智能也不应该出现</p><p>每门科学都存在着不可触碰的领域，克隆人就是其中之一。如果人类可以研究出正真的智能，那这种智能是否在我们之上就是影响人类命运的巨大威胁。背后的伦理问题、哲学问题难以估量，哈西莫夫的三定律也苍白无力，或许真正的强人工智能还是不要出现为好，这也是许多科学家的共识。</p></li></ul><h2 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h2><p>所以到这里就结束了吗？</p><p>回看整个历史，你就会明白，人工智能的路还有很长的路要走，相信随着量子技术等一大批高精尖的研究取得突破，人工智能也会有长足的发展。</p><p>我致力于从一个简明的角度和一些有深度的思考来一步步揭开人工智能的面纱，如有不足之处或有讨论交流的想法，还请到评论区留言。你的支持就是我最大的动力！</p><p>本文汲取了大量的网上信息，就不一一列举，在此表示感谢和致敬，侵权必删。</p><p><img src="https://i.loli.net/2021/10/10/PndvSuBLsyg9m12.png" alt="image-20211009141338393"></p><p><img src="https://i.loli.net/2021/10/10/84IW3w6qjlzuCnU.png" alt="image-20211009141511965"></p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10提示无Internet、无法开热点(能上网)</title>
    <link href="/2021/10/10/win10bug1/"/>
    <url>/2021/10/10/win10bug1/</url>
    
    <content type="html"><![CDATA[<p>折腾了很久，但是最后找到了一个可用的办法，仅作记录</p><p>出处：<a href="https://www.bilibili.com/read/cv5292887/">https://www.bilibili.com/read/cv5292887/</a></p><h2 id="问题再现"><a href="#问题再现" class="headerlink" title="问题再现"></a>问题再现</h2><p>win10右下角的网络连接打开显示：<img src="https://i.loli.net/2021/10/10/QRweaG2rOYlHt6T.png" alt="提示无网络"  /></p><p>但是实际上是可以正常上网的，打开适配器的状态：<img src="https://i.loli.net/2021/10/10/lsxHV52yToZIWFr.png"></p><p>也是提示无访问权限，还没有找到解决的办法。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li><p>试过网上的几乎所有方法，例如禁用复用网卡、网络重置、禁用复用服务，也用了用修改注册表下\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NlaSvc\Parameters\Internet下的EnableActiveProbing项的办法，均不见效，这种情况下可以试试此方法。如果大家也出现以上状况，尤其是win10 18362（即1903）版以后的新版本，则取消上网验证通常不能解决问题。</p></li><li><p>原因分析：经注册表选项比对，发现问题出在连网返回值功能有了变化。原理是每当连网后，系统会自动向微软的dns.msftncsi.com发出请求，然后返回一个NCSI.txt的值，这一值如果正确时，则确认为已连网。而Win10最近的版本中，这个返回服务器和值有了新变化并反映为6个注册表项中。这些变化因国内部分运行商的网络重定向，不能得到正确的反馈，因此出现实际能上网却显示为无internet的问题。下图中第一张图是出错的注册表项：</p><p><img src="https://i.loli.net/2021/10/10/lJ1hrDm7CYKuPM5.png"></p><p>下图中第二张是18362版之前正确的注册表项：</p><p><img src="https://i.loli.net/2021/10/10/pD9tUR2cvTr4xhX.png"></p><p>其中被选中标成蓝色的项，改回为图中所显示的值，EnableActiveProbing仍恢复为1，重启系统后，网络即能恢复正常。</p><ul><li><p>另外没有WiFi通常是服务莫名其妙的自动关闭了</p><p>如果无法解决，在键盘上按下【Win+R】组合键打开运行，输入：services.msc 点击确定打开服务；<br>确保wired aotoconfig 和 Wlan Autoconfig 服务在启动状态为【已启动】。</p><p>或者在服务管理中找到WLAN，重启一下即可。</p></li></ul></li></ul><p><img src="https://i.loli.net/2021/10/10/pgN1sOYyMuPck5n.png"></p>]]></content>
    
    
    <categories>
      
      <category>win10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>win10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图灵：计算机器与智能（译文）</title>
    <link href="/2021/10/07/%E6%9C%BA%E5%99%A8%E8%83%BD%E6%80%9D%E7%BB%B4%E5%90%97%EF%BC%9F/"/>
    <url>/2021/10/07/%E6%9C%BA%E5%99%A8%E8%83%BD%E6%80%9D%E7%BB%B4%E5%90%97%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.csee.umbc.edu/courses/471/papers/turing.pdf">原文Computing  machinery and intelligence</a></p><p>致敬图灵.侵删p><h2 id="计算机器与智能"><a href="#计算机器与智能" class="headerlink" title="计算机器与智能"></a>计算机器与智能</h2><h2 id="模仿游戏"><a href="#模仿游戏" class="headerlink" title="模仿游戏"></a>模仿游戏</h2><p>​        我建议考虑这样一个问题：“机器能思考吗?”要回答这个问题，需先给出术语“机器”和“思维”的定义。虽然可以用尽可能反映其普通用法的方式给出定义，但是这种方式是危险的，因为很难摆脱像用盖勒普调查那样的统计方式得出“机器能思考吗?”的结论及意义，显然这是荒谬的。因此，我不是试图给出这样的定义，而是提出另外一个问题，这个问题和原问题紧密相关，而且是用相对不含糊的词语表达的。</p><p>​        这个新的问题可以通过一个游戏来描述，称之为“模仿游戏”。需要三个人来玩，一个男人(A)，一个女人(B)和一个男女皆可的提问者(C)。提问者呆在一个与另外两人相隔离的屋子里，游戏的目标是提问者要判断出外面哪个是男人，哪个是女人。提问者用标签X，Y指称外面的两个人，游戏结束时，他要说出“X是A，Y是B”或者“X是B，Y是A”。提问者C允许向A和B提出下面这样的问题：</p><ul><li>C：X，请告诉我你头发的长度。</li></ul><p>现在假如X实际上是A，那么A必须回答。A在游戏中的目标是努力使C做出错误的判断，他的回答可以是：　　 </p><ul><li>我的头发乌黑发亮，最长的一缕大概九英寸长。　 </li></ul><p>​        为了排除声音帮助提问者得出结论，问题的答案应该写出来，最好是打出来。理想的安排是，让两个屋子用远程打印通讯，也可以通过中间人传递答案。而B在这个游戏中的任务是努力帮助提问者，她的最优策略可能就是给出正确答案。她可以在她的答案中加入“我是女的，别听他的”这样的话，但是这并不能提供更多的帮助，因为男人A同样也能做出相似的评论。</p><p>​        现在提出这样一个问题，“如果用机器代替A，将会发生什么情况？”同与两个人玩这个游戏相比，提问者判断错误的几率是否发生变化？这个问题取代了原问题“机器能思考吗? ”</p><h2 id="对新问题的评价"><a href="#对新问题的评价" class="headerlink" title="对新问题的评价"></a>对新问题的评价</h2><p>​        除了问：“新问题的答案是什么？”还会问：“这个新问题有研究的价值吗？”我们先考察第二个问题，避免进入无限循环。</p><p>​        新问题的优势在于，把一个人的体力和智力完全区分开了。没有任何工程师或化学家宣称能够生产出和人的皮肤完全相同的物质。在未来的某天，这可能成为现实，但是让一个“思维机器”具有如人一般的皮肤对于让它更像人并没有多大的帮助。我们设置问题的方式考虑到了防止让提问者看到、接触到或听到其他的游戏者。所提议的标准的其它优势在下面的样板问题和回答中显示出来：</p><p>​    问：请写一首以Forth Brige  (译注：1890建成于英国，开现代桥梁建造的先河)为主题的诗。　　 </p><p>​    答：我无能为力，我从来不会写诗。　　 </p><p>​    问：34957加70764等于多少？　　 </p><p>​    答：(停了三十秒钟后给出答案) 105621。　　 </p><p>​    问：你玩象棋么？　　 </p><p>​    答：是的。　　 </p><p>​    问：我的王在K1，没有别的棋子了，你只有王在K6，车在R1。该你走，你走哪步？　　 </p><p>​    答：(十五秒钟的停顿后)车移动到R8，将军。</p><p>​        这种问答方式似乎适用于我们希望考察人类能力的任何领域。我们不希望因机器不能在选美比赛中取胜而被惩罚，正如我们不希望因人不能在和飞机赛跑中取胜而被惩罚一样，我们的游戏设定让这些无能变得无关紧要，只要参与者认为合适，他们可以吹嘘他们的魅力，力量或勇敢，而提问者不能要求他们做实际的展示。</p><p>​        这个游戏可能会被批评：机器在游戏的成败中占有过多的比重，如果一个人试图装成机器，他的表演显然非常糟糕，他会因为算术上的缓慢和不准确立即出局；机器可能不会做那些被认为是思考的事，与人的方式相差甚远？这个反对意见确实很棘手，但是，尽管如此，我们至少可以说，如果机器被设计得可以令人满意玩这个模仿游戏，那我们不必担心此异议。</p><p>​        有人可能会建议，在玩“模仿游戏”时机器的最佳策略不是模仿人的行为，这是可能的，但我认为这种做法不可能有什么大的影响。在任何情况下，这里都不打算研究游戏理论，并且假定最优策略是努力提供和人一样的答案。　 </p><h2 id="游戏中的机器"><a href="#游戏中的机器" class="headerlink" title="游戏中的机器"></a>游戏中的机器</h2><p>​        只有当“机器”这个词的意义确定下来后，在§1中提出的问题才能明确下来。自然，我们希望允许一切技术都使用在我们的机器上；我们也希望接受这种可能：一个或一队工程师制造出一个可以工作的机器，但是却不能很好的描述其工作方式，因为他们使用了基于试验的方法来设计它；最后，我们希望从机器中排除以通常方式出生的人。要让定义同时满足这三个要求是困难的，例如，你可能会要求这些工程师都是同一性别，但这实际上也是无法满足的，因为通过个人的一个皮肤细胞产生一个完整的个体不是完全不可能的，这将是生物科技具有划时代意义的突破，但我们不会认为这是“建造思维机器”的案例。这就要求我们放弃允许一切的技术的打算，我们更愿意这样，因为目前“思维机器”的研究热点集中在一种特殊的通常被称为“电子计算机”或“数字计算机”的机器上，因此，我们仅仅允许“数字计算机”参加我们的游戏。　 </p><p>​        此限制第一眼看上去过于严格，我会试图说明事实并非如此。要做到这一点，必须简要说明这些计算机的性质。</p><p>​        人们可能会说：将机器限定在数字计算机，按我们的“思考”标准，如果机器（不能如我所愿）会令人失望，得出结论机器在游戏中不能表现出色。</p><p>​        目前已经有许多数字计算机在工作，人们可能要问：“为什么不拿一台直接作实验？很容易就能满足游戏的要求。让许多提问者同时参加游戏，然后统计出判断正确的概率”。对这个问题的简要回答是：我们并不是要问是不是所有的数字计算机都能在游戏中表现良好，也不是要问现在的计算机中有没有能够通过实验的，而是要问：是否存在可想象的计算机能够通过游戏。这仅仅是一个简要回答，我们稍后将以不同的眼光看待这个问题。</p><h2 id="数字计算机"><a href="#数字计算机" class="headerlink" title="数字计算机"></a>数字计算机</h2><p>​        数字计算机背后的思想可以解释成，旨在执行任何可以通过人计算而完成的操作。一个计算员应该严格遵守规则，没有一点偏离规则的权力。我们可以假设这些规则写在一本书上，每次被分配新的任务时，将会改变执行步骤。他有无限的纸进行计算，也可以用“台式机器”进行乘法和加法运算，但这并不重要。</p><p>如果使用上述解释定义数字计算机，可能陷入循环论证，为此我们通过概述预期达到的效果来避免。一个数字计算机通常由一下三个部分组成： </p><ul><li>（i）存贮器</li><li>（ii）执行单元</li><li>（iii）控制器　 </li></ul><p>​        存储器用来存贮信息，对应于计算员的纸，既在纸上计算，也在纸上记录计算规则。至于说计算员进行心算，那么一部分存储器将对应于他的记忆。</p><p>​        执行单元是一次计算中各种操作进行的地方，这些操作随着机器而变化。通常相当长的操作可能是：“3540675445乘以7076345687”，但是一些机器可能只执行“写下0”一类的简单操作。　 </p><p>​        上面曾经提到计算员的“规则书”由机器中的一部分存储器代替，不妨把它们称为“指令表”。控制器的功能就是保证指令按照正确的顺序执行，其设计使得这成为可能。　 </p><p>​        存储器中的信息通常被分解成大小适中的数据块，例如，在一个机器中，一个数据块由十个十进制数组成，数据以某种系统方式被分配到存储单元中。一个典型的指令可以是：</p><ul><li><p>“把存放在6890的数加上存放在4302的数，并把结果存入后面单元。”显然，此指令不会用英语表达，更有可能编码成6809430217这样的形式，这里，17表示对这两个数进行哪个操作，在此就是“加法操作。。。” 请注意，指令共占用了10个数字，因此正好是一个数据块，非常方便。控制器保证指令按照它们的存储顺序被执行，但是偶尔会碰到这样的指令： </p></li><li><p>“现在执行存储在 5606的指令，并从那里继续执行。”或者是：“如果 4505位置是0，那么执行存储在6707的指令，否则继续”。　 </p></li></ul><p>​    </p><p>​        后面这种指令非常重要，因为它能重复执行一段指令直到满足某种条件，但不是通过每次改变指令来做的，而是一遍又一遍执行相同的指令。可以类比家庭生活：如果妈妈想让汤姆每天上学时都到修鞋匠那里看看她的鞋是不是修好了，妈妈可以每天都告诉他一遍；另一种方式是，在一个汤姆每天上学都能看到的地方贴个便条，告诉他到鞋匠那里去看一下，当汤姆拿回鞋时，就撕掉那个便条。　 </p><p>​        读者必须接受数字计算机可以而且事实上就是按照我们所提出的原则建造的，几乎完全能够模仿一个计算员的行为。</p><p>​        当然，上面描述的计算员所使用的规则书仅仅是一个方便设想，实际中计算员记住他要做什么。如果一个人想让机器模仿计算员执行复杂的操作，他必须告诉计算机如何做，并把结果翻译成某种形式的指令表。这种构造指令表的行为通常被称为”编程”，“给一个机器编程使之执行操作 A”，意味着把合适的指令表放入机器以使它能够执行A。 </p><p>​        数字计算机的一个有趣变化是“带有随机元素的数字计算机”，它们有特定的指令进行掷色子或者别的等价电子过程，例如一个指令可能是“掷色子并把结果存入 1000。”有时这样的机器被描述为具有自由意志（尽管我自己并不使用这种表达）。通常并不能通过观察判断出一个机器是否有随机元素，因为一个相似的效果可以依据Pi的小数部分进行选择来产生。</p><p>​        大多数现实中的数字计算机仅有有限的存储空间，让一个计算机具有无限的存储空间并不存在理论上的困难，当然在任何时候都只有有限的部分被使用。同样，只有有限的存储空间被建造，不过我们可以想象越来越多的存储空间可以根据要求添加。这样的计算机具有特殊的理论价值，将被称为无限容量计算机。 </p><p>​        有关数字计算机的设想很早就产生了。1828至1839年担任剑桥大学的Lucasian数学教授的Charles Babbage（查尔斯.巴贝奇）设想了这样的机器，并称之为分析机，但是并没有实现。尽管 Babbage有了所有的关键思想，他的机器在那个时代却没有吸引人的前景，它能够达到的运算速度肯定比一个计算员要快，但仅相当于曼彻斯特机的百分之一，而曼彻斯特机也是现代计算机中相当慢的一个，分析机的存储全部由用轮子和卡片组成的机械实现。</p><p>​        事实上，全部由机械实现的Babbage分析机帮助我们破除了一个迷信。现代数字计算机是电子的，神经系统也是电子的，这一事实常常被过份强调了。既然Babbage的机器没有使用电，而所有的数字计算机在某种意义上都是等价的，那么我们就会明白是否使用电在理论上并不重要。当然，通常高速运算需要电，因此，我们就会发现在这些地方使用电是理所当然的。在神经系统中，化学过程至少和电过程同样重要，某些计算机的存储器主要基于声学原理，计算机和神经系统都使用电仅仅是表面的相似，如果我们希望寻找这样的相似，倒不如寻找功能上的数学相似性。</p><h2 id="数字计算机的通用性"><a href="#数字计算机的通用性" class="headerlink" title="数字计算机的通用性"></a>数字计算机的通用性</h2><p>​        上章考虑的数字计算机可以被归类为“离散状态机”，这类机器可以从一个确定状态向另一个状态突然跳变。为了不会有混淆这些状态的可能，它们之间要有足够的差别。严格的说，这样的机器是不存在的，一切事件实际上都是连续变化的，但是有许多种机器能够被看作离散状态机器。例如在照明系统中的开关，我们可以把开关看成只有开和关两个状态，它们之间肯定有中间状态，但是在绝大多数情况下可以忽略它们。作为离散状态机器的例子，我们可以考虑一个每秒转120度的轮子，这个轮子可能因一个杠杆的阻挡而停下来，在轮子上有一个发光的灯。这个机器可以被抽象的描述为下面的形式，机器的内部状态 （通过轮子的位置来描述（可以是q1，q2和q3，输入信号是i0或i1（杠杆的位置）。任何时候的内部状态可以根据上一次状态和输入信号由下表描述：</p><p>​        输出信号可以用下表描述，它是唯一能够被外部观测的内部状态指示器。</p><p>​        这个例子是一个典型的离散状态机，只要它们的状态是有限的，就可以用这样的表格描述。　 </p><p>​        可以看出，只要给出初始状态和输入信号，所有的未来状态都是可以预测的，这让我们想起了拉格朗日的观点，那就是，只要给出宇宙中任意时刻所有粒子的位置和速度，就能够预知未来的所有状态。我们考虑的预测和拉格朗日相比较更接近于实用性。“宇宙作为整体”的系统，只要初始条件的一个很小的误差，就会引起系统以后颠覆性的效应，某个时刻一个电子位置的亿万分之一厘米的偏移，将决定一个人会在雪崩中死去还是逃生。我们称之为“离散状态机”的机械系统的一个基本特性是，这样的现象不会发生。即使是考虑实际的物理机器而不是理想机器，只要知道了某个时刻状态的合理准确的信息，就可以相当准确的预测未来状态的信息。</p><p>​        正如我们所提到的，数字计算机属于离散状态机，但是这样的机器所能够达到的状态通常是相当大的，例如，现在在曼彻斯特工作的机器可以有2^165000个状态，也就是大约10^50000。而上面描述的轮子，仅有三个状态。找到有如此多状态的原因并不困难，计算机具有一个存储器，对应于计算员的纸，这些存储器中应该能够写入任何能够写入计算员所用纸上的符号。为了简单起见，假设仅仅用从0到9的数字作为符号，忽略手写体的差别。假如计算机具有100张每张50行，每行30个数字的存储空间，那么状态的数目就会是10^(100<em>50</em>30)，即10^150000，这大约是三个曼彻斯特机状态的总和。状态数的基数为2的对数通常被称为机器的“存储大小”，因此曼彻斯特机的存储大小是165000，而上面例子中轮子的存储大小是1.6。如果两个机器加在一起，他们的存储大小应该是原来存储大小的和。因此我们可以说“曼彻斯特机具有64个磁带存储器每个存储器的大小是2560，还有8个电子管，每个容量为1280。各种各样存储器加在一起大约是300个，总共174380。”　 </p><p>​        只要给出对应于离散状态机器的表格，就能够预测出机器将会做什么。没有理由这样的计算不能通过数字计算机来完成，只要运行足够快，数字计算机就能够模拟任何离散状态机的行为。这样，模仿游戏就变成在当前机器（B）和数字计算机（A）之间进行，而提问者就不能区分它们。当然，数字计算机除了运行足够快，还必须有足够的存储空间，而且模仿不同的机器之前必须被重新编程。</p><p>​        数字计算机可以模拟任意离散状态机器的性质被表述为“通用机器”，具有这样性质的机器带来一个重要结果就是，若不考虑速度，并不需要设计出不同的新机器来执行不同的计算，它们都可以用一个数字计算机来实现，只要根据情况适当编程。由此可见，所有数字计算机在某种意义上是等价的。</p><p>​        我们现在可以重新考虑在第三章末尾提出的问题，暂时把问题“机器能思考吗？”用“是否存在在模仿游戏中表现出色的可想象的数字计算机？”代替，如果愿意，我们还可以问“是否存在表现出色的离散状态机？”，但是从通用性的角度，我们可以看出这两个问题都等价于“让我们把注意力集中在一个数字计算机C上，如果我们可以让其具有足够大的存储空间，足够快的计算速度，而且对它进行适当的编程。C扮演角色A，人扮演角色B，C能不能在模仿游戏中表现出色？”</p><h2 id="关于主要问题的对立观点"><a href="#关于主要问题的对立观点" class="headerlink" title="关于主要问题的对立观点"></a>关于主要问题的对立观点</h2><p>​        现在我们可以认为基础清理好了，准备就“机器能思考吗？”及上一章结尾的引申问题展开辩论了。我们并不能完全放弃问题的原始形式，因为对所替代的问题的合理性会有不同的意见，我们至少应该听取这方面的意见　 </p><p>​        如果我先解释自己的信念，会让读者觉得简单些。首先让我们来看看这个问题更确切的形式，我相信，大约50年后计算机的存储量可达到10^9左右，使得在模仿游戏中会表现更好，这样以来一般提问者在提问5分钟后，能准确判断的概率不会超过70％。我认为，原来那个“机器能思考吗？”的问题就没有什么意义，不值得讨论了。尽管如此，我认为本世纪末，由于语言和一般受教育观点会改变，那时候人们又能重新谈论机器思维而不感抵触。我还认为，掩盖这些信念不会有益处，人们普遍认为，科学家进行科学研究工作总是从可靠的事实到可靠的事实，从来不受任何未经证明的猜想所影响，这种看法实际上是错误的，只要能清楚地划分哪些是经过证明的事实，哪些是猜想，就不会有害处。猜想往往是非常重要的，因为它们提示有用的研究线索。　 </p><p>​        现在我来考虑与我的看法相对立的观点。　 </p><h3 id="（１）来自神学的异议"><a href="#（１）来自神学的异议" class="headerlink" title="（１）来自神学的异议"></a>（１）来自神学的异议</h3><p>​        思维是人类不朽灵魂的一个功能，上帝赋予每个男人和女人一颗不朽的灵魂，但从未将它赋予任何其他的动物或机器。因此，动物或者机器不能思考。　 </p><p>​        尽管我不能接受这种观点，但我试图用神学的语言来回复。如果将动物和人划为一个类别，我认为这个观点更有说服力，因为在我看来，生物与非生物之间的差别远远要比人和其他动物之间的差别大得多。如果站在其他宗教团体成员的立场看，这种正统观点的武断性会更明显。伊斯兰教认为妇女没有灵魂，基督教对此有何感想？但是，现在暂不管这一点，让我们回到问题的焦点上来。在我看来，上面所引的论点对上帝威力的万能性有很大的限制。承认上帝对有些事情也是无能为力，比如，他不能让１等于２，但是难道我们不应该相信，如果上帝觉得合适，他完全可以赋予一头大象以灵魂吗？我们可以期望上帝通过自己的威力产生变异，让大象有了一个较发达的大脑，用来满足灵魂的需求。形式相似的论点也可以用在机器上，这可能看起来不同，因为更难以“下咽”，但这只是说明上帝认为这些环境赋予灵魂不太合适，有关情况我们将在本文的其余部分讨论。在企图制造这样的机器时，我们不应该无礼地篡夺上帝创造灵魂的权力，就像不应该剥夺我们生儿育女的权力那样。在两种情况下，我们其实都是上帝意志的工具，为他所创造的灵魂提供住所。　 </p><p>​        然而，这只是猜测，不管用什么神学的论据来证明，我仍不以为然。过去已经证明这样的论据漏洞百出，在伽利略时代，有人提出，“太阳一动不动地悬着……整天都不慌不忙，不想落下”（《约书亚书》，10。13）以及“他为大地奠定基础，使它不随时间移动”（《诗篇》，105。5）这些经文正好用来驳斥哥白尼的理论。从我们今天的知识来看，这种论据是徒劳的。当这些知识不再适合时，情况便大不一样了。</p><h3 id="（２）“鸵鸟”式的异议"><a href="#（２）“鸵鸟”式的异议" class="headerlink" title="（２）“鸵鸟”式的异议"></a>（２）“鸵鸟”式的异议</h3><p>​        “机器思维后果太令人恐惧了，但愿机器不会思维。”这种观点不如上面的说法那样直言不讳，但对我们许多人有影响。我们都倾向于认为人类以某种微妙的方式比其他生物优越，要是能证明人一定是高一等的，那再好不过了，因为那样一来，就没有失去高居一切之上的地位的危险。神学论点的流行明显与这种情绪密切有关。这种看法在知识分子中会更强烈，因为他们比其他人更看重思维的力量，更倾向于相信人类在这方面能力上的优越性。</p><p>​        我认为这个论点不足以反驳，安慰会更合适：也许这应该在灵魂轮回说中寻找。</p><h3 id="（３）来自数学的异议"><a href="#（３）来自数学的异议" class="headerlink" title="（３）来自数学的异议"></a>（３）来自数学的异议</h3><p>​        数理逻辑中的一些结果可以用来指出离散状态机器能力的局限，其中最著名的就是哥德尔定理，此定理声称，在任何充分的逻辑系统中都能形成陈述，在本系统中既不能被证真，也不能被证伪，除非这个系统本身就是不一致的，丘奇、克利、罗瑟和图灵等人也得到了相似的结果。图灵的结果最容易理解，因为直接涉及机器，而其他人的结果相对来说是间接的：比方说，如果使用哥德尔定理，我们还需要某些附加手段，通过机器来描述逻辑系统，而描述机器又需要通过逻辑系统。此结果涉及一种机器，实质上是一台通用数字计算机，即使是这样一台机器，对有些事情也是无能为力的。如果计算机被设计成能在模拟游戏中回答问题的话，对有些问题要么给出错误的答案，要么答不上来，不管给它多长时间。当然，存在着许多这样的问题，但是也存在着尽管这台机器回答不了，但另一台机器却能给予满意回答的问题。我们现在假定，只要回答“Yes”或“No”，而不是“你认为毕加索怎么样？”这类问题。我们知道机器必定无法回答的问题是下述这类问题：“考虑有以下特点的机器。。。这台机器会不会对任何问题作出‘Yes’的回答？”这里省略的是如§5中对某台标准形式机器的描述。如果所描述的机器与那台被提问的机器具有某些相对简单的联系，那么，我们就能知道，答案不是错了，就是没有答案。这就是数学的结论：此结论认定机器能力有限，而人类智能则没有这种局限性。</p><p>​        对这个论点的简短答复是，尽管已经确定任何特定机器的能力都存在限制，但人的智能不受限制，仅仅被陈述，并没有任何证明。我认为这个论点不能就这么轻易驳回，每当一台这样的机器被问及适当的关键问题，并给出确定的答案，而我们知道此答案一定是错的，我们无疑会产生一种优越感，这种感觉是错觉吗？毫无疑问，这是真实的，但我认为不应该过分重视它。我们自己经常会回答错一些问题，却会对机器的错误而沾沾自喜。而且，我们的优越感来自对付一台机器，但我们无法同时对付所有的机器而且不出差错。总而言之，人可能比任何特定的机器聪明，但是可能有更聪明的其他机器，等等。</p><p>​        我认为，坚持数学论证的人大多愿意接受模仿游戏作为讨论的基础，那些相信前两个反对意见的人可能对任何标准都不感兴趣。</p><h3 id="（４）来自意识的论点"><a href="#（４）来自意识的论点" class="headerlink" title="（４）来自意识的论点"></a>（４）来自意识的论点</h3><p>​        这个论点在Jefferson教授于1949年的Lister演说中有很好的表达，我引用他的一段话：“若要我们承认机器等同于大脑，除非机器能够因为感受到思想与情绪，而不是偶然碰到符号涂写十四行诗或协奏曲。也就是说，它不仅写了，而且知道自己写了。任何机器都感觉不到（不只是人工信号，一个简单的图谋）成功的喜悦，保险丝跳闸的沮丧，被奉承而沾沾自喜，因犯错误的痛苦，被X爱所迷惑，也不会因欲望得不到满足而生气或沮丧。”</p><p>​        这个论点看上去否定了我们测试的有效性。按照这种观点的最极端形式，一个人确信机器思维的唯一途径就是成为那台机器，自己去感受思维活动，然后向世人描述这种感受，但是当然不会有人被证实。同样，依照此观点，要想知道某人是否在思维，唯一的途径就是成为那个人，这实际是唯我论的观点，这也许是所持的最有逻辑的观点，但若真是这样，那思想交流就太困难了，Ａ相信“Ａ在思考，而Ｂ不在思考”，而Ｂ相信“Ｂ在思考，而Ａ不在思考。”与其为此争执不休，不如客气认为大家都在思考。</p><p>​        我肯定Jefferson教授并不希望采纳极端和唯我论的观点，他也许愿意接受模拟游戏作为一个测试。模拟游戏（省略了游戏者Ｂ）在实际中经常采用“口试”的方式来发现某人是真的理解某事，还是“鹦鹉学舌”。让我们听听这种“口试”的一部分：</p><ul><li><p>询问者：你的十四行诗的第一行，“我欲比君为夏日？”若将“夏日”改成“春日”，是否更好？</p></li><li><p>见证人：这样就不押韵了。</p></li><li><p>询问者：改为“冬日”呢？这样会押韵。</p></li><li><p>见证人：可以，但是没有人愿意被比作冬日。</p></li><li><p>询问者：你说Pickwick先生让你想到圣诞节了？</p></li><li><p>见证人：某种程度上。</p></li><li><p>询问者：然而圣诞节是冬天的一天，我认为Pickwick先生不会在意这个比喻。</p></li><li><p>见证人：我认为你在开玩笑，冬日是指一个典型的冬日，而不像圣诞节那样特殊的一天。</p></li></ul><p>​        不再赘述。如果那台写十四行诗的机器在“口试”中能够这样对答，Jefferson教授会作何感想呢？我不知道他会不会把机器的那些答复当作“人工信号”，但是，如果这些答复如上面所引的那样令人满意并且持续下去，我认为他不会将其形容为“简单的设计”。“简单的设计”是说用来播放一个人念十四行诗的录音，并可适时开关。</p><p>​        总之，我认为大多数支持来自意识方面异议的人会被说服而放弃原来的主张，不致于陷入唯我论的困境，这些人因此也就有可能愿意接受我们的测试。</p><p>​        我不想给人留下这样的印象：我认为关于意识的事情没有神秘感。例如，存在着与任何企图捕捉意识有关的悖论，但我认为在我们能够回答我们在本文中关注的问题之前，并不一定要解决这些谜团。</p><h3 id="（５）来自各种能力限制的论点"><a href="#（５）来自各种能力限制的论点" class="headerlink" title="（５）来自各种能力限制的论点"></a>（５）来自各种能力限制的论点</h3><p>​        这些论点表述如下：“我担保，你可以让机器做任何你提到的事情，可你永远也不能使一台机器有Ｘ类特征。”这样的特征有许多，这里我列举若干：善良，机智，美丽，友善，有创新精神，富于幽默感，明辨是非，犯错误，坠入爱河，享受草莓和奶油，让某人爱上它，从经验中学习，恰当使用词汇，成为自己思想的主人，像人一样有多样的行为，做一些真正新颖的事情（其中一些能力限制在标出的页码处有特别的考虑）</p><p>​        这些陈述通常未经证明，我相信它们大多是以科学归纳的原则为基础的。一个人一生中见过数千台机器，由此得出一般结论：它们形态丑陋，应用范围狭窄，只要范围略有变动，就束手无策，行为变化也小，等等。他很自然认为，这就是一般机器的必备特征。大部分机器的能力限制与机器存储量大小有关（我假设，存储量这个概念不仅仅限于离散状态的机器，还涉及到别的机器，既然目前讨论还不需要讲究数学的准确性，定义准确就不那么重要）。数年前，由于很少提及数字计算机，要是你光说其特征而不提其构造，就会以为你在信口开河。我想这也是因为人们使用了科学归纳原则的结果，这些应用很大程度上是无意识的。当一个被火烫过的小孩害怕蜡烛，从而回避蜡烛，我认为他这就是在使用科学归纳（当然，我也可以用许多别的方式来解释这一现象）。人类的行为和习惯是乎并不适合运用于科学的归纳法。如果你想获得可靠的结果，就要对大部分时空进行研究，否则我们会（像大多数英国儿童一样）以为世界上所有的人都讲英语，学习法语就很愚蠢。</p><p>​        然而，关于刚才提到机器的许多能力限制，还要特别说几句，说机器没有能力享受草莓和奶油，会使读者觉得有点轻率。我们有可能使机器喜欢这些美味，但任何强迫这样做的企图都是愚蠢的。值得重视的是，这种能力限制会对解释其他能力限制有帮助，比如，难以使人与机器之间形成那种像白人与白人之间，或是黑人与黑人之间的友好情感。</p><p>​        宣称“机器不能犯错误”，似乎是一个奇怪的说法，我们不禁要反问，“这样会更糟吗？”让我们抱持更加同情的态度，来看看这究竟是什么意思。我认为可以用模仿游戏来解释这种批评。有人声称，在游戏中提问者简单问几道算术题就能分辨出哪个是机器，哪个是人。由于极高的精确性，机器会屏蔽。对此回复很简单，（编程用于玩游戏的）机器不会试图给出算术问题的正确答案，而是故意算错，以蒙骗提问者。机器由于机械故障，会在做算术题时出现错误而作出不妥当的决定，因而暴露了自己。即使这种批评不太有同情心，但是限于篇幅不可能进一步讨论。在我看来，这种批评源于混淆了两个不同性质的错误，这两个错误我们称之为“功能错误”和“结论错误”。功能错误是由某些机械或电器故障引起的，这些故障导致机器不能够按照指令工作。在进行哲学讨论时，我们希望忽视发生这种错误的可能性，这样的话，我们实际上是在谈论“抽象的机器”，而这些抽象的机器与其说是实在的物体不如说是数学的虚构。从定义上讲，我们完全可以这么说：“机器从不差错。”只有当机器的输出信号有一定的含义时才会出现结论错误。比方说，机器能够自动打出数学方程或英语句子。当机器打出一个错误的命题时，我们就认为这台机器犯了结论错误。很明显，找不到丝毫理由说，机器从不犯这类错误，一台机器有可能别的什么也不能做，只会连续打出“0＝1”。举一个不太反常的例子，可能有通过科学归纳得出结论的方法，但这种办法有时无疑会导致错误的结果。</p><p>​        有人说，机器不能成为它自己思维的主体，如果能证明机器的某些思维是有主体的话，就能驳回这种说法。尽管如此，“机器操作的主体问题”确实有点意义，至少对于研究它的人来说是这样的。比如，如果一台机器试图解 X2-40X-11＝0这个方程式，我们不禁会认为，这时，这个方式本身就是机器主体的一部分。从这种意义上说，机器无疑能够成为它自己的主体。这对编排它自己的程序，对预测因本身结构变化带来的后果都会有所帮助，机器能够通过观察自己行为的结果，修改自己的程序，以便更有效地达到某种目的。这并不是乌托邦式的空想，而是不久的将来可能办到的事。</p><p>​        有人批评说，机器的行为比较单一，这也就是说，机器不能够有很大的存储能力，直到最近，达到1000字节的存储量都很罕见。</p><p>​        我们这里考虑的批评，实际上都是来自意识的那个异议的改头换面。通常，如果我们坚持认为，一台机器有能力做完其中的一件事，并对机器所能采用的方法进行描述，不会给别人多深印象，人们会认为机器所使用的方法（不管是什么方法，总是机械性的）实在太低级了，请参见前面所引Jefferson演讲中括号内的话。　</p><h3 id="（６）Lovelace夫人的异议。"><a href="#（６）Lovelace夫人的异议。" class="headerlink" title="（６）Lovelace夫人的异议。"></a>（６）Lovelace夫人的异议。</h3><p>​        关于Babbage分析机最详细的信息来自Lovelace夫人的回忆录，她写道：“分析机没有任何创作的意图， 它可以做我们知道如何指挥它的任何事”（她的斜体），Hartree引用了这段话（第70页），并补充道：“这并不意味着就无法制造能‘独立思考’的电子设备，用生物学的话说，我们能够在其中建立条件反射，用来作‘学习’的基础。此设想在原则上否可行，是一个令人刺激和兴奋的议题，但当时制造的机器是乎还不具备此特点。</p><p>​        我完全同意Hartree的看法，值得注意的是，他并没有断言当时的机器不具备这个特点，而是指出洛夫莱斯夫人所能获得的证明还不足以使她相信这些机器已具备了这个特点。从某种意义上讲，这些机器很有可能已具备了这个特点，因为，我们设想某些离散机器有这个特点，分析机实际上是一台通用数字计算机，因此如果它的存储能力和速度达到一定程度，就能通过适当的编程模仿我们讨论的机器，也许伯爵夫人或Babbage都没有想到这一点。无论如何，他们没有义务陈述所有能陈述的事物。</p><p>​        整个问题将在学习机器的标题下再次考虑。</p><p>​        洛夫莱斯夫人的异议还有另外一种说法，即机器“永远不能创新”，这种说法可以用谚语“太阳底下无新事”抵挡一阵。谁能保证，他的“独创性工作”不是通过教育让身上的种子成长的结果，或者不是因循著名的普遍原则的结果？此异议还有另一个稍好的说法，即机器永远也不能“让我们吃惊”，这种说法是一个可以直接回应的更直接的挑战。机器经常令我吃惊，这主要是由于我对机器能做什么估算不足，更确切地说是由于即使我做了估算，也匆忙粗糙。我也许这样对自己说：“我认为此处的电压应与彼处相同：不管怎样，就假设一样吧。”自然我经常出错，结果我大吃一惊，一旦实验完成，这些假设就被忘得了。我坦诚自己这样的错误，我证实了所经历的吃惊，但人们并未失信于我。 </p><p>​        我的回答并不会使批评者就此缄口沉默，他也许会这样做，所谓吃惊都是因为我自己富于想象力的心理活动，与机器本身毫不相干。这样，我们重又回到来自意识的那个论证上去，而背离了吃惊不吃惊的话题。我们不得不认为这种论证方式是封闭式的，但是，也许值得一提的是，要将某事物认作令人吃惊，则需要许多“富于想象力的心理活动”，不管这件令人吃惊的事件是由一个人、一本书、一台机器还是其他任何东西引起的。　 </p><p>​        我相信，那种认为机器不会令人吃惊的观点，是哲学家和数学家特别关注的一个谬误。它是这样一个假设，即心灵一接受了某个事实，由此事实所引起的一切后果都会同时涌入心灵。在许多情况下，这种假设十分有用，但人们太容易忘了这是个错误的假设，如果照这样做的话，其必然结果就是认为，仅仅从数据和普遍原则得出结论会毫无效力可言。</p><h3 id="（７）来自神经系统连续性的论点。"><a href="#（７）来自神经系统连续性的论点。" class="headerlink" title="（７）来自神经系统连续性的论点。"></a>（７）来自神经系统连续性的论点。</h3><p>​        神经系统当然不是离散状态机器，撞击神经元的神经脉冲规模信息一个小的误差，就可能导致输出脉冲规模信息的很大差别。既然如此，就可以论证：不能期望用一个离散状态系统去模仿神经系统的行为。 </p><p>​        离散状态机器肯定与连续机器有别，但是如果我们遵循模拟游戏的条件，提问者就无法利用这种差异。如果我们考察一下其他一些更简单的连续机器，情况会变得更加清晰。一台微分分析机就足以胜任了（微分分析机是一种用作非离散状态计算的机器），有些机器能打出答案来，所以可以参加模拟游戏。一台数字计算机不可能猜准微分分析机对一个问题究竟作何答复，但它却能给出正确回答。比如，如果你要它回答π的值是多少（实际上约等于3.1416)，它就会在3.12，3.13，3.14，3.15，3.16之间作随机选择，其选择概率依次分别为（比方说）0.05，0.15，0.55，0.19，0.06。这样的话，提问者就很难分辨微分分析机与数字计算机。</p><h3 id="（８）来自行为非形式化的论点"><a href="#（８）来自行为非形式化的论点" class="headerlink" title="（８）来自行为非形式化的论点"></a>（８）来自行为非形式化的论点</h3><p>​        不可能制定一套旨在描述一个人在每种情况该做什么的规则，比方说，可能有这样一条规则：行人见到红灯止步，见到绿灯行走，但是，如果由于某种错误红绿灯同时亮了，该怎么办？我们也许会这样决定，为安全起见最好止步，但稍后这个决定还会有其他问题。试图提一套考虑到各种可能性的行为规则，即使是如红绿灯，似乎都是不可能的。对此我完全同意。</p><p>​        由此可见，我们不能成为机器。我会尽力重现此论证，但我担心很难做到公正。似乎可以这么说： “如果每个人都有一套行动规则来调控其生活，那么他与机器就相差无几了。但不存在这样的规则，因此人不能成为机器。“这里不周延的中项显而易见，我认为没人这样论证过，但实际上用的就是这样的论证。然而，“行为规则”和“行为规律”之间可能存在一定的混淆，所谓“行为准则”，我是指诸如“见到红灯止步”这样的规则，你能采取行动，并意识到；而所谓“行为规律”则是指用于人体的自然法则，例如“如果你捏他，他会叫”。如果我们在引用的论据中用’规范他的生活的行为规律’来替代’规定他的生活的行为规则’，那么，这个论证中的不周延的中项就不再是不可克服的了。因为我们认为，受行为规律调控意味着人就是某种机器（尽管不一定是离散状态机器），而且反过来说，这样的机器意味着受这样规律调控。然而，我们很难轻易地说服自己，不存在完备行为规律，就像不存在完备行为规则一样。我们知道，找到这些规律的唯一方法是科学观察，而在任何情况下都不能说“我们已充分寻找过了，不存在这样的规律。”</p><p>​        我们可以更有力地证明这种说法不合理，假定存在这种规律，我们肯定能够找到。然后给定一个离散状态机器，应该有可能通过观察找到规律，预测其未来行为，在合理的时间内，比如说一千年。 但似乎并非如此，我在曼彻斯特电脑上安装了一个只有1000个存储单元的小程序，其中配备有一个十六位数字在两秒钟内作出回答。我绝对不相信任何人仅从这些回答中就能充分了解这个程序，能对未试值预测回答。</p><h3 id="（９）来自超感官认知的论证。"><a href="#（９）来自超感官认知的论证。" class="headerlink" title="（９）来自超感官认知的论证。"></a>（９）来自超感官认知的论证。</h3><p>​        我假设读者熟悉超感官知觉的概念，其四种方式为：心灵感应、千里眼、先知和心理动力。这些令人不安的现象似乎否认了一般的科学观念。我们多么想怀疑它们！不幸的是统计证据至少对心灵感应是压倒性支持的。人们很难重新调整自己已有的观念以接受这些新事物，一个人一旦接受了这些事物，就离相信鬼魂不远了。走向此方向的第一步是，相信我们的身体除了按照已知的物理学规律运作外，还按照未知的、但相似的规律运作。</p><p>​        在我看来这是一个十分有力的论点。一个人可以这样回答，许多科学理论尽管同超感知觉有冲突，但实际上还是可行的；事实上，人若是对这些现象置之不理，依然能活得很好。这是一种甚为冷漠的安慰，人害怕思维与超感知觉现象可能有特殊的关系。 </p><p>​        基于超感知觉的更具体的论证大致如下：“让我们来玩模拟游戏，让一个善于接受心灵感应的人和一台数字计算机作参赛。提问者可以问‘我右手中的那张牌是哪个花色？’这样的问题。具有心灵感应或千里眼的人在４００张牌中可以答对１３０张，而机器只能随机猜测，可能答对约１０４张，因此提问者就能正确的判断了。”这里开启了一个有趣的可能性。假使这台数字计算机有一个随机数字生成程序，那么，我们很自然就会用这个程序来决定给予什么回答。但是，这个随机数字生成程序又受提问者的精神运动的影响，这个精神运动也许就能让计算机猜对的次数比概率计算高，于是提问者就无法作出正确的判断了。而另一方面，提问者也能通过千里眼，不用提问就猜对。有了超感知觉，什么样的事都会发生。 </p><p>​        如果允许心灵感应介入模拟游戏，我们就有必要严格规定测试方式。此情景就好比在模拟游戏中，提问者在自言自语，参赛者正贴墙侧耳倾听。要是将参赛者置入一间“防心灵感应室”，就能满足所有要求。 </p><h2 id="学习机器"><a href="#学习机器" class="headerlink" title="学习机器"></a>学习机器</h2><p>​        读者会猜测我没有令人信服的正面论据来支持我的观点，否则，我就不会花费那么多精力来指出那些异议中的谬论。现在我就给出这样的证据。 </p><p>​        让我们暂时回到 Lavelace 夫人的异议，她认为机器只能做我们告诉它做的事，可以说，人给机器”注入”一个想法，机器在某种程度上反应，最后又重新静止，就像一个被锤子敲击的钢琴弦一样。另一个比喻就是一个低于临界体积的原子堆：输入的想法就像从原子堆外部轰击的中子，每个中子会引起一些反应但是最后将逐渐消失。然而，如果原子堆的大小变的足够大的时候，中子产生的反应很可能会持续的增加，直到原子堆解体。思维中是否存在这样的现象呢？机器中呢？这样的现象在人脑中应该是存在的。绝大多数思想都处于”亚临界”状态，对应于处于亚临界体积的反应堆，一个想法进入这样的思想中，平均下来只会产生少于一个的想法。有一小部分思想处于超临界状态，进入其中的想法将会产生二级三级越来越多的想法，最终成为一个完整的”理论”。动物的头脑显然是处于亚临界状态的。由于这种相似性，我们不得不问：”一个机器能不能做成超临界的？” </p><p>​        “洋葱皮”的比喻也有用。在研究思维或大脑的功能的时候，我们发现一些操作完全可以用纯机械的方式解释，我们说这并不符合真正的思维。但是在剩下的部分，我们发现还有洋葱皮需要剥除，一直这样下去。用这样的方式，我们是否能够达到真正的思维，或者最终发现皮里面什么也没有了？如果是后一种情况，那么整个思维都是机械的。(但它不是一个离散状态机，我们已经做了说明) </p><p>​        上面两段并没有提供令人信服的论据，倒不如称作“为了产生信仰的背诵”。</p><p>​        为第六部分开始时提出观点给出真正令人满意的支持，只能等到本世纪末再进行所描述的实验了。但是在此期间我们可以说些什么呢？如果实验将来会成功，我们现在应该采取什么步骤？</p><p>​        正如我所解释，问题主要是编程，工程上的进步也是必要的，但所需不被满足的可能性似乎不大。估计大脑的存储能力在10^10到10^15之间，我倾向于下界，而且认为只有一小部分用来进行高级的思考，其余大部分用来保存图像。在模仿游戏中对付一个盲人，若所需要的存储量超过10^9，会让我惊讶（注：大英百科全书第11版的容量为2*10^9)，即使采用现有技术，10^7的存储量也是完全可行的，也许根本不需要提高机器的运行速度。被视为模拟神经细胞的现代机器，其速度比神经细胞快1000倍，这在许多方面可以为补偿速度的损失提供“安全余地”，剩下的问题主要就是如何编程让机器能够完成游戏。按照我现在的工作速度，我一天大概能编1000字节的程序，所以大约60个工人在未来50年稳定工作，并且没有东西扔进废纸篓，就可以完成这项工作。似乎需要一些更快捷的方法。</p><p>​    在试图模拟成人大脑的过程中，我们必须考虑大脑是怎么进入状态的，有三点：</p><ul><li><p>(a)大脑的初始状态，即出生时的状态。 </p></li><li><p>(b)大脑所接受的教育。</p></li><li><p>(c)大脑所经历的经验，此经验不被称为教育。</p><p>与其试图编程模拟成人大脑，不如模拟儿童大脑，如果让儿童大脑接受正确的教育课程，就可能获得成人大脑。儿童大脑大概就像一个刚从文具店买来的笔记本，只有简单的机制和许多空白的纸张（机制和写字在我们看来几乎同义)，我们希望儿童大脑中的机制足够少使得容易编程。我们可以假设对机器进行教育的工作量和教育一个人类儿童基本相当。</p></li></ul><p>​        于是，我们把问题分为两部分：儿童程序和教育过程，两者密切相关。我们不能指望一下就找到一个好的儿童机器，我们必须对一个这样的机器进行教育试验，看其学习效果，然后再试另外一个，判断哪个更好。显然这个过程与进化有联系，通过这样类比：</p><ul><li><p>儿童机器的结构 = 遗传物质 </p></li><li><p>儿童机器的变化 = 变异 </p></li><li><p>试验者的决定的判断 = 自然选择 </p></li></ul><p>​        然而，人们可能希望这个过程比进化更快，适者生存是衡量优势的一种较慢的方法，试验者的决定通过智能实验将会加快这一过程。同样重要的是，并不需要局限于随机的变异，如果能够找出某些缺陷的原因，就可能想到改进它的变异。</p><p>​        对机器不可能应用与儿童完全相同的教学过程，例如，它没有腿，因此就不会被要求出去装煤斗；它也可能没有眼睛。但是不管聪明的工程师采取何种方法克服这些缺陷，只要这样的机器被送进人类的学校，其他的学生肯定会嘲笑它，它必须得到专门地训练。我们不比太注意腿眼等等，海伦.勒女士的例子表明只要老师和学生能够以某种方式进行双向的交流，教育就能进行。</p><p>​        我们通常将惩罚和奖励与教学过程联系在一起，一些简单的儿童机器可以按照这种原则来构建或编程，使得遭到惩罚的事件不大可能重复，而受到奖励的事件则会增加重复的可能性。我已经用一台这样的儿童机器做了一些实验，并成功地教会了它了几件事情，但其教育方法太不正规以致不能被认为是真正成功的。</p><p>​        惩罚和奖励的使用最好只是教学过程的一部分，大致说来，如果教师没有与学生沟通的其他方式，那么所传达的信息量不会超过所用的奖励和惩罚的总和。当学生只能通过“二十个问题”的方法学习重复Casabianca时，会感到非常痛苦，每个no都会是打击。因此还必须采用其他的“非情绪”沟通渠道，这样，通过惩罚和奖励就能让机器服从以某种符号语言给出的命令，此命令通过”非情绪”的渠道传达，这种语言的使用将会大大降低需要惩罚和奖励的次数。</p><p>​        对于什么样的复杂度更适合儿童机器可能有不同的看法，有人主张尽可能简单以保持通用性，有人主张嵌入一个完整的逻辑推理系统。在后一种情况下，大多数存储空间将被用来存储定义和命题，这些命题可能具有各种各样的形式，例如，确定的事实，推测，数学上证明的定理，权威给出的判断，具有逻辑形式却没有确定值的表达式等等。一些命题可以被称作“命令”，机器应该设计成当命令确定时立即自动执行合适的动作。例如，如果老师对机器说“现在做你的家庭作业”，这将使“老师说‘现在做你的家庭作业’”成为确定的事实；另一个事实可能是“老师说的一切都是对的。”这两个结合在一起将使“现在做家庭作业”成为确定的事实。而根据机器的构造规则，这意味着立即开始做家庭作业，效果还是令人满意的。机器的推理过程并不需要像严格的逻辑家所为，例如可能没有类型的层次结构，但这并不意味着出现类型谬误的几率会比我们从悬崖摔下的几率高。合理的命令（在系统内部表达，并不是系统规则的一部分），比如“不要使用一个类，除非它是老师提到类的一个子类”就与“不要让他接近边缘”具有相似的效果。 </p><p>​        没有肢体的机器人所能执行的指令具有智力性质，就像上面的例子（做家庭作业）。在这些指令中，最重要的是调节逻辑系统规则的执行顺序，因为在使用这个系统的每一步，都会有许多不同选择，在遵守逻辑系统规则的情况下，任意选择一个都是允许的。如何选择将区分聪明推理者还是愚蠢推理者，而不是区分正确推理者还是谬误推理者。导致这类命令的命题可能是 “当提到苏格拉底的时候，使用芭芭拉的三段论” 或者“如果有一个方法被证明比另外的方法快，不要使用慢的方法。”这些命题可能来自权威，也可能来自机器本身，例如科学归纳。</p><p>​        学习机器的想法对某些读者来说似乎有些矛盾，机器的操作规则怎么能改变呢？无论机器过去经历什么，未来会有什么变化，其操作规则都应该完整地描述机器会如何反应，即这些规则是不随时间变化的。确实是这样的，悖论的解释是，在学习过程中发生变化的规则是一类不那么自命不凡的规则，只声称短暂的有效性。读者可以将之与美国宪法类比。</p><p>​        学习机器的一个重要特征是，老师通常对其内部发生的事情不了解，尽管老师仍然可以在一定程度上预测其学生的行为，经过实验而设计良好（或程序）的儿童机器的后期教育尤其如此。这一点与使用机器进行正常计算的过程形成鲜明对比：那里的目标是要清楚明白机器在计算中任意时刻的状态，而要达到此目标则需要付出艰苦的努力。如此，“机器只能按我们的要求做事”的观点就会显得很奇怪了，能够输入机器的大部分程序终归会做一些我们无法理解的事情，或者被认为是完全随机的行为。智能行为应该和完全服从命令的行为有别，但又不能太大，不应该产生随机的行为或无限循环。通过教育和学习使我们的机器能够进行模仿游戏的一个重要结果是，“人类犯错误”可能会被相当自然忽略掉，即不需要专门的“指导”（读者应该将其与第[454]页上的观点调和）。学习的过程并不会产生百分之百的确定结果，否则就不是学习了。</p><p>​        在一个学习机器中加入随机元素应该是明智的（参见第[445]页）。当我们寻找某个问题的解时，随机元素相当有用。例如，我们想找到一个介于50和100之间的数，它等于各个数字的和的平方。我们可以从51，52开始一直试下去直到找到满足条件的数。另一个方法是随机的选数直到找到满足条件的数，这种方法的优点是不需要跟踪已经尝试过的值，但缺点是一个数可能重复试两次，如果存在多个，这点并不很重要。系统化方法的一个缺点，是可能存在很大一段数中并不存在解，但我们需要先判断它。现在的学习过程可以看成寻找满足老师的要求（或一些其他的标准)的行为，既然可能存在大量的可能解，随机方法可能比系统方法更好。应该注意到，在进化过程中有相似的方法，那里系统方法是不可能的，如何跟踪已经尝试过的不同基因组合，从而避免重复呢？</p><p>​        我们希望机器最终能和人在所有纯智力领域竞争，但何处是最好的开端？甚至这也成为困难的选择。许多人认为抽象的活动，例如国际象棋可能是最好的选择；也有人认为最好用钱给机器买最好的传感器，然后教它听说英语，和教一个正常的小孩一样，教它命名事物等等。我并不知道正确的答案，但是我想两方面都应该试试。</p><p>​        我们的目光所及，只是不远的前方，但是可以看到，那里有许多工作要做。</p>]]></content>
    
    
    <categories>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++系列：标准模板库STL(2)（八）</title>
    <link href="/2021/10/07/8.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL(2)/"/>
    <url>/2021/10/07/8.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL(2)/</url>
    
    <content type="html"><![CDATA[<p>更多参考其他文档<a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">菜鸟文档</a>、<a href="https://www.w3cschool.cn/cpp/">W3C</a>、<a href="https://docs.microsoft.com/zh-cn/cpp/cpp/?view=msvc-160">微软C++文档</a></p><h2 id="标准模板库STL-二"><a href="#标准模板库STL-二" class="headerlink" title="标准模板库STL(二)"></a>标准模板库STL(二)</h2><h3 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h3><ul><li><p><img src="C:/Users/71041/AppData/Roaming/Typora/typora-user-images/image-20210519211741200.png" alt="image-20210519211741200"></p></li><li><p><img src="https://i.loli.net/2021/10/07/YncqEI5PCbLHxmF.png" alt="image-20210523145529164"></p></li><li><p><img src="https://i.loli.net/2021/05/23/X6lgo25DMWJpGyS.png" alt="image-20210523145900866"></p><p><img src="https://i.loli.net/2021/05/23/89UVb4m2fJQCA5j.png" alt="image-20210523150145495"></p><p><img src="https://i.loli.net/2021/05/23/EGoCytDUZIY5cSW.png" alt="image-20210523150352195"></p></li><li><p><img src="https://i.loli.net/2021/05/23/UwNHOADj2R4sZdW.png" alt="image-20210523150504121"></p></li><li><p><img src="https://i.loli.net/2021/05/23/t5wxhQ9TYUSZsRX.png" alt="image-20210523150555021"></p></li><li><p><img src="https://i.loli.net/2021/05/23/VdYyFe57uWzw6jL.png" alt="image-20210523153351644"></p><p><img src="https://i.loli.net/2021/05/23/4H3kD61qKNtsrOU.png" alt="image-20210523153445049"></p><p><img src="https://i.loli.net/2021/05/23/4A8fuaSWz2LRhci.png" alt="image-20210523154511142"></p><p><img src="https://i.loli.net/2021/05/23/IjdcQ7yJmxFspBV.png" alt="image-20210523154635029"></p></li><li><p><img src="https://i.loli.net/2021/05/23/XAQ1jJvyfRdcZPF.png" alt="image-20210523154815634"></p><p> <img src="https://i.loli.net/2021/05/23/PvBwUosQyGS71Zd.png" alt="image-20210523154851574"></p></li></ul><h3 id="map-和-multimap"><a href="#map-和-multimap" class="headerlink" title="map 和 multimap"></a>map 和 multimap</h3><ul><li><p><img src="https://i.loli.net/2021/05/23/k2fhr8wRUzXte7S.png" alt="image-20210523160127277"></p><p><img src="https://i.loli.net/2021/05/23/3ioKEgcLWRw9NjS.png" alt="image-20210523160230940"></p><p><img src="https://i.loli.net/2021/05/23/yO5ME9aw6mkRBub.png" alt="image-20210523160250527"></p><p><img src="https://i.loli.net/2021/05/23/zvBFLi1d6nE3CXl.png" alt="image-20210523160532521"></p></li><li><p><img src="https://i.loli.net/2021/05/23/yHtiZ7Xoun5aErd.png" alt="image-20210523160605624"></p><p><img src="https://i.loli.net/2021/05/23/XTdUnpZvSIhO7Pl.png" alt="image-20210523160636008"></p></li><li><p><img src="https://i.loli.net/2021/05/23/JVYbqwiNoCgt1nT.png" alt="image-20210523160949791"></p><p> <img src="https://i.loli.net/2021/05/23/ldVp2bJK6wiq9cu.png" alt="image-20210523161150767"></p><img src="https://i.loli.net/2021/05/23/waLQknUbAmvIVsq.png" alt="image-20210523161624085" style="zoom: 67%;" /><p><img src="https://i.loli.net/2021/05/23/O3cQFDHlYqurCW2.png" alt="image-20210523161702098"></p><p><img src="https://i.loli.net/2021/05/23/YDk8EihF1unTe6x.png" alt="image-20210523161800386"></p></li><li><p><img src="https://i.loli.net/2021/05/23/N59h6jkiGu8UrTA.png" alt="image-20210523161819026"></p></li><li><p><img src="https://i.loli.net/2021/05/23/t7vxK9F1gIjlOWh.png" alt="image-20210523161919827"></p></li><li><p><img src="https://i.loli.net/2021/05/23/CKUj4WG57iZXpx8.png" alt="image-20210523161945341"></p><p><img src="https://i.loli.net/2021/10/07/nwxpgYQDF2yeri3.png" alt="image-20210523161959765"></p><p><img src="https://i.loli.net/2021/10/07/4cgAn9Nq2yC8daW.png" alt="image-20210523162154781"></p></li></ul><h3 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h3><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><ul><li><img src="https://i.loli.net/2021/10/07/bhuSIRJLYAft1rn.png" alt="image-20210523162318408"></li></ul><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><ul><li><img src="https://i.loli.net/2021/10/07/1tKg3Uh9MkxVPfn.png" alt="image-20210523162404097"></li></ul><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><ul><li><p><img src="https://i.loli.net/2021/10/07/YHTDiUx3nOsKg49.png" alt="image-20210523162508050"></p><img src="https://i.loli.net/2021/10/07/ioTRn7FpjAQYsPH.png" alt="image-20210523162633173" style="zoom:50%;" /></li><li><p><img src="https://i.loli.net/2021/10/07/j9t5XuPUhN2nVw4.png" alt="image-20210523162659461"></p><p><img src="https://i.loli.net/2021/10/07/QO2uomXAtYMe6Sq.png" alt="image-20210523162730836"></p></li><li><p><img src="https://i.loli.net/2021/10/07/HjNPTstlv8cYBkC.png" alt="image-20210523162816911"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记(从基础到高级):后篇</title>
    <link href="/2021/10/07/Linux%E7%AC%94%E8%AE%B0(%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E9%AB%98%E7%BA%A7)%EF%BC%9A%E5%90%8E%E7%AF%87/"/>
    <url>/2021/10/07/Linux%E7%AC%94%E8%AE%B0(%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E9%AB%98%E7%BA%A7)%EF%BC%9A%E5%90%8E%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>基于CentOS 7 ，<a href="https://wiki.centos.org/FrontPage">CentOS官方</a></p><h2 id="Uuntu"><a href="#Uuntu" class="headerlink" title="Uuntu"></a>Uuntu</h2><ul><li><img src="https://i.loli.net/2021/09/09/BCknZcXxFzV9vTd.png" alt="image-20210909142901085"></li></ul><h3 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a>root用户</h3><ul><li><img src="https://i.loli.net/2021/09/09/ufdwbW9CDlPYoaZ.png"></li><li><img src="https://i.loli.net/2021/09/09/68tUSuf3gXMJQNq.png"></li></ul><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><ul><li><img src="https://i.loli.net/2021/10/02/oFfCTkR1P8S3sU4.png"></li></ul><h2 id="APT软件管理和远程登陆"><a href="#APT软件管理和远程登陆" class="headerlink" title="APT软件管理和远程登陆"></a>APT软件管理和远程登陆</h2><ul><li><img src="https://i.loli.net/2021/09/09/kjcmnbpsaUCZ9Sg.png"></li></ul><h3 id="软件操作相关命令"><a href="#软件操作相关命令" class="headerlink" title="软件操作相关命令"></a>软件操作相关命令</h3><p><img src="https://i.loli.net/2021/09/09/HnxtWu51CSQcIPM.png"></p><h3 id="更新ubantu软件下载地址"><a href="#更新ubantu软件下载地址" class="headerlink" title="更新ubantu软件下载地址"></a>更新ubantu软件下载地址</h3><ul><li><p>先备份文件</p></li><li><p><img src="https://i.loli.net/2021/10/02/K9TxLkU42wWqpvZ.png"></p></li><li><p><img src="https://i.loli.net/2021/09/09/9d71GbyMnR4QlAo.png"></p></li><li><p><img src="https://i.loli.net/2021/09/09/7x8SPdfAzYnvbN4.png"></p></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><img src="https://i.loli.net/2021/09/09/HgZUNmDCJ4cp25W.png"></li></ul><h3 id="远程登陆"><a href="#远程登陆" class="headerlink" title="远程登陆"></a>远程登陆</h3><p><img src="https://i.loli.net/2021/10/02/FPtVJybI3KTAaCx.png"></p><p><img src="https://i.loli.net/2021/09/09/OFjmApokLSNsW73.png"></p><p>netstat -anp | more</p><p><img src="https://i.loli.net/2021/09/09/oqCdE5nQN7aJUgt.png"></p><p>没有22号端口</p><p><img src="https://i.loli.net/2021/10/02/jFKTv5p6yxAmOie.png"></p><p><img src="https://i.loli.net/2021/10/02/79S8DBp4sbPY1fH.png" alt="image-20210909153749128"></p><p>ifconfig</p><h3 id="linux对Linux"><a href="#linux对Linux" class="headerlink" title="linux对Linux"></a>linux对Linux</h3><p><img src="https://i.loli.net/2021/09/09/SjUEpMDocatmG5Y.png"></p><p><img src="https://i.loli.net/2021/10/02/IFQiLW28RZxM9VG.png"></p><h2 id="Centos8-1-8-2"><a href="#Centos8-1-8-2" class="headerlink" title="Centos8.1/8.2"></a>Centos8.1/8.2</h2><p>生产环境选择最小安装</p><p><img src="https://i.loli.net/2021/10/02/9hBUEJDI1i8oGMf.png"></p><p><img src="https://i.loli.net/2021/09/09/sxJVWpiLb6ceSFU.png"></p><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><ul><li><img src="https://i.loli.net/2021/09/09/dvqZuFKwlQoN36E.png"></li><li><img src="https://i.loli.net/2021/09/09/8VSiXE3tvO9UhYn.png"></li></ul><h3 id="系统常用日志"><a href="#系统常用日志" class="headerlink" title="系统常用日志"></a>系统常用日志</h3><ul><li><p><img src="https://i.loli.net/2021/09/09/FEgXHkUG8AuY5yI.png" alt="image-20210909161851631"></p></li><li><p><img src="https://i.loli.net/2021/10/02/wJ2y6eZVpzmSrN9.png"></p></li></ul><h3 id="日志管理服务-rsyslogd"><a href="#日志管理服务-rsyslogd" class="headerlink" title="日志管理服务 rsyslogd"></a>日志管理服务 rsyslogd</h3><ul><li><img src="https://i.loli.net/2021/10/02/3TuqVnWmpKtRr51.png"></li><li><img src="https://i.loli.net/2021/09/09/IpR9zewNrsUmbnQ.png"></li><li><img src="https://i.loli.net/2021/10/02/oCD8Okj5wNecgRy.png"></li><li><img src="https://i.loli.net/2021/10/02/JTipHQu9NRhxqkc.png" alt="image-20210911085012298"></li><li><img src="https://i.loli.net/2021/10/02/jBMvJ6NeH5qKZgr.png" alt="image-20210911085223101"></li><li><img src="https://i.loli.net/2021/10/02/4eun6OGcQUoXNPj.png" alt="image-20210911085254912"></li><li><img src="https://i.loli.net/2021/09/11/zBdHuLNYC52wWoG.png" alt="image-20210911085345951"></li><li><img src="https://i.loli.net/2021/10/02/4SrCY9UKoMD6ZWO.png" alt="image-20210911085615920"></li><li><img src="https://i.loli.net/2021/09/11/afzdLOmEHejrYMV.png" alt="image-20210911090137186"></li><li>用户是主机名字</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li><img src="https://i.loli.net/2021/10/02/PrIOEzi2dGufAsD.png" alt="image-20210911090327002"></li><li><img src="https://i.loli.net/2021/10/02/1gC8c7yRwBKNXTQ.png" alt="image-20210911091138372"></li><li><img src="https://i.loli.net/2021/10/02/6wA9lY2TmJqonc8.png"></li><li><img src="https://i.loli.net/2021/10/02/xW95QOmKaj1zUY4.png"></li></ul><h3 id="日志轮替"><a href="#日志轮替" class="headerlink" title="日志轮替"></a>日志轮替</h3><ul><li><img src="https://i.loli.net/2021/10/02/8bkNGAlwcOmxqDC.png"></li><li><img src="https://i.loli.net/2021/10/02/XspeGOhEF81txHT.png"></li><li><img src="https://i.loli.net/2021/10/02/ns3P6oUWbZKtBel.png" alt="image-20210911091817445"></li><li><img src="https://i.loli.net/2021/10/02/28wog1VkRA39isn.png" alt="image-20210911092349413"></li></ul><h3 id="把自己的日志加入日志轮替"><a href="#把自己的日志加入日志轮替" class="headerlink" title="把自己的日志加入日志轮替"></a>把自己的日志加入日志轮替</h3><ul><li><img src="https://i.loli.net/2021/10/02/LHl8gr7EtxfyaiV.png" alt="image-20210911093909111"></li><li><img src="https://i.loli.net/2021/10/02/wicgLuAS4xjWJP9.png" alt="image-20210911094143387"></li></ul><h3 id="日志轮替机制"><a href="#日志轮替机制" class="headerlink" title="日志轮替机制"></a>日志轮替机制</h3><ul><li><img src="https://i.loli.net/2021/09/11/eghKf6tTwm7F5SE.png" alt="image-20210911094618331"></li><li><img src="https://i.loli.net/2021/10/02/BCys6KwZLxPXYWq.png" alt="image-20210911094923484"></li></ul><h3 id="查看内存日志"><a href="#查看内存日志" class="headerlink" title="查看内存日志"></a>查看内存日志</h3><ul><li><img src="https://i.loli.net/2021/10/02/CmhdJnw6iWO2c5U.png" alt="image-20210911100055825"></li></ul><h2 id="Linux系统定制"><a href="#Linux系统定制" class="headerlink" title="Linux系统定制"></a>Linux系统定制</h2><ul><li><p><img src="https://i.loli.net/2021/10/02/Vefmp1qQhtb5w2r.png" alt="image-20210911100526906"></p></li><li><p><img src="https://i.loli.net/2021/10/02/FzpjGmlsbZOPov5.png" alt="image-20210911100547893"></p></li><li><p><img src="https://i.loli.net/2021/10/02/xt2XoEHV6GQKjBD.png" alt="image-20210911100648997"></p></li><li><p><img src="https://i.loli.net/2021/10/02/xpn2fhkwZabDmHy.png" alt="image-20210911105902166"></p></li></ul><h2 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h2><ul><li><img src="https://i.loli.net/2021/09/16/8lonwiTDzRKdONm.png" alt="image-20210916085659011"></li><li><img src="https://i.loli.net/2021/10/02/qsVDCEaeP3b5SK4.png" alt="image-20210916085857737"></li><li><img src="https://i.loli.net/2021/10/02/tSX961fmgWrDcJz.png" alt="image-20210916090127825"></li></ul><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><img src="https://i.loli.net/2021/09/16/27Y6S84BQqObyeF.png" alt="image-20210916134707189"></li></ul><h3 id="init中的main-c"><a href="#init中的main-c" class="headerlink" title="init中的main.c"></a>init中的main.c</h3><ul><li>void main(void)<img src="https://i.loli.net/2021/10/02/yCYS5kUosZ8rqIj.png" alt="image-20210916135629938"></li></ul><h2 id="Linux内核最新版和内核升级"><a href="#Linux内核最新版和内核升级" class="headerlink" title="Linux内核最新版和内核升级"></a>Linux内核最新版和内核升级</h2><ul><li><img src="https://i.loli.net/2021/09/16/V3Q6ewOc5rgUaiv.png" alt="image-20210916140739159"></li><li>yum update kernel //升级内核</li></ul><h2 id="Linux的系统与备份"><a href="#Linux的系统与备份" class="headerlink" title="Linux的系统与备份"></a>Linux的系统与备份</h2><ul><li><img src="https://i.loli.net/2021/09/16/kAPY93Tog6HqvIc.png" alt="image-20210916141423976"></li><li><img src="https://i.loli.net/2021/09/16/pC7JbONqBgntKiu.png" alt="image-20210916141437526"></li></ul><h3 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h3><ul><li><img src="https://i.loli.net/2021/10/02/WSEM4Hclg97nZBr.png" alt="image-20210916141611441"></li><li><img src="https://i.loli.net/2021/10/02/j1sSqMI2F6ALCEi.png" alt="image-20210916142500851"></li><li><img src="https://i.loli.net/2021/09/16/FVxC56kwhAWsMag.png" alt="image-20210916142531736"></li><li><img src="https://i.loli.net/2021/09/16/w9y21HprbZcg8jJ.png" alt="image-20210916142737952"></li></ul><h3 id="restore"><a href="#restore" class="headerlink" title="restore"></a>restore</h3><ul><li><img src="https://i.loli.net/2021/09/16/8VTNZmiv2uAa14I.png" alt="image-20210916145021305"></li><li><img src="https://i.loli.net/2021/10/02/iaphYOglA3vDcxK.png" alt="image-20210916145427461"></li><li><img src="https://i.loli.net/2021/10/02/tqgTYnFvfaxOdKJ.png" alt="image-20210916145446421"></li><li><img src="https://i.loli.net/2021/09/16/5tNaWfZy9BjR2JY.png" alt="image-20210916145520921"></li></ul><h2 id="Linux可视化管理webmin和bt运维工具"><a href="#Linux可视化管理webmin和bt运维工具" class="headerlink" title="Linux可视化管理webmin和bt运维工具"></a>Linux可视化管理webmin和bt运维工具</h2><h3 id="webin"><a href="#webin" class="headerlink" title="webin"></a>webin</h3><ul><li><img src="https://i.loli.net/2021/09/16/6G4NcMiBmHzE8sC.png" alt="image-20210916145705986"></li><li><img src="https://i.loli.net/2021/10/02/uJCGI3iT5crEVKL.png" alt="image-20210916145729555"></li><li><img src="https://i.loli.net/2021/10/02/ZJASdrzvkXN8YjF.png" alt="image-20210916145901813"></li></ul><h3 id="bt"><a href="#bt" class="headerlink" title="bt"></a>bt</h3><ul><li><img src="https://i.loli.net/2021/09/16/E71hejQXJcRlWUL.png" alt="image-20210916150649197"></li><li><img src="https://i.loli.net/2021/09/16/ZV7YtL1QHkOmUBu.png" alt="image-20210916151600943"></li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h2 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h2><p><img src="https://i.loli.net/2021/10/02/YsdbAwzPOylGuq4.png" alt="image-20210916152816598"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记(从基础到高级):Shell编程</title>
    <link href="/2021/10/07/Linux%E7%AC%94%E8%AE%B0(%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E9%AB%98%E7%BA%A7)%EF%BC%9AShell%E7%BC%96%E7%A8%8B/"/>
    <url>/2021/10/07/Linux%E7%AC%94%E8%AE%B0(%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E9%AB%98%E7%BA%A7)%EF%BC%9AShell%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>基于CentOS 7 ，<a href="https://wiki.centos.org/FrontPage">CentOS官方</a></p><h2 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h2><h3 id="什么是shell"><a href="#什么是shell" class="headerlink" title="什么是shell"></a>什么是shell</h3><ul><li><img src="https://i.loli.net/2021/10/02/8Vf7PrBOpIvLYKH.png" alt="image-20210819123945977"></li></ul><h3 id="shell脚本的执行方式"><a href="#shell脚本的执行方式" class="headerlink" title="shell脚本的执行方式"></a>shell脚本的执行方式</h3><ul><li><img src="https://i.loli.net/2021/10/02/SyubWIZGXFUi9tn.png" alt="image-20210819153805922"></li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>echo &quot;hello,world~&quot;<br></code></pre></div></td></tr></table></figure><h3 id="shell的变量"><a href="#shell的变量" class="headerlink" title="shell的变量"></a>shell的变量</h3><ul><li><img src="https://i.loli.net/2021/10/02/FJVtCP9sR8N6zep.png" alt="image-20210819154508379"></li><li><img src="https://i.loli.net/2021/10/02/EpD7RcLTftJAWuU.png" alt="image-20210819161032530"></li><li><img src="https://i.loli.net/2021/10/02/D5PSZyGiEHvzBCd.png" alt="image-20210819161833087"></li><li><img src="https://i.loli.net/2021/10/02/ikaJIS3jfDEZ67K.png" alt="image-20210819162057317"></li></ul><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><ul><li><p><img src="https://i.loli.net/2021/10/02/mERw69Xg8jbPIGM.png" alt="image-20210819170304588"></p></li><li><p><img src="https://i.loli.net/2021/10/02/TIi1nBhRLDVcMX2.png" alt="image-20210819170149321"></p></li><li><p><img src="https://i.loli.net/2021/10/02/dkl1UHr7AGRTm6q.png" alt="image-20210819170712395"></p></li><li><p><img src="https://i.loli.net/2021/10/02/4otrUIv9Q8513iE.png" alt="image-20210819170804034"></p></li><li><p><img src="https://i.loli.net/2021/10/02/jctPKUWirH3vdLu.png" alt="image-20210819170906020"></p></li><li><p><img src="https://i.loli.net/2021/10/02/mdyI1D39xqOpfU8.png" alt="image-20210819170923046"></p></li><li><p>shell多行注释</p><p><img src="https://i.loli.net/2021/10/02/GXAYPqUTBreHv7k.png" alt="image-20210819171315447"></p></li></ul><h3 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h3><ul><li><img src="https://i.loli.net/2021/10/02/2eq8RfsM9BdWz1b.png" alt="image-20210819171442142"></li><li><img src="https://i.loli.net/2021/10/02/z8SyxJVvLlkI5hA.png" alt="image-20210819173529816"></li><li><img src="https://i.loli.net/2021/10/02/UORnIzQT4G2Powq.png" alt="image-20210819173542441"></li></ul><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><ul><li><img src="https://i.loli.net/2021/10/02/13ZbahVRKzrodBW.png" alt="image-20210819173618257"></li><li><img src="https://i.loli.net/2021/10/02/tqbUyfQnPZgOljH.png" alt="image-20210820124736055"></li><li><img src="https://i.loli.net/2021/10/02/WsxipCUvob9YzFS.png" alt="image-20210820124546855"></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><img src="https://i.loli.net/2021/10/02/m8ik5cguvsStBDd.png" alt="image-20210820125315981"></li><li><img src="https://i.loli.net/2021/10/02/2UP8u3AdvDCrSxV.png" alt="image-20210820170156514"></li><li><img src="https://i.loli.net/2021/10/02/RnTfUNBkdxZXq9e.png" alt="image-20210820170120625"></li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><ul><li><img src="https://i.loli.net/2021/10/02/87Kq6HWr2xSiknP.png" alt="image-20210820170428133"></li><li><img src="https://i.loli.net/2021/10/02/58aMynIH7cw9SOW.png" alt="image-20210820170450446"></li><li><img src="https://i.loli.net/2021/10/02/JkM7xdPFecytSZA.png" alt="image-20210822132129203"></li><li>中括号内有字符即为真，没有内容为假</li><li>中括号前后有空格</li></ul><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><ul><li><img src="https://i.loli.net/2021/10/02/1RsNyFGjtIfYVdL.png" alt="image-20210906194741026"></li><li><img src="https://i.loli.net/2021/10/02/2PneYvNRf5WCE9F.png" alt="image-20210908160318523"></li><li><img src="https://i.loli.net/2021/10/02/Axji3T76HQlkzYN.png" alt="image-20210908160343714"></li><li><img src="https://i.loli.net/2021/09/09/ekLa2sSFtHRJrvW.png" alt="image-20210908160505348"></li><li><img src="https://i.loli.net/2021/09/08/PTsBzSmhA8jJaeR.png" alt="image-20210908161042941"></li><li><img src="https://i.loli.net/2021/09/08/t89xiZhVJB2Ce4A.png" alt="image-20210908161139192"></li><li><img src="https://i.loli.net/2021/09/08/Xaxr3Fy9Bvld7fN.png" alt="image-20210908161952366"></li><li><img src="https://i.loli.net/2021/09/09/PLoVuN8miW3zQTA.png" alt="image-20210908162800387"></li><li><img src="https://i.loli.net/2021/09/08/pH9egOqKSdvnTlj.png" alt="image-20210908162841649"></li><li><img src="https://i.loli.net/2021/09/09/Lo1sgY4HpuwkIrP.png" alt="image-20210909130816848"></li><li><img src="https://i.loli.net/2021/09/09/vJFSeLwQD2Z4Bzj.png" alt="image-20210909130935042"></li><li><img src="https://i.loli.net/2021/09/09/7PhAkm6jSRzpC4Q.png" alt="image-20210909131629080"></li><li><img src="https://i.loli.net/2021/09/09/fMh159doaLSusBb.png" alt="image-20210909131706055"></li><li><img src="https://i.loli.net/2021/09/09/CY5FvkPHIB8ZOdt.png" alt="image-20210909131728406"></li></ul><h3 id="read读取控制台"><a href="#read读取控制台" class="headerlink" title="read读取控制台"></a>read读取控制台</h3><ul><li><img src="https://i.loli.net/2021/10/02/kG5NwPaWuzgDTnH.png" alt="image-20210909133221768"></li><li><img src="https://i.loli.net/2021/09/09/3lUvCfYSGneOyk9.png" alt="image-20210909133756311"></li><li><img src="https://i.loli.net/2021/09/09/wBIq4zuRhbTFfQW.png" alt="image-20210909133824276"></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>系统函数</p></li><li><p><img src="https://i.loli.net/2021/10/02/X4BEWDxpMcKGi8L.png" alt="image-20210909133858500"></p></li><li><p><img src="https://i.loli.net/2021/10/02/xKOb6RqhSfVPeWs.png" alt="image-20210909134145564"></p></li><li><p>自定义函数</p></li><li><p><img src="https://i.loli.net/2021/09/09/TrgZu5GxYVDJ1A7.png" alt="image-20210909134808788"></p></li><li><p><img src="https://i.loli.net/2021/09/09/nvpm5q9o4syKXe7.png" alt="image-20210909135315755"></p></li><li><p><img src="https://i.loli.net/2021/09/09/FJxQ8shoDgayCpK.png" alt="image-20210909135249294"></p></li></ul><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><ul><li><img src="https://i.loli.net/2021/09/09/Ol25URrBifV6yLJ.png" alt="image-20210909135416732"></li><li><img src="https://i.loli.net/2021/09/09/YK5rSQoWqbG93LH.png" alt="image-20210909142331103"></li><li><img src="https://i.loli.net/2021/09/09/yP8rfGN9Ze4FEUX.png" alt="image-20210909142518517"></li><li><img src="https://i.loli.net/2021/10/02/M96YZXcdBagj3iE.png" alt="image-20210909142713558"></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记(从基础到高级):前篇</title>
    <link href="/2021/10/07/Linux%E7%AC%94%E8%AE%B0(%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E9%AB%98%E7%BA%A7)%EF%BC%9A%E5%89%8D%E7%AF%87/"/>
    <url>/2021/10/07/Linux%E7%AC%94%E8%AE%B0(%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E9%AB%98%E7%BA%A7)%EF%BC%9A%E5%89%8D%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>基于CentOS 7 ，<a href="https://wiki.centos.org/FrontPage">CentOS官方</a></p><h2 id="linux使用的范围"><a href="#linux使用的范围" class="headerlink" title="linux使用的范围"></a>linux使用的范围</h2><ul><li>linux运维工程师  规划 优化 监控 故障处理</li><li>linux嵌入式工程师  嵌入式的应用开发</li></ul><h2 id="Linux的应用领域"><a href="#Linux的应用领域" class="headerlink" title="Linux的应用领域"></a>Linux的应用领域</h2><ul><li>桌面开发</li><li>服务器领域  linux免费稳定高效</li><li>嵌入式领域  低成本 对软件进行裁剪  智能家居  物联网</li></ul><h2 id="Linux入门"><a href="#Linux入门" class="headerlink" title="Linux入门"></a>Linux入门</h2><ul><li><p>常见的操作系统很多</p></li><li><p>作者</p><p><img src="https://i.loli.net/2021/07/12/7jgW3HzdMLqEBCS.png" alt="image-20210712093931438"></p></li><li><p>linux的发行版本</p><p><img src="https://i.loli.net/2021/07/12/Y3QhUl8Xvt57TZ9.png" alt="image-20210712094742884"></p><p><img src="https://i.loli.net/2021/08/04/6zwS2GtoHpkdOJI.png" alt="image-20210712094938821"></p></li></ul><h3 id="Linux和Unix的关系"><a href="#Linux和Unix的关系" class="headerlink" title="Linux和Unix的关系"></a>Linux和Unix的关系</h3><ul><li>unix是怎么来的<ul><li>贝尔实验室</li><li>多用户分时操作系统multics，b语言到c语言</li></ul></li><li><img src="https://i.loli.net/2021/07/12/5FDACoegU6lHrjB.png" alt="image-20210712100301087"></li></ul><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><ul><li>VM和Linux的关系</li><li><img src="https://i.loli.net/2021/07/12/ryq9hufvaM5Sgt1.png" alt="image-20210712101235420"></li><li>centos安装<ul><li>Linux分区设置<ul><li>boot分区  1g</li><li>交换分区swap  分配的内存大小 2g<ul><li>零时充当内存，速度较慢</li></ul></li><li>根分区  17g</li></ul></li></ul></li></ul><h3 id="虚拟机网络连接模式"><a href="#虚拟机网络连接模式" class="headerlink" title="虚拟机网络连接模式"></a>虚拟机网络连接模式</h3><ul><li>同一个网段可以相互通讯</li><li>桥接模式    虚拟系统可以和外部系统相互通讯，容易造成ip冲突</li><li>NAT模式   相当于在一个有虚拟机的系统中有两个网段，虚拟机有一个专属的和系统通讯的网段，系统有一个和外界通讯的网段，外界网络不能直接与系统内部的虚拟机通讯，需要通过系统和虚拟机的网络实现通讯。</li><li>仅主机模式</li></ul><h3 id="虚拟机的克隆"><a href="#虚拟机的克隆" class="headerlink" title="虚拟机的克隆"></a>虚拟机的克隆</h3><ul><li>用已有的安装的linux系统，将虚拟机文件拷贝到另外一个文件夹，再通过vm软件打开</li><li>vm克隆操作，先关闭在运行的操作系统，在虚拟机打开处右键，一般使用创建完整克隆，会出现新的虚拟机，和被克隆的虚拟机系统在同一个文件夹下</li></ul><h3 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h3><ul><li>避免系统奔溃，返回正常状态</li><li>虚拟机开启处，右键快照管理</li></ul><h3 id="虚拟机迁移和删除"><a href="#虚拟机迁移和删除" class="headerlink" title="虚拟机迁移和删除"></a>虚拟机迁移和删除</h3><ul><li>剪贴虚拟机文件夹</li><li>删除虚拟机文件夹</li><li>vm移除，文件并没有删除，而是移除了指向</li></ul><h3 id="安装vmtools"><a href="#安装vmtools" class="headerlink" title="安装vmtools"></a>安装vmtools</h3><ul><li>安装vmtools，可以让我们在windows下更好的管理vm虚拟机</li><li>可以设置windows和centos的共享文件夹</li><li><img src="https://i.loli.net/2021/08/04/wBjdnOPTSurFfpU.png" alt="image-20210722091359440"></li></ul><h3 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h3><p><img src="https://i.loli.net/2021/08/04/qhiLFHfJtr1mlgD.png" alt="image-20210722093404096"></p><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>记住Linux的树状目录</li><li>linux中一切皆文件，硬件也映射为文件</li></ul><h3 id="具体目录结构"><a href="#具体目录结构" class="headerlink" title="具体目录结构"></a>具体目录结构</h3><ul><li><p><img src="https://i.loli.net/2021/08/04/R5VvaAPHYwGjLkp.png" alt="image-20210722094415383"></p></li><li><p><img src="https://i.loli.net/2021/07/22/wVjcrRx1auNEKYZ.png" alt="image-20210722094841172"></p></li><li><p><img src="https://i.loli.net/2021/07/22/K7IkvTVEyH5aYNx.png" alt="image-20210722094858885"></p></li><li><p><img src="https://i.loli.net/2021/07/22/g5LRDFU6p1qHeAO.png" alt="image-20210722095627180"></p></li><li><p><img src="https://i.loli.net/2021/08/04/4UKXZsPfvcRBiGT.png" alt="image-20210722095823294"></p></li></ul><h2 id="远程登陆Linux服务器"><a href="#远程登陆Linux服务器" class="headerlink" title="远程登陆Linux服务器"></a>远程登陆Linux服务器</h2><h3 id="为什么要远程登录"><a href="#为什么要远程登录" class="headerlink" title="为什么要远程登录"></a>为什么要远程登录</h3><p><img src="https://i.loli.net/2021/10/02/if9HBXjcxO5VwRt.png" alt="image-20210804145351793"></p><ul><li>正式上线的项目是运行在公网的</li><li>开发小组共享</li><li>公网，有ip可公共访问的网络</li><li>远程登陆工具 xshell</li><li>文件上传下载 xftp</li></ul><h3 id="远程登陆-Xshell6"><a href="#远程登陆-Xshell6" class="headerlink" title="远程登陆 Xshell6"></a>远程登陆 Xshell6</h3><ul><li><p><img src="https://i.loli.net/2021/08/04/AFRGqj9B4rNmwPW.png" alt="image-20210804145412194"></p></li><li><p>下载网址  <a href="https://www.netsarang.com/en/">https://www.netsarang.com/en/</a></p></li><li><p>需要知道Linux公网的IP地址</p></li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">ifconfig   <span class="hljs-comment">//获取Linux的IP地址的指令</span><br><br><span class="hljs-comment">//如下</span><br>[qxd@qxdEdu01 ~]$ ifconfig<br>ens33: flags=<span class="hljs-number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="hljs-number">1500</span><br>        inet <span class="hljs-number">192.168</span><span class="hljs-number">.182</span><span class="hljs-number">.134</span>  netmask <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span>  broadcast <span class="hljs-number">192.168</span><span class="hljs-number">.182</span><span class="hljs-number">.255</span><br>        inet6 fe80::febe:a278:c225:edcf  prefixlen <span class="hljs-number">64</span>  scopeid <span class="hljs-number">0x20</span>&lt;link&gt;<br>        ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>c:<span class="hljs-number">29</span>:<span class="hljs-number">80</span>:b3:b1  txqueuelen <span class="hljs-number">1000</span>  (Ethernet)<br>        RX packets <span class="hljs-number">352</span>  bytes <span class="hljs-number">235641</span> (<span class="hljs-number">230.1</span> KiB)<br>        RX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        TX packets <span class="hljs-number">252</span>  bytes <span class="hljs-number">21589</span> (<span class="hljs-number">21.0</span> KiB)<br>        TX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br><br>lo: flags=<span class="hljs-number">73</span>&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="hljs-number">65536</span><br>        inet <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>  netmask <span class="hljs-number">255.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br>        inet6 ::<span class="hljs-number">1</span>  prefixlen <span class="hljs-number">128</span>  scopeid <span class="hljs-number">0x10</span>&lt;host&gt;<br>        loop  txqueuelen <span class="hljs-number">1000</span>  (Local Loopback)<br>        RX packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0.0</span> B)<br>        RX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        TX packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0.0</span> B)<br>        TX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br><br>virbr0: flags=<span class="hljs-number">4099</span>&lt;UP,BROADCAST,MULTICAST&gt;  mtu <span class="hljs-number">1500</span><br>        inet <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.1</span>  netmask <span class="hljs-number">255.255</span><span class="hljs-number">.255</span><span class="hljs-number">.0</span>  broadcast <span class="hljs-number">192.168</span><span class="hljs-number">.122</span><span class="hljs-number">.255</span><br>        ether <span class="hljs-number">52</span>:<span class="hljs-number">54</span>:<span class="hljs-number">00</span>:ed:b2:<span class="hljs-number">08</span>  txqueuelen <span class="hljs-number">1000</span>  (Ethernet)<br>        RX packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0.0</span> B)<br>        RX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        TX packets <span class="hljs-number">0</span>  bytes <span class="hljs-number">0</span> (<span class="hljs-number">0.0</span> B)<br>        TX errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><ul><li><p>xshell设置</p></li><li><p>文件 -&gt; 新建 </p></li><li><p>名称随意，主机地址写为Linux公网的IP地址，协议为ssh</p></li><li><p><img src="https://i.loli.net/2021/08/04/mB9vX8uGbxicTAR.png" alt="image-20210804150908809"></p></li><li><p><img src="https://i.loli.net/2021/08/04/7BtCZm31OJcbHIa.png" alt="image-20210804151139038"></p></li><li><p>已经可以远程登陆Linux系统</p></li></ul><h3 id="安装xftp7"><a href="#安装xftp7" class="headerlink" title="安装xftp7"></a>安装xftp7</h3><ul><li><p><img src="https://i.loli.net/2021/08/04/PXZjDJdtWNlmywn.png" alt="image-20210804151349826"></p></li><li><p>新建 协议 SFTP</p><p><img src="https://i.loli.net/2021/08/04/vdqJhyMIz6jSXWL.png" alt="image-20210804151631068"></p></li><li><p><img src="https://i.loli.net/2021/08/04/CHYlPj7SFmonhXE.png" alt="image-20210804151809233"></p></li><li><p>可以实现远程的文件传输</p></li></ul><h2 id="vi和vim的基本介绍"><a href="#vi和vim的基本介绍" class="headerlink" title="vi和vim的基本介绍"></a>vi和vim的基本介绍</h2><ul><li><p>vi 文本编辑器  类似于Windows记事本</p></li><li><p>vim 是vi 的增强版</p></li><li><p>常用三种模式 </p><ul><li>正常模式</li><li>插入模式</li><li>命令行模式</li></ul></li><li><p>实际工作中 一般用xshell</p></li><li><p>vim和vi的各个模式的切换图</p></li><li><p><img src="https://i.loli.net/2021/08/04/nUarF6e3oXCLQTK.png" alt="image-20210804152853605"></p></li><li><p><img src="https://i.loli.net/2021/10/02/dV7qt3AW8Ue5cxH.png" alt="image-20210804160623597"></p></li><li><p>vim 键位图  <a href="https://blog.csdn.net/www_helloworld_com/article/details/103610639">https://blog.csdn.net/www_helloworld_com/article/details/103610639</a></p></li><li><p>不需要花太多精力</p></li><li><p><img src="https://i.loli.net/2021/10/02/GSNnceFDdopkujs.png" alt="image-20210804160802649"></p></li></ul><h2 id="开机、重启和用户登陆注销"><a href="#开机、重启和用户登陆注销" class="headerlink" title="开机、重启和用户登陆注销"></a>开机、重启和用户登陆注销</h2><h3 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h3><ul><li><p><img src="https://i.loli.net/2021/08/05/QzEtMLJDhPwq64H.png" alt="image-20210805173715212"></p></li><li><p><img src="https://i.loli.net/2021/10/02/EDJbvi1ASOrNnad.png" alt="image-20210805215530935"></p></li><li><p>==一般不用root登入==</p></li><li><p>在多用户级别下才能用logout</p></li><li><p><img src="https://i.loli.net/2021/08/05/TM9PnHzVUN1pGYD.png" alt="image-20210805220000625"></p></li><li><p>再次logout则退出系统</p></li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul><li><p>基本介绍</p><p><img src="https://i.loli.net/2021/08/05/zIRg4B7bYva1QEV.png" alt="image-20210805220138976"></p><p>一般都是在root权限下</p></li></ul><h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">useradd 用户名  <span class="hljs-comment">//默认在home目录下创建一个新的用户</span><br>useradd -d /home/test king <span class="hljs-comment">//在指定目录下创建一个新用户</span><br></code></pre></div></td></tr></table></figure><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">passwd <span class="hljs-comment">//为当前用户设置密码</span><br>passwd 用户名 <span class="hljs-comment">//为指定用户设置新密码 </span><br>pwd  <span class="hljs-comment">//显示当前目录</span><br></code></pre></div></td></tr></table></figure><p>  <img src="https://i.loli.net/2021/08/05/5FhJvITfAYyDCdZ.png" alt="image-20210805221920211"></p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">userdel 用户名 <span class="hljs-comment">//删除用户，但是保留用户的主目录</span><br>userdel -r 用户名 <span class="hljs-comment">//删除用户及用户的主目录  慎重！</span><br></code></pre></div></td></tr></table></figure><ul><li><img src="https://i.loli.net/2021/08/05/mjfO8eh5Fys2bLM.png" alt="image-20210805223004835"></li></ul><h3 id="查询用户信息指令"><a href="#查询用户信息指令" class="headerlink" title="查询用户信息指令"></a>查询用户信息指令</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">id 用户名 <span class="hljs-comment">//查看用户的相关信息</span><br></code></pre></div></td></tr></table></figure><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">su - 用户名  <span class="hljs-comment">//切换用户，也可切换到root，由权限高到低不需要输密码，相反需要</span><br></code></pre></div></td></tr></table></figure><p>  <img src="https://i.loli.net/2021/08/05/gCQFOoc7Xrn9qie.png" alt="image-20210805223526404"></p><h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">who am i <span class="hljs-comment">//查看当前登陆的用户</span><br></code></pre></div></td></tr></table></figure><p>  <img src="https://i.loli.net/2021/08/05/1XsloE4BjKILa3f.png" alt="image-20210805223645467"></p><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><ul><li>类似于角色，系统可以对多个用户进行统一管理</li><li><img src="https://i.loli.net/2021/08/06/8bCHd9ZtW7skpye.png" alt="image-20210806094442600"></li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">groupadd 组名  <span class="hljs-comment">//添加组</span><br>groupdel 组名  <span class="hljs-comment">//删除组</span><br>useradd -g 用户组 用户名 <span class="hljs-comment">//增加用户时直接加上组</span><br>usermod -g 用户组 用户名  <span class="hljs-comment">//移动用户到另外一个组</span><br></code></pre></div></td></tr></table></figure><ul><li>在没有指定组时，用户默认在自己用户名的组</li></ul><h3 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h3><ul><li><p><img src="https://i.loli.net/2021/08/06/IeA1Tn9YLQWl4hX.png" alt="image-20210806103940877"></p></li><li><p><img src="https://i.loli.net/2021/08/06/MRW8yDOda5oEXIL.png" alt="image-20210806104434594"></p></li></ul><h2 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h2><h3 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h3><ul><li><img src="https://i.loli.net/2021/08/06/myTDPt4Zd5w6VMW.png" alt="image-20210806105140988"></li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">init [<span class="hljs-number">0</span>、<span class="hljs-number">1</span>、<span class="hljs-number">2</span>、<span class="hljs-number">3</span>、<span class="hljs-number">4</span>、<span class="hljs-number">5</span>、<span class="hljs-number">6</span>]  <span class="hljs-comment">//切换运行级别</span><br></code></pre></div></td></tr></table></figure><ul><li>指定默认的运行级别</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">systemctl get-<span class="hljs-keyword">default</span>  <span class="hljs-comment">//获取当前运行级别</span><br>reboot <span class="hljs-comment">//重启</span><br></code></pre></div></td></tr></table></figure><ul><li><img src="https://i.loli.net/2021/08/06/I6KQtCTekjWuZql.png" alt="image-20210806110635370"></li></ul><h3 id="找回root密码"><a href="#找回root密码" class="headerlink" title="找回root密码"></a>找回root密码</h3><p>适用于CentOS 7.6</p><ul><li><p>开机按e进入编辑模式</p></li><li><p>找到linux16那一行，光标移动到最后</p></li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">init=/bin/sh<br></code></pre></div></td></tr></table></figure><ul><li>输入完，按快捷键Ctrl + x 进入单用户模式</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">mount -o remount,rw /  <span class="hljs-comment">//按回车</span><br></code></pre></div></td></tr></table></figure><ul><li><p>接着输入passwd  回车</p></li><li><p>输入密码</p></li><li><p>再次输入密码</p></li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">touch /.autorelabel<br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">exec /sbin/init  <span class="hljs-comment">//时间长需等待</span><br></code></pre></div></td></tr></table></figure><ul><li>登陆即可</li></ul><h3 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h3><p><img src="https://i.loli.net/2021/08/06/MAeu6ZJgXRfsqpy.png" alt="image-20210806121834980"></p>  <figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">man ls <span class="hljs-comment">//查看ls 的命令的详细说明</span><br>ls -a <span class="hljs-comment">//显示目录中的所以文件，包括以.开头的文件</span><br>ls -l <span class="hljs-comment">//目录列输出</span><br>ls -al <span class="hljs-comment">//可以组合使用</span><br>ls -al /home <span class="hljs-comment">//例如</span><br></code></pre></div></td></tr></table></figure><h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h3><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">pwd  <span class="hljs-comment">//显示当前绝对路径</span><br>ls   <span class="hljs-comment">//显示目录</span><br>ls -l<br>ll<br>ls -lh <span class="hljs-comment">//详细显示，内存</span><br></code></pre></div></td></tr></table></figure><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">cd ~  <span class="hljs-comment">//回到家目录，自己用户的目录</span><br>cd .. <span class="hljs-comment">//回到上一级</span><br>cd ../../root <span class="hljs-comment">//使用相对路径到root目录</span><br></code></pre></div></td></tr></table></figure><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">mkdir <span class="hljs-comment">//创建目录</span><br>mkdir -p /home/dog/tiger <span class="hljs-comment">//创建多级目录</span><br></code></pre></div></td></tr></table></figure><h4 id="remdir"><a href="#remdir" class="headerlink" title="remdir"></a>remdir</h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json\">rmdir //删除目录,只能删除空目录<br>redir -rf /home/dog/tiger  //强制删除<br></code></pre></div></td></tr></table></figure><h4 id="tonch"><a href="#tonch" class="headerlink" title="tonch"></a>tonch</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">touch <span class="hljs-comment">//创建空文件</span><br>touch hello.txt <br></code></pre></div></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">cp 文件 位置<span class="hljs-comment">//将文件拷贝到位置</span><br>cp -r 位置/目录名 位置 <span class="hljs-comment">//拷贝整个目录到位置</span><br>\cp -r 位置/目录名 位置  <span class="hljs-comment">//强制覆盖</span><br></code></pre></div></td></tr></table></figure><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">rm -r <span class="hljs-comment">//删除整个文件夹的文件</span><br>rm /home/hello.txt  <br>rm -rf /home/bbb  <span class="hljs-comment">//强制全部删除，不提示  ！！！注意！</span><br></code></pre></div></td></tr></table></figure><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">mv 文件 位置 <span class="hljs-comment">//将文件移动到某位置</span><br>mv 已存在文件 不存在文件 <span class="hljs-comment">//相当于将文件名重命名</span><br>mv 位置/文件夹名 位置  <span class="hljs-comment">//移动文件夹</span><br></code></pre></div></td></tr></table></figure><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">cat <span class="hljs-comment">//查看文件内容</span><br>cat -n <span class="hljs-comment">//显示行号</span><br><span class="hljs-comment">//管道命令 ： 将前面的结果交给下一个处理</span><br>cat -n /etc/progile | more  <span class="hljs-comment">//enter下一行 空格下一页</span><br></code></pre></div></td></tr></table></figure><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">more 要查看文件<span class="hljs-comment">//基于vi编辑器的文本过滤器，以全屏幕的方式按页显示文本文件的内容</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/38WEOK1mB5Qfnu2.png" alt="image-20210806160125112"></p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">less 文件 <span class="hljs-comment">//采用分屏查看文件内容，与more类似</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/p3am75CDNiwEPbu.png" alt="image-20210806161442242"></p><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">echo <span class="hljs-comment">//输出内容到控制台</span><br>echo $HOSTNAME <span class="hljs-comment">//输出主机名</span><br>echo <span class="hljs-string">&quot;hello,world&quot;</span> <span class="hljs-comment">//输出文字</span><br>echo <span class="hljs-string">&quot;hello&quot;</span> &gt; /home/mydate.txt <span class="hljs-comment">//将文字输出到文件</span><br>&gt;   <span class="hljs-comment">//重定向输出到，并覆盖文件</span><br>&gt;&gt;  <span class="hljs-comment">//重定向输出，对文件追加</span><br></code></pre></div></td></tr></table></figure><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">head 文件名 <span class="hljs-comment">//显示文件的前10行的代码</span><br>head -n <span class="hljs-number">5</span> 文件 <span class="hljs-comment">//显示文件前5行的代码</span><br></code></pre></div></td></tr></table></figure><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">tail 文件 <span class="hljs-comment">//查看文件尾10行内容</span><br>tail -n <span class="hljs-number">5</span> 文件 <span class="hljs-comment">//查看文件尾10行内容</span><br>tail -f 文件 <span class="hljs-comment">//事实追踪文档的更新</span><br></code></pre></div></td></tr></table></figure><h4 id="gt"><a href="#gt" class="headerlink" title="&gt;"></a>&gt;</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ls -l &gt; 文件 <span class="hljs-comment">//将列被的内容写入文件a.txt中，覆盖写</span><br>ls -al &gt;&gt; 文件 <span class="hljs-comment">//列表的内容追加到文件aa.txtd末尾</span><br>cat 文件<span class="hljs-number">1</span> &gt; 文件<span class="hljs-number">2</span> <span class="hljs-comment">//将文件1的内容覆盖到文件2</span><br>echo <span class="hljs-string">&quot;内容&quot;</span>  &gt;&gt; 文件 <br></code></pre></div></td></tr></table></figure><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><p>软联接也称为符号链接，类似与windows里的快捷方式，主要存放了链接其他文件的路径</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ln -s 原文件 软链接名  <span class="hljs-comment">//给原文件创建一个软链接</span><br>ln -s /root /home/myroot <br>rm /home/myroot  <span class="hljs-comment">// 删除软链接</span><br></code></pre></div></td></tr></table></figure><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">history <span class="hljs-comment">//显示历史操作</span><br>history <span class="hljs-number">5</span> <span class="hljs-comment">//显示5条指令</span><br>!历史行数 <span class="hljs-comment">//执行历史指令</span><br></code></pre></div></td></tr></table></figure><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">date <span class="hljs-comment">//显示当前时间</span><br>date +%Y <span class="hljs-comment">//显示年</span><br>date +%m <span class="hljs-comment">//显示月</span><br>date +%d <span class="hljs-comment">//显示天</span><br>date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span> <span class="hljs-comment">//显示年月日时分秒</span><br>date -s <span class="hljs-string">&quot;2020-11-03 20:02:10&quot;</span>  <span class="hljs-comment">//设置当前系统时间</span><br></code></pre></div></td></tr></table></figure><h4 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">cal <span class="hljs-comment">//显示日历</span><br>cal <span class="hljs-number">2021</span> <span class="hljs-comment">//显示整年日历</span><br></code></pre></div></td></tr></table></figure><h3 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">find 目录 -name 文件名<br>find 目录 -user root  <span class="hljs-comment">//查找用户名文件，文件太多了加 | more</span><br>find 目录 -szie +<span class="hljs-number">200</span>M<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/06/oAJMDQyVveTSgfx.png" alt="image-20210806193547792"></p><p><img src="https://i.loli.net/2021/08/07/w8BseumvFDRKhVH.png" alt="image-20210807092110519"></p><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">updatedb <span class="hljs-comment">//创建locate数据库</span><br>locate 文件名  <span class="hljs-comment">//快速定位文件路径，不遍历整个文件系统，要定期更新</span><br></code></pre></div></td></tr></table></figure><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">which 指令名 <span class="hljs-comment">//查看某个指令在哪个目录下</span><br></code></pre></div></td></tr></table></figure><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">|  <span class="hljs-comment">//管道符号，将前一个命令结果输出传递给后面的命令处理</span><br>grep 选项 查找内容 源文件 <span class="hljs-comment">//过滤查找</span><br>cat /home/hello.txt | grep -n <span class="hljs-string">&quot;yes&quot;</span><br>grep -n <span class="hljs-string">&quot;yes&quot;</span> /home/hello.txt<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/07/PkrF7tUiGMzcZpV.png" alt="image-20210807101433058"></p><h3 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h3><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">gzip 文件  <span class="hljs-comment">//压缩文件</span><br>gunzip 文件.gz   <span class="hljs-comment">//解压缩文件命令</span><br></code></pre></div></td></tr></table></figure><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">zip 选项 文件.zip 将要压缩的内容 <span class="hljs-comment">//压缩文件和目录的命令</span><br>unzip 选项 文件.zip  <span class="hljs-comment">//解压文件</span><br>-r <span class="hljs-comment">//递归压缩，压缩目录</span><br>-d 目录 <span class="hljs-comment">//解压后文件的存放目录</span><br>zip -r  myhome.zip /home/  <span class="hljs-comment">//将home目录及其包含的文件和子文件夹都压缩</span><br>unzip -d /opt/tmp/home/myhome.zip <br></code></pre></div></td></tr></table></figure><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">tar 选项 文件.tar.gz 要打包内容  <span class="hljs-comment">//打包目录，压缩后的文件格式为.tar.gz</span><br>tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt <span class="hljs-comment">//打包多个文件</span><br>tar -zcvf pc.tar.gz /home/pig.txt /home  <span class="hljs-comment">//打包文件到某位置</span><br>tar -zxvf pc.tar.gz <span class="hljs-comment">//解压到当前目录</span><br>tar -zxvf /opt/tmp2 tar -zxvf /home/myhome.tar.gz -C /opt/tmp2<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/07/TKbROMAU4daBwFc.png" alt="image-20210807105145862"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux笔记(从基础到高级):中篇</title>
    <link href="/2021/10/07/Linux%E7%AC%94%E8%AE%B0(%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E9%AB%98%E7%BA%A7)%EF%BC%9A%E4%B8%AD%E7%AF%87/"/>
    <url>/2021/10/07/Linux%E7%AC%94%E8%AE%B0(%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E9%AB%98%E7%BA%A7)%EF%BC%9A%E4%B8%AD%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>基于CentOS 7 ，<a href="https://wiki.centos.org/FrontPage">CentOS官方</a></p><h2 id="Linux组管理"><a href="#Linux组管理" class="headerlink" title="Linux组管理"></a>Linux组管理</h2><ul><li><p>在linux中所有的用户都需要属于一个组，类似人都有一个国家</p></li><li><p>有一个用户必须属于一个组</p></li><li><p>所有者，是指创建文件的属性，可以改变</p></li><li><p>所在组</p></li><li><p>其他组</p><p>Linux组的管理机制</p><img src="https://i.loli.net/2021/08/07/VpbCBfHtrzu1Fwg.png" alt="image-20210807121210180"  /></li></ul><h3 id="文件目录所有者"><a href="#文件目录所有者" class="headerlink" title="文件目录所有者"></a>文件目录所有者</h3><p>谁创建文件谁就是所有者</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ls -ahl <span class="hljs-comment">//查看文件的所有者</span><br>chown 用户名 文件名 <span class="hljs-comment">//修改文件所有者</span><br></code></pre></div></td></tr></table></figure><h3 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h3><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">groupadd 组名 <span class="hljs-comment">//创建组</span><br>useradd -g monster fox <span class="hljs-comment">//在指定组创建用户</span><br>id fox  <span class="hljs-comment">//显示用户信息</span><br>chgrp 组名 文件名  <span class="hljs-comment">//改变文件的所在组</span><br></code></pre></div></td></tr></table></figure><h3 id="其他组"><a href="#其他组" class="headerlink" title="其他组"></a>其他组</h3><p>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组</p><h3 id="改变用户的所在组"><a href="#改变用户的所在组" class="headerlink" title="改变用户的所在组"></a>改变用户的所在组</h3><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">usermod -g 组名 用户名<br>usermod -d 目录名 用户名 改变用户登陆的初始目录  <span class="hljs-comment">//这里注意，用户需要有到新目录的权限</span><br></code></pre></div></td></tr></table></figure><h3 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h3><p><img src="https://i.loli.net/2021/08/07/ASNbYnKjEg512VD.png" alt="image-20210807133047688"></p><h3 id="rwx权限-难点"><a href="#rwx权限-难点" class="headerlink" title="rwx权限==*难点=="></a>rwx权限==*难点==</h3><img src="https://i.loli.net/2021/08/07/lvAuFN1W7BrtzKg.png"/><p><img src="https://i.loli.net/2021/08/07/T1yKQgVs53xCMrS.png" alt="image-20210807133316216"></p><img src="https://i.loli.net/2021/08/07/8SutQMhza4jsfcI.png" alt="image-20210807135816519" style="zoom:150%;" /><h3 id="权限实例"><a href="#权限实例" class="headerlink" title="权限实例"></a>权限实例</h3><p><img src="https://i.loli.net/2021/10/02/dzMD2PjEmCbQpXr.png" alt="image-20210807135730380"></p><p><img src="https://i.loli.net/2021/08/07/XqwzFU9Z6lgT8KQ.png" alt="image-20210807135512446"></p><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><ul><li>使用+、-、= 变更权限</li></ul><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">u <span class="hljs-comment">//所有者</span><br>g <span class="hljs-comment">//所在组</span><br>o <span class="hljs-comment">//其他组</span><br>a <span class="hljs-comment">//所有</span><br>chmod u=rwx,g=rx,o=x 文件/目录名  <span class="hljs-comment">//给文件/目录设置权限</span><br>chmod u-x,g+w 文件名  <span class="hljs-comment">//给文件增加权限</span><br>chmod a+r 文件名  <br></code></pre></div></td></tr></table></figure><ul><li>通过数字变更权限</li></ul><p><img src="https://i.loli.net/2021/08/07/y18ZYOlKtWf6TeC.png" alt="image-20210807141449589"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-number">1</span> <span class="hljs-comment">//x</span><br><span class="hljs-number">2</span> <span class="hljs-comment">//w</span><br><span class="hljs-number">3</span> <span class="hljs-comment">//wx</span><br><span class="hljs-number">4</span> <span class="hljs-comment">//r</span><br><span class="hljs-number">5</span> <span class="hljs-comment">//rx</span><br><span class="hljs-number">6</span> <span class="hljs-comment">//rw</span><br><span class="hljs-number">7</span> <span class="hljs-comment">//rwx</span><br>chmod <span class="hljs-number">751</span> 文件名/目录 <br></code></pre></div></td></tr></table></figure><h3 id="修改文件-目录所有者"><a href="#修改文件-目录所有者" class="headerlink" title="修改文件/目录所有者"></a>修改文件/目录所有者</h3><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">chown newowner 文件/目录 改变所有者 <span class="hljs-comment">//命令一定要记得写所有者</span><br>chown newowner:mewgroup 文件/目录 改变所有者和所在组<br>-R   <span class="hljs-comment">//递归生效</span><br>chown -R tom /home/test<br></code></pre></div></td></tr></table></figure><h3 id="修改文件-目录所在组"><a href="#修改文件-目录所在组" class="headerlink" title="修改文件/目录所在组"></a>修改文件/目录所在组</h3><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">chgrp newgroup 文件/目录  <span class="hljs-comment">//改变所在组</span><br>chgrp -R newgroup 文件/目录 <span class="hljs-comment">//递归改变</span><br></code></pre></div></td></tr></table></figure><h3 id="组应用实践"><a href="#组应用实践" class="headerlink" title="组应用实践"></a>组应用实践</h3><h4 id="警察和土匪游戏"><a href="#警察和土匪游戏" class="headerlink" title="警察和土匪游戏"></a>警察和土匪游戏</h4><ul><li><img src="https://i.loli.net/2021/08/07/jMfUKZAeP6qbV2D.png" alt="image-20210807153433573"></li><li><img src="https://i.loli.net/2021/08/07/hDsgEtJSMQAFjnY.png" alt="image-20210807153412290"></li></ul><h4 id="神仙妖怪"><a href="#神仙妖怪" class="headerlink" title="神仙妖怪"></a>神仙妖怪</h4><p><img src="https://i.loli.net/2021/08/07/yvB4JFMAuHYhDj5.png" alt="image-20210807155359173"></p><h2 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h2><h3 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h3><ul><li><p>概述</p><p><img src="https://i.loli.net/2021/08/07/M6lxFBwvVyPaKOk.png" alt="image-20210807160535123"></p><p><img src="https://i.loli.net/2021/08/07/hNyaidGHx3WQ1IV.png" alt="image-20210807160428559"></p><p><img src="https://i.loli.net/2021/08/07/xHZ4nGjWbKBXAif.png" alt="image-20210807160615510"></p><p><img src="https://i.loli.net/2021/08/07/bIeAkSNazJOrpfR.png" alt="image-20210807165446178"></p>  <figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">crond 选项<br></code></pre></div></td></tr></table></figure></li><li><p>实例</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">/etc/crontab  <span class="hljs-comment">//设置任务调度文件</span><br>crontab -e   <span class="hljs-comment">//设置个人任务调度</span><br>*/<span class="hljs-number">1</span> * * * * ls -l /etc/ &gt; /tmp/to.txt   <span class="hljs-comment">//每小时每分钟执行</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/07/TkzuoI9lFDaR5yB.png" alt="image-20210807161112429"></p><p><img src="https://i.loli.net/2021/08/07/TzMnBaoeFvtiXED.png" alt="image-20210807162006078"></p><p><img src="https://i.loli.net/2021/08/07/Svh9MVBGdXJqRwE.png" alt="image-20210807162142101"></p></li><li><p><img src="https://i.loli.net/2021/08/07/TKpZt6LkhOX3WVy.png" alt="image-20210807164826984"></p></li></ul><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">vim /home/my.sh <span class="hljs-comment">//创建一个shell文件</span><br><span class="hljs-comment">//在文件内输入:</span><br>cal &gt;&gt; /opt/mycal<br>date &gt;&gt; /opt/mycal<br><span class="hljs-comment">//此时没有执行权限，要给root添加执行权限：</span><br>chmod u+x /home/my.sh<br>conrtab -e  <span class="hljs-comment">//打开任务调度中心</span><br><span class="hljs-comment">//将执行控制语句添加到控制文件中</span><br>*/<span class="hljs-number">1</span> * * * * /home/my.sh<br></code></pre></div></td></tr></table></figure><ul><li><img src="https://i.loli.net/2021/08/07/TcfAn18zSbDu3NB.png" alt="image-20210807165404840"></li></ul><h3 id="at定时任务"><a href="#at定时任务" class="headerlink" title="at定时任务"></a>at定时任务</h3><ul><li><p>基本介绍</p><p><img src="https://i.loli.net/2021/08/07/5xbsn9JFZucevYr.png" alt="image-20210807193902347"></p><p><img src="https://i.loli.net/2021/08/07/rXEcIwMl29zCQgL.png" alt="image-20210807195056045"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ps -ef | grep atd  <span class="hljs-comment">//检测当前运行的指令</span><br></code></pre></div></td></tr></table></figure></li><li><p>at命令格式</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">at 选项 时间   <span class="hljs-comment">//Ctrl + D 2次结束at命令的输入</span><br><span class="hljs-comment">//输入错误 用Ctrl Spaceback</span><br></code></pre></div></td></tr></table></figure></li><li><p>at命令的选项</p><p><img src="https://i.loli.net/2021/08/07/glb3wyaXSBnKT8Q.png" alt="image-20210807195142797"></p></li><li><p>at时间定义</p><p><img src="https://i.loli.net/2021/08/07/hRWA68gukXKMdEY.png" alt="image-20210807195234822"></p></li><li><p>实例</p><p><img src="https://i.loli.net/2021/10/02/NLaC9Qz8WVjxmlp.png" alt="image-20210807200435924"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">at <span class="hljs-number">5</span>pm + <span class="hljs-number">2</span> days<br>at&gt; /bin/ls /home&lt;EOT&gt;  <span class="hljs-comment">//Ctrl + D退出</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/07/wubYsnmAOdpzegh.png" alt="image-20210807204649074"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">atq   <span class="hljs-comment">//输出at队列信息</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/07/xBsCb7ihgn8R4wH.png" alt="image-20210807204755663"></p><p><img src="https://i.loli.net/2021/08/07/7zwCA56kebT9UcB.png" alt="image-20210807204815663"></p><p><img src="https://i.loli.net/2021/08/07/EJl4IzZWjbwm5qM.png" alt="image-20210807204833901"></p><p><img src="https://i.loli.net/2021/08/07/26kw7cQ83XPb1ve.png" alt="image-20210807205011471"></p><p>也可以执行脚本</p><p><img src="https://i.loli.net/2021/08/07/xze6YZNIywBmiSs.png" alt="image-20210807205050842"></p></li></ul><h2 id="磁盘分区、挂载"><a href="#磁盘分区、挂载" class="headerlink" title="磁盘分区、挂载"></a>磁盘分区、挂载</h2><h3 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h3><ul><li><p>原理介绍</p><p><img src="https://i.loli.net/2021/08/07/TuN1rVnp6eA8qo9.png" alt="image-20210807205401376"></p><img src="https://i.loli.net/2021/08/07/UGFNWx7kp4lZjua.png" alt="image-20210807210016216" style="zoom:150%;" /><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">lsblk  <span class="hljs-comment">//查看挂载状态</span><br></code></pre></div></td></tr></table></figure></li><li><p>硬盘说明</p><p><img src="https://i.loli.net/2021/08/07/vM7s4xVFIdecGg9.png" alt="image-20210807210122329"></p><p>sdx~ 中 x 可以为 a,b,c,d，分别表示第1，2，3，4块硬盘</p><p><img src="https://i.loli.net/2021/08/07/z1M3xqAJNwEB5ZD.png" alt="image-20210807210627411"></p></li><li><p>查看挂载情况</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">lsblk -f <span class="hljs-comment">//详细信息</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/cr1KfCvDdmZV9Xi.png" alt="image-20210807211158441"></p></li></ul><h3 id="挂载的经典案例"><a href="#挂载的经典案例" class="headerlink" title="挂载的经典案例"></a>挂载的经典案例</h3><ul><li><p>在虚拟机中添加虚拟磁盘，重启以后就可以看到</p></li><li><p><img src="https://i.loli.net/2021/10/02/xKo4T3cvNEInBR9.png" alt="image-20210807214255205"></p></li><li><p>分区</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">fdisk /dev/sdb<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/pGdhf7jKeyvRnwW.png" alt="image-20210807215358831"></p><p><img src="https://i.loli.net/2021/10/02/IWzRZeEFdK3P1hu.png" alt="image-20210807215043425"></p><p><img src="https://i.loli.net/2021/10/02/pDAng2FTUlMkdbV.png" alt="image-20210807215814412"></p><p><img src="https://i.loli.net/2021/10/02/PZUEXe5hDBlCGOW.png" alt="image-20210807215856173"></p><p><img src="https://i.loli.net/2021/10/02/vILmuM41RwWDGhA.png" alt="image-20210807220731459"></p></li><li><p>关系结构图</p><p><img src="https://i.loli.net/2021/10/02/myf3QRLGZNqTKO4.png" alt="image-20210807220803271"></p></li><li><p>如何卸载</p><p><img src="https://i.loli.net/2021/10/02/XEZO6fbi74rnVTv.png" alt="image-20210807221416672"></p></li><li><p>==用命令行挂载，重启后就会失效==</p></li><li><p>永久挂载</p><p><img src="https://i.loli.net/2021/10/02/nLqFEZemhgU7tDW.png" alt="image-20210807222104610"></p><p><img src="https://i.loli.net/2021/10/02/J5xmiN3qu1FG7MK.png" alt="image-20210807222124748"></p><p><img src="https://i.loli.net/2021/10/02/ZU7WhwNRs6SO3I8.png" alt="image-20210807222027035"></p><p>重启后挂载关系一直在</p></li><li><p>管理员保证硬盘分区存储空间足够，保证系统正常运行</p></li></ul><h5 id="挂载深入理解"><a href="#挂载深入理解" class="headerlink" title="挂载深入理解"></a>挂载深入理解</h5><p><a href="https://www.cnblogs.com/jiangzhaowei/p/11843026.html">https://www.cnblogs.com/jiangzhaowei/p/11843026.html</a></p><h3 id="磁盘使用情况"><a href="#磁盘使用情况" class="headerlink" title="磁盘使用情况"></a>磁盘使用情况</h3>  <figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">df -h<br></code></pre></div></td></tr></table></figure><ul><li><p><img src="https://i.loli.net/2021/10/02/NaGYeAcnShKukQp.png" alt="image-20210807222934745"></p></li><li><p><img src="https://i.loli.net/2021/10/02/Ox9ceyh2oIDC7dB.png" alt="image-20210807222958796"></p></li><li><p><img src="https://i.loli.net/2021/10/02/78pdnhEuWGz5FqD.png" alt="image-20210807223441213"></p></li><li><p><img src="https://i.loli.net/2021/10/02/Ku3N72Fsk6lhQPV.png" alt="image-20210807223604802"></p></li></ul><h3 id="磁盘工作实用指令"><a href="#磁盘工作实用指令" class="headerlink" title="磁盘工作实用指令"></a>磁盘工作实用指令</h3><ul><li><p>统计文件夹下文件的个数</p><p><img src="https://i.loli.net/2021/10/02/fKLdJ4BkcH9PF3s.png" alt="image-20210807230818542"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ls -l /opt | grep <span class="hljs-string">&quot;^-&quot;</span> | wc -l   <span class="hljs-comment">//当前文件夹下</span><br>ls -lR /opt | grep <span class="hljs-string">&quot;^-&quot;</span> | wc -l  <span class="hljs-comment">//目录下所有文件</span><br></code></pre></div></td></tr></table></figure></li><li><p>统计文件夹下目录的个数</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ls -l /opt | grep <span class="hljs-string">&quot;^d&quot;</span> | wc -l    <span class="hljs-comment">//当前文件夹下</span><br>ls -lR /opt | grep <span class="hljs-string">&quot;^d&quot;</span> | wc -l   <span class="hljs-comment">//目录下所有文件</span><br></code></pre></div></td></tr></table></figure></li><li><p>树状图显示</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">yum install tree  <span class="hljs-comment">//默认情况下，tree命令没有安装</span><br>tree 目录<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/tWxy1QVuY68lNOz.png" alt="image-20210807231633355"></p></li></ul><h2 id="Linux网络配置"><a href="#Linux网络配置" class="headerlink" title="Linux网络配置"></a>Linux网络配置</h2><h3 id="NAT配置原理"><a href="#NAT配置原理" class="headerlink" title="NAT配置原理"></a>NAT配置原理</h3><p><img src="https://i.loli.net/2021/10/02/sUtK8aEkPuTiGdV.png" alt="image-20210807234031143"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ipconfig  <span class="hljs-comment">//windows下</span><br>ifconfig  <span class="hljs-comment">//Linux下</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/02/BeMgZSum2oGKOaX.png" alt="image-20210808142737158"></p><h3 id="ping-测试网络连通性"><a href="#ping-测试网络连通性" class="headerlink" title="ping 测试网络连通性"></a>ping 测试网络连通性</h3><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ping ip地址  <br></code></pre></div></td></tr></table></figure><h3 id="Linux网络环境配置"><a href="#Linux网络环境配置" class="headerlink" title="Linux网络环境配置"></a>Linux网络环境配置</h3><p>####自动获取</p><ul><li>特点：每次ip都是自动获取的，不是固定的，不利于做服务器</li></ul><p>####指定ip</p><ul><li><p><img src="https://i.loli.net/2021/10/02/345laGCmUZW2d6q.png" alt="image-20210808170414034"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></div></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/10/02/PmgMG2jxFawJ7r8.png" alt="image-20210808170830311"></p></li><li><p><img src="https://i.loli.net/2021/10/02/x4jRivAD1JBZuFr.png" alt="image-20210808171319554"></p></li><li><p><img src="https://i.loli.net/2021/10/02/VC9EqyafXAS8LG4.png" alt="image-20210808172446380"></p></li><li><p><img src="https://i.loli.net/2021/10/02/oeIlC6AYcKNfEpR.png" alt="image-20210808173708283"></p></li><li><p><img src="https://i.loli.net/2021/10/02/uRoSelEr3TwxODf.png" alt="image-20210808173745509"></p></li><li><p>重启reboot  或者 service network restart</p></li></ul><p>###设置主机名和hosts映射</p><h4 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h4>  <figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">hostname   <span class="hljs-comment">//查看主机名</span><br>vim /etc/hostname  <span class="hljs-comment">//修改主机名</span><br>reboot   <span class="hljs-comment">//重启生效</span><br></code></pre></div></td></tr></table></figure><ul><li><img src="https://i.loli.net/2021/10/02/EBCaS7ifGrz8KmJ.png" alt="image-20210812160026958"></li></ul><h4 id="设置hosts映射"><a href="#设置hosts映射" class="headerlink" title="设置hosts映射"></a>设置hosts映射</h4><ul><li><p>hosts文件  记录主机名与ip之间的关系</p></li><li><p><img src="https://i.loli.net/2021/10/02/8sxQBmuyWKl6Cqj.png" alt="image-20210812162637849"></p></li><li><p>ping 主机名 时 系统会去hosts文件中找相关的ip</p></li><li><img src="https://i.loli.net/2021/10/02/tTmpdJZ7YXaFr6h.png" alt="image-20210812164943849" style="zoom:67%;" /></li><li><p>windows</p><p><img src="https://i.loli.net/2021/08/12/iVAx4l3XNPvjaeH.png" alt="image-20210812164912389"></p></li><li><p>Linux</p><p><img src="https://i.loli.net/2021/08/12/VRhdu6CvwWmSMn4.png" alt="image-20210812170009086"></p><p><img src="https://i.loli.net/2021/08/12/oyxlX6ZVbWnRMES.png" alt="image-20210812165652021"></p></li></ul><h4 id="主机名解析过程"><a href="#主机名解析过程" class="headerlink" title="主机名解析过程"></a>主机名解析过程</h4><ul><li><img src="https://i.loli.net/2021/08/12/giyXDjsC7G8hcMF.png" alt="image-20210812172523993"></li><li><img src="https://i.loli.net/2021/08/12/GK9FMNjoIzk147l.png" alt="image-20210812172954472"></li></ul><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ul><li><p><img src="https://i.loli.net/2021/08/12/naHUvz7bhqQNX2i.png" alt="image-20210812173456153"></p></li><li><p><img src="https://i.loli.net/2021/08/13/bZ1ApKsvEcSiImO.png" alt="image-20210813144923587"></p></li><li><p><img src="https://i.loli.net/2021/08/13/DSIP3xLBzyFblai.png" alt="image-20210813145314229"></p></li><li><p>前台</p><p><img src="https://i.loli.net/2021/10/02/ufp6ikA5UzCxL4h.png" alt="image-20210813145513197"></p></li><li><p>后台  Mysql</p></li></ul><h3 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h3><ul><li><p><img src="https://i.loli.net/2021/08/13/rsBnjdY4xvpMVDa.png" alt="image-20210813145838636"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ps -aux | more <span class="hljs-comment">//用more查看进程</span><br>ps -aux | grep sshd  <span class="hljs-comment">//过滤查看</span><br></code></pre></div></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/08/13/yVIrzDgPauLq6Hf.png" alt="image-20210813152033299"></p></li><li><p><img src="https://i.loli.net/2021/08/13/WbPLwasMcVHZn83.png" alt="image-20210813152124388"></p></li></ul><h3 id="查看父进程"><a href="#查看父进程" class="headerlink" title="查看父进程"></a>查看父进程</h3><ul><li><p><img src="https://i.loli.net/2021/10/02/f7CuQO6r1dBcnTL.png" alt="image-20210813153155143"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ps -ef | more <br>ps -ef | grep sshd<br></code></pre></div></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/10/02/CEjDb1R735spqiB.png" alt="image-20210813153527743"></p></li><li><p><img src="https://i.loli.net/2021/10/02/97Wo1JpEnTP5iqf.png" alt="image-20210813153830773"></p></li></ul><h3 id="终止进程kill"><a href="#终止进程kill" class="headerlink" title="终止进程kill"></a>终止进程kill</h3><ul><li><p><img src="https://i.loli.net/2021/10/02/D7Fhl6EsSv8MyZY.png" alt="image-20210813153912545"></p></li><li><img src="https://i.loli.net/2021/10/02/hmg6Oi3WPdzTjSD.png" alt="image-20210813154146796" style="zoom: 67%;" /><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ps -aux | grep sshd   <span class="hljs-comment">//查看远程服务sshd进程</span><br></code></pre></div></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/10/02/lTpW6joDstefPqE.png" alt="image-20210813155337788"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">kill 进程号  <span class="hljs-comment">//终止某个进程</span><br>/bin/systemctl start sshd.service  <span class="hljs-comment">//重启sshd服务</span><br>killall gedit   <span class="hljs-comment">//终止gedit的多个终端</span><br>kill <span class="hljs-number">-9</span> 进程号  <span class="hljs-comment">//强制删除</span><br></code></pre></div></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/10/02/8raUBtOqLQy5ReX.png" alt="image-20210813161128768"></p></li></ul><h3 id="查看进程树pstree"><a href="#查看进程树pstree" class="headerlink" title="查看进程树pstree"></a>查看进程树pstree</h3><ul><li><img src="https://i.loli.net/2021/10/02/15FWce67udyXQTE.png" alt="image-20210813162224598"></li><li><img src="https://i.loli.net/2021/10/02/eONsWchMVPr8qkb.png" alt="image-20210813162243386"></li></ul><h3 id="服务管理service"><a href="#服务管理service" class="headerlink" title="服务管理service"></a>服务管理service</h3><ul><li><p><img src="https://i.loli.net/2021/08/15/p8QIPNAWaywnbOE.png" alt="image-20210813163455677"></p></li><li><p><img src="https://i.loli.net/2021/08/15/MjDkhR7UN5Lfysa.png" alt="image-20210814100817500"></p></li><li><p><img src="https://i.loli.net/2021/08/15/ZqXCzpPvlWb8xnS.png" alt="image-20210814105850452"></p></li><li><p>centos7以后service不再使用了</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">service 服务名 status<br>service 服务名 stop<br>service 服务名 restart<br>step  <span class="hljs-comment">//进入系统服务界面</span><br></code></pre></div></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/08/15/YR6uFMawqep87vg.png" alt="image-20210814112143084"></p></li></ul><h3 id="服务的运行级别"><a href="#服务的运行级别" class="headerlink" title="服务的运行级别"></a>服务的运行级别</h3><ul><li><p><img src="https://i.loli.net/2021/08/14/2UalIuzv9nSrG7s.png" alt="image-20210814112347858"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">vim /tec/inittab  <span class="hljs-comment">//查看运行级别文件</span><br>systemctl get-default   <span class="hljs-comment">//查看当前的运行级别</span><br>systemctl set-default multi-user.target  <br></code></pre></div></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/08/15/WHsBc83RbPthEzf.png" alt="image-20210815120004426"></p></li></ul><h3 id="chkconfig指令"><a href="#chkconfig指令" class="headerlink" title="chkconfig指令"></a>chkconfig指令</h3><ul><li><p><img src="https://i.loli.net/2021/08/15/uKRHBceiX2s5kCo.png" alt="image-20210815121109777"></p></li><li><p><img src="https://i.loli.net/2021/08/15/b4rpkWYMJeuhT9i.png" alt="image-20210815171540116"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">chkconfig --list  <span class="hljs-comment">//查看服务</span><br>chkconfig --lsit | grep network  <span class="hljs-comment">//查看特定服务</span><br>chkconfig network --list  <span class="hljs-comment">//查看特定服务</span><br>chkconfig --level <span class="hljs-number">3</span> network off<br>chkconfig --level <span class="hljs-number">3</span> network on<br></code></pre></div></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/08/15/JHUiYuB4d6vqQyb.png" alt="image-20210815173052325"></p></li></ul><h3 id="systemctl管理指令"><a href="#systemctl管理指令" class="headerlink" title="systemctl管理指令"></a>systemctl管理指令</h3><ul><li><p><img src="https://i.loli.net/2021/08/15/62taTWZpFbE3M98.png" alt="image-20210815173653288"></p></li><li><p>指令</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">ls -l /usr/lib/systemd/system  <span class="hljs-comment">//查看全部的系统内服务</span><br>systemctl list-unit-files [| grep 服务名]  <span class="hljs-comment">//查看服务的开机启动状态</span><br>systemctl status firewalld  <span class="hljs-comment">//查看防火墙服务的当前状态</span><br><span class="hljs-comment">//strat,stop是临时生效，永久不启动需要disable </span><br></code></pre></div></td></tr></table></figure></li></ul><ul><li><img src="https://i.loli.net/2021/08/17/gHcY6ZSQJwsxTBP.png" alt="image-20210817152652813"></li></ul><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><ul><li><img src="https://i.loli.net/2021/08/17/WDFYXQuCqZvBe56.png" alt="image-20210817154039921"></li></ul><h3 id="firewall指令"><a href="#firewall指令" class="headerlink" title="firewall指令"></a>firewall指令</h3><p><img src="https://i.loli.net/2021/08/17/KyVQMJf14czIjh7.png" alt="image-20210817154717038"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">netstat -anp | more  <span class="hljs-comment">//查看端口、协议等</span><br>win下<br>telnet <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span> <span class="hljs-number">111</span>   <span class="hljs-comment">//win10上先要安装这个服务</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/17/S9dx5vIueQosijJ.png" alt="image-20210817155316775"></p><p><img src="https://i.loli.net/2021/08/17/1Ep9ChkOtgFWMLV.png" alt="image-20210817160411772"><br><img src="https://i.loli.net/2021/08/17/49WlXi1VoHpGacz.png" alt="image-20210817160628088"></p><h3 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h3><ul><li><img src="https://i.loli.net/2021/08/17/9JgTLcCRFS8E65W.png" alt="image-20210817163858541"></li></ul><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">top  <span class="hljs-comment">//查看动态监控进程</span><br></code></pre></div></td></tr></table></figure><ul><li><p><img src="https://i.loli.net/2021/08/17/IRNqmcvAGOBksXn.png" alt="image-20210817163614260"></p></li><li><p><img src="https://i.loli.net/2021/10/02/dgXvMT4s5Y7KFEa.png" alt="image-20210817164136536"></p></li><li><p><img src="https://i.loli.net/2021/08/17/V8keUbBYhqGtwNv.png" alt="image-20210817164859961"></p></li><li><p><img src="https://i.loli.net/2021/08/17/8rALOGX6uDMdjwP.png" alt="image-20210817164228136"></p></li><li><p>监控qxd用户的进程</p><p><img src="https://i.loli.net/2021/08/17/P4OiACnWc2K78G6.png" alt="image-20210817164615639"></p></li></ul><h3 id="监控网络状态"><a href="#监控网络状态" class="headerlink" title="监控网络状态"></a>监控网络状态</h3><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">netstat -anp | more  <span class="hljs-comment">//查看端口、协议等</span><br>netstat -anp | grep sshd<br></code></pre></div></td></tr></table></figure><ul><li><p><img src="https://i.loli.net/2021/08/17/XzV5QfO4iAoaLmG.png" alt="image-20210817165801670"></p></li><li><p>端对端的协议连接</p><p><img src="https://i.loli.net/2021/10/02/yEkrNupQKV3h4Wt.png" alt="image-20210817170517819"></p><p>断开连接有根据tcp协议，监听端口会进入timewait的状态</p></li></ul><h2 id="包的管理"><a href="#包的管理" class="headerlink" title="包的管理"></a>包的管理</h2><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><ul><li><img src="https://i.loli.net/2021/08/17/Ww5nMTrvIthildJ.png" alt="image-20210817171236432"></li><li><img src="https://i.loli.net/2021/08/17/YFJE1pSTKzd7uM5.png" alt="image-20210817171436981"></li><li><img src="https://i.loli.net/2021/08/17/CR5zuE2FSAoMlVU.png" alt="image-20210817171735400"></li><li><img src="https://i.loli.net/2021/08/17/OminP7gQUR59tMc.png" alt="image-20210817171944157"></li><li><img src="https://i.loli.net/2021/08/17/WG4Zqha6m8j3BXy.png" alt="image-20210817172134735"></li><li><img src="https://i.loli.net/2021/08/17/ntux84QErgpDOTN.png" alt="image-20210817174019866"></li></ul><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><ul><li><img src="https://i.loli.net/2021/08/17/4x9VbJFRlgfOmIy.png" alt="image-20210817174103472"></li><li><img src="https://i.loli.net/2021/08/18/UepLFTh4IPtHSM5.png" alt="image-20210818205703250"></li><li><img src="https://i.loli.net/2021/08/18/A1EQrlOPzgV7Xka.png" alt="image-20210818205824039"></li></ul><h2 id="搭建JavaEE环境"><a href="#搭建JavaEE环境" class="headerlink" title="搭建JavaEE环境"></a>搭建JavaEE环境</h2><ul><li><p><img src="https://i.loli.net/2021/08/18/8WNVJ6UYkzDTqRS.png" alt="image-20210818210412643"></p></li><li><p><img src="https://i.loli.net/2021/08/19/yDB9fsAC4kwujbI.png" alt="image-20210819104057711"></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">echo $PATH  <span class="hljs-comment">//查看环境变量</span><br>source /etc/profile  <span class="hljs-comment">//刷新让修改后的文件生效</span><br></code></pre></div></td></tr></table></figure></li><li><p><img src="https://i.loli.net/2021/08/19/CRnYKjqPHXLW3QZ.png" alt="image-20210819104922790"></p></li><li><img src="https://i.loli.net/2021/08/19/OWxyzYAZ3ec8Bil.png"/></li></ul><h2 id="搭建tomcat"><a href="#搭建tomcat" class="headerlink" title="搭建tomcat"></a>搭建tomcat</h2><ul><li><img src="https://i.loli.net/2021/08/19/xkyhlutSmn6w4Vv.png" alt="image-20210819105331588"></li><li><img src="https://i.loli.net/2021/08/19/WHSzMYlgD25nG3O.png" alt="image-20210819110928534"></li><li><img src="https://i.loli.net/2021/08/19/1ikZemyEw3RtVC7.png" alt="image-20210819110752367"></li><li><img src="https://i.loli.net/2021/08/19/nPX5c4o2VlgvChz.png" alt="image-20210819110947120"></li></ul><h2 id="idea2020安装"><a href="#idea2020安装" class="headerlink" title="idea2020安装"></a>idea2020安装</h2><ul><li><img src="https://i.loli.net/2021/08/19/U3WCKjw6DBNPQXY.png" alt="image-20210819115158580"></li><li><img src="https://i.loli.net/2021/08/19/NRkJ5b1ZExzAfCc.png" alt="image-20210819115228335"></li><li><img src="https://i.loli.net/2021/10/02/Vi2rKFNewjASfO1.png" alt="image-20210819115401241"></li><li><img src="https://i.loli.net/2021/08/19/bYuwWE7AXiFVBxy.png" alt="image-20210819115141590"></li></ul><h2 id="mysql5-7的安装"><a href="#mysql5-7的安装" class="headerlink" title="mysql5.7的安装"></a>mysql5.7的安装</h2><ul><li><img src="https://i.loli.net/2021/08/19/4m5zp3RHTtEUlS1.png" alt="image-20210819120358837"></li><li><img src="https://i.loli.net/2021/08/19/cQirakxzAv7h8H1.png" alt="image-20210819122922344"></li><li><img src="https://i.loli.net/2021/08/19/YTcGjhAbKUaBiO9.png" alt="image-20210819121726773"></li><li><img src="https://i.loli.net/2021/10/02/g2FcaKElrzW8Yqk.png" alt="image-20210819123658222"></li><li><img src="https://i.loli.net/2021/08/19/duqHRhpgjbIlyLY.png" alt="image-20210819122501769"></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++系列：标准模板库STL(1)（七）</title>
    <link href="/2021/10/07/7.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL(1)/"/>
    <url>/2021/10/07/7.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93STL(1)/</url>
    
    <content type="html"><![CDATA[<p>更多参考其他文档<a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">菜鸟文档</a>、<a href="https://www.w3cschool.cn/cpp/">W3C</a>、<a href="https://docs.microsoft.com/zh-cn/cpp/cpp/?view=msvc-160">微软C++文档</a></p><h3 id="标准模板库STL-一"><a href="#标准模板库STL-一" class="headerlink" title="标准模板库STL(一)"></a>标准模板库STL(一)</h3><h3 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h3><p><img src="https://i.loli.net/2021/05/16/4YQymrKvdXEliko.png" alt="image-20210516144552809"></p><p><img src="https://i.loli.net/2021/10/07/djwkuzXe4n7D6bV.png" alt="image-20210516144840422"></p><p><img src="https://i.loli.net/2021/10/07/NxfhPvYRZTXsC2g.png" alt="image-20210516144910561"></p><p><img src="https://i.loli.net/2021/10/07/gophjlU1RAM7OS5.png" alt="image-20210516144925600"></p><p><img src="https://i.loli.net/2021/10/07/opFxwjitasRSZE2.png" alt="image-20210516144951476"></p><p><img src="https://i.loli.net/2021/10/07/W25nt1B9esHA8mf.png" alt="image-20210516145019165"></p><p><img src="https://i.loli.net/2021/10/07/FMWktO4NhnZCdRQ.png" alt="image-20210516145140880"></p><p><img src="https://i.loli.net/2021/10/07/UF8zj5xIORqaDoJ.png" alt="image-20210516145222043"></p><p><img src="https://i.loli.net/2021/10/07/N9JAstleZhQu4Tn.png" alt="image-20210516145241848"></p><p><img src="https://i.loli.net/2021/10/07/X6VICYtaoGKnMdl.png" alt="image-20210516145333373"></p><p>超出就数到最后一个字符为止</p><p><img src="https://i.loli.net/2021/10/07/uNPdfq3GJwmYZhM.png" alt="image-20210516145434670"></p><p><img src="https://i.loli.net/2021/10/07/tB8I2aDJT1UndZR.png" alt="image-20210516145444181"></p><p><img src="https://i.loli.net/2021/10/07/BCEAVo6TRQc4ISD.png" alt="image-20210516145521398"></p><img src="https://i.loli.net/2021/10/07/5YfTBNkEc61glWA.png" alt="image-20210516145547893" style="zoom:50%;" /><p><img src="https://i.loli.net/2021/10/07/iDkd8XUNvJLZhVE.png" alt="image-20210516145643266"></p><p><img src="https://i.loli.net/2021/10/07/tPlh4uCVj28bErM.png" alt="image-20210516145714213"></p><p><img src="https://i.loli.net/2021/10/07/xgI28HSUAbMqE9B.png"></p><img src="https://i.loli.net/2021/10/07/BOKxCnsE7A2MXdZ.png" alt="image-20210516145746657" style="zoom:50%;" /><img src="https://i.loli.net/2021/10/07/xoiajrJCk7cKQnS.png" alt="image-20210516145805184" style="zoom:50%;" /><p><img src="https://i.loli.net/2021/10/07/3jOW6uL1anSPUYy.png" alt="image-20210516145848123"></p><p><img src="https://i.loli.net/2021/10/07/kqHo17yJBdzxb5j.png" alt="image-20210516145857427"></p><p><img src="https://i.loli.net/2021/10/07/Fq87OMPgzwt5TDx.png" alt="image-20210516145932375"></p><p>需要用char* 和string类兼容</p><p><img src="https://i.loli.net/2021/10/07/2jpXmKqYUwQZBPu.png" alt="image-20210516150055641"></p><img src="https://i.loli.net/2021/10/07/UBupt2kVDAn1Mv3.png" alt="image-20210516150112714" style="zoom:50%;" /><p><img src="https://i.loli.net/2021/10/07/41fpinD3eJTqtjx.png"></p><p><img src="https://i.loli.net/2021/10/07/3U1o6MBaQskdAxg.png" alt="image-20210516150325202"></p><h3 id="泛型程序设计"><a href="#泛型程序设计" class="headerlink" title="泛型程序设计"></a>泛型程序设计</h3><ul><li><p><img src="https://i.loli.net/2021/10/07/zk1HOb4BEXyRPZV.png" alt="image-20210516150538058"></p><p><img src="https://i.loli.net/2021/10/07/mLclxXOGhRFsdeA.png" alt="image-20210516150558844"></p><p><img src="https://i.loli.net/2021/10/07/79Knji4JhIwS6cF.png" alt="image-20210516150657124"></p></li><li></li></ul><p><img src="https://i.loli.net/2021/10/07/R8vADzTYyMiEXFd.png" alt="image-20210516150845854"></p><p><img src="https://i.loli.net/2021/10/07/F5tcjzbLVEPlAUs.png" alt="image-20210516150855926"></p><p><img src="https://i.loli.net/2021/10/07/DWwvlBs4RqYSuCK.png" alt="image-20210516150954409"></p><p><img src="https://i.loli.net/2021/10/07/hbczvVAwnyYeILQ.png" alt="image-20210516151020503"></p><p><img src="https://i.loli.net/2021/10/07/EX9Oo8C2KBifvcR.png" alt="image-20210516151348281"></p><p><img src="https://i.loli.net/2021/10/07/AXQhW649idRmTJ3.png" alt="image-20210516151728200"></p><p><img src="https://i.loli.net/2021/10/07/kVX3dY48syh91NI.png" alt="image-20210516151831815"></p><p><img src="https://i.loli.net/2021/10/07/x6fPpRF5Akt2Yjr.png" alt="image-20210516152106142"></p><p><img src="https://i.loli.net/2021/10/07/OFHC4nEtc6Mg72m.png" alt="image-20210516152142367"></p><p><img src="https://i.loli.net/2021/10/07/4e513EsAjlTtNOr.png" alt="image-20210516152247266"></p><p><img src="https://i.loli.net/2021/10/07/jJv4cMWkXuxGhHm.png" alt="image-20210516152304270"></p><p><img src="https://i.loli.net/2021/10/07/jsL7qUd5Dtx4vwE.png" alt="image-20210516152617764"></p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul><li><p><img src="https://i.loli.net/2021/05/18/5BcM6wXbSAWHtmK.png" alt="image-20210518191736591"></p></li><li><p><img src="https://i.loli.net/2021/05/18/x7oku8nI9bWwa3e.png" alt="image-20210518191802641"></p></li><li><p>不可把迭代器与void*和“基类指针”混淆：指针代表真正的内存地址，即对象在内存中的存储位置；迭代器则代表元素在容器中的相对位置。</p></li><li><p><img src="https://i.loli.net/2021/05/18/qjSmF3aL9CbkvNX.png" alt="image-20210518192103344"></p><p><img src="https://i.loli.net/2021/05/18/J3s7OqxpDbHLorI.png" alt="image-20210518192128595"></p></li><li><p><img src="https://i.loli.net/2021/05/18/9VZxNEh6MUo8Qqu.png" alt="image-20210518192257910"></p><p><img src="https://i.loli.net/2021/05/18/hdTDPjEJRtBYnuc.png" alt="image-20210518192448400"></p></li><li><p><img src="https://i.loli.net/2021/05/18/EGjDF4WqBxS6Qpi.png" alt="image-20210518192507711"></p></li><li><p><img src="https://i.loli.net/2021/05/18/a4wvzqi2SpPlY15.png" alt="image-20210518192658440"></p></li><li><p><img src="https://i.loli.net/2021/05/18/8nhFuWJXmc6dNzk.png" alt="image-20210518192823441"></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">4</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; v;<br>vector&lt;<span class="hljs-keyword">int</span>&gt;::const_iterator i;  <span class="hljs-comment">//迭代器 获取地址的指针</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N; i &gt; <span class="hljs-number">0</span>; i--)<br>&#123;<br>v.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br>i = v.<span class="hljs-built_in">begin</span>();<br>cin &gt;&gt; v.<span class="hljs-built_in">front</span>();<br>cout &lt;&lt; *v.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">for</span> (i = v.<span class="hljs-built_in">begin</span>(); i &lt; v.<span class="hljs-built_in">end</span>(); ++i)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; *i ;<br>&#125;<br>cout &lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ul><li><p><img src="https://i.loli.net/2021/10/07/U5JeRW8Tv2MayLS.png" alt="image-20210518192930818"></p></li><li><p><img src="https://i.loli.net/2021/05/18/BDtuwC9NRi6fTo5.png" alt="image-20210518193126970"></p></li><li><p><img src="https://i.loli.net/2021/05/18/JevMdS8p6TC2gyc.png" alt="image-20210518193806467"></p><p><img src="https://i.loli.net/2021/10/07/QykP7uUH2mlfL5p.png" alt="image-20210518193921618"></p></li><li><p><img src="https://i.loli.net/2021/05/19/MZxBwpHfbuXJkNY.png" alt="image-20210519202736033"></p></li><li><p><img src="https://i.loli.net/2021/05/19/cPUHrqzdVAYnslM.png" alt="image-20210519202850307"></p></li><li><p><img src="https://i.loli.net/2021/05/19/METwDfeFnjUzx69.png" alt="image-20210519203132174"></p><p> <img src="https://i.loli.net/2021/05/19/xwjWV7dp4OmQyDo.png" alt="image-20210519203209700"></p><p><img src="https://i.loli.net/2021/05/19/XDodnBu4lIOCrhs.png" alt="image-20210519203409439"></p></li></ul><h3 id="vector-deque-和list"><a href="#vector-deque-和list" class="headerlink" title="vector deque 和list"></a>vector deque 和list</h3><ul><li><p>vector函数 查看文档</p></li><li><p><img src="https://i.loli.net/2021/05/19/NYOmvRUsqhyng2E.png" alt="image-20210519204233296"></p></li><li><p>deque</p></li><li><p><img src="https://i.loli.net/2021/05/19/JYoOVdfMigec3lZ.png" alt="image-20210519204336859"></p></li><li><p>list</p></li><li><p><img src="https://i.loli.net/2021/05/19/5xDIlNHhkoqjiCG.png" alt="image-20210519204500309"></p><p><img src="https://i.loli.net/2021/05/19/IWjkleCEZvG94yn.png"></p></li></ul><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><ul><li><p><img src="https://i.loli.net/2021/10/07/5aT6bvg2G7RLHhI.png" alt="image-20210519205337196"></p></li><li><p><img src="https://i.loli.net/2021/10/07/PkFqzxwNLMO7Y9d.png" alt="image-20210519205406795"></p><p><img src="https://i.loli.net/2021/10/07/ezsnOhRS2jo4J6Z.png" alt="image-20210519205502571"></p></li><li><p><img src="https://i.loli.net/2021/10/07/wgNHLxcbEq9XUva.png" alt="image-20210519205620709"></p><p><img src="https://i.loli.net/2021/10/07/VZD35pSX6gF4YHz.png" alt="image-20210519205638734"></p><p><img src="https://i.loli.net/2021/10/07/ZmWXjSUl8J2Ab3n.png" alt="image-20210519205721437"></p></li><li><p><img src="https://i.loli.net/2021/10/07/iIJKSQYCfnh3zmV.png" alt="image-20210519210115666"></p></li><li><p><img src="https://i.loli.net/2021/10/07/U2Eqe78KnxagihA.png" alt="image-20210519210532372"></p></li><li><p><img src="https://i.loli.net/2021/10/07/fR7EMUqsyntNjeF.png" alt="image-20210519210556422"></p></li><li><p><img src="https://i.loli.net/2021/10/07/aQBpuhLc6XJs1jx.png" alt="image-20210519210712188"></p><p><img src="https://i.loli.net/2021/10/07/ejfFcvD7bMkERpr.png" alt="image-20210519210755664"></p><p><img src="https://i.loli.net/2021/10/07/GHafcmdtpkbOEPg.png" alt="image-20210519210819827"></p></li><li><p><img src="https://i.loli.net/2021/10/07/3TKS1kYMRgNtG6B.png" alt="image-20210519211038880"></p></li><li><p><img src="https://i.loli.net/2021/10/07/I62l9XzmCxQVLgr.png" alt="image-20210519211108841"></p></li><li><p><img src="https://i.loli.net/2021/10/07/Lrlit4C7j2kgcoI.png" alt="image-20210519211258806"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++系列：输入输出和模板（六）</title>
    <link href="/2021/10/07/6.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%92%8C%E6%A8%A1%E6%9D%BF/"/>
    <url>/2021/10/07/6.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%92%8C%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>更多参考其他文档<a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">菜鸟文档</a>、<a href="https://www.w3cschool.cn/cpp/">W3C</a>、<a href="https://docs.microsoft.com/zh-cn/cpp/cpp/?view=msvc-160">微软C++文档</a></p><h2 id="输入输出和模板"><a href="#输入输出和模板" class="headerlink" title="输入输出和模板"></a>输入输出和模板</h2><h3 id="输入输出流相关的类"><a href="#输入输出流相关的类" class="headerlink" title="输入输出流相关的类"></a>输入输出流相关的类</h3><ul><li>ios 基类<ul><li>istream  用于输入的流类，cin是该类对象<ul><li>ifstream  从文件读取数据操作</li><li>iostream  既能输入又能输出的类<ul><li>fstream  既能读文件，又能写文件的类</li></ul></li></ul></li><li>ostream  用于输出的流类，cout是该类对象<ul><li>ofstream  向文件写入数据的类</li><li>iostream</li></ul></li></ul></li></ul><h3 id="标准流对象"><a href="#标准流对象" class="headerlink" title="标准流对象"></a>标准流对象</h3><ul><li><p>输入流对象：cin 与标准输入设备相连</p></li><li><p>输出流对象：cout 与标准输出设备相连</p></li><li><p>cerr 与标准错误输出设备相连</p></li><li><p>clog 与标准错误输出设备相连</p><div class="hljs code-wrapper"><pre><code>                 <figure class="highlight c++"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//缺省情况下,相同</span><br>  cerr &lt;&lt;<span class="hljs-string">&quot;Hello,world&quot;</span>&lt;&lt;endl;<br>clog &lt;&lt;<span class="hljs-string">&quot;Hello,world&quot;</span>&lt;&lt;endl;<br>cout &lt;&lt;<span class="hljs-string">&quot;Hello,world&quot;</span>&lt;&lt;endl; <br></code></pre></div></td></tr></table></figure></code></pre></li><li><p>cin对应于标准输入流，用于从键盘读取数据，也可以被重定向为从文件中读取数据。</p></li><li><p>cout对应于标准输出流，用于向屏幕输出数据，也可以被重定向为向文件写入数据。</p></li><li><p>cerr对应于标准错误i输出流，用于向屏幕输出错误信息</p></li><li><p>clog对应于标准错误输出流，用于向屏幕输出错误信息</p></li><li><p>cerr和clog的区别在于cerr不使用缓冲区，直接向显示器输出信息；而输出到clog中的信息先会被存放在缓冲区，缓冲区满或者刷新时才输出到屏幕</p></li></ul><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x, y;<br>cin &gt;&gt; x &gt;&gt; y;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout); <br><span class="hljs-comment">//&quot;w&quot; 表示写入</span><br><span class="hljs-comment">//stdout是标准输出</span><br><span class="hljs-comment">//将标准输出重定向到test.txt文件</span><br><span class="hljs-keyword">if</span>(y==<span class="hljs-number">0</span>)<br>cerr &lt;&lt; <span class="hljs-string">&quot;error.&quot;</span> &lt;&lt; endl;  <span class="hljs-comment">//错误信息将输出到终端</span><br><span class="hljs-keyword">else</span><br>cout &lt;&lt; x / y;<span class="hljs-comment">//输出结果到test.txt</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">double</span> f,n;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;t.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    <span class="hljs-comment">//输入重定向到 t.txt文件</span><br>    <span class="hljs-comment">//标准输入 stdin</span><br>    <span class="hljs-comment">//&quot;r&quot;  写入</span><br>cin &gt;&gt; f &gt;&gt; n;  <span class="hljs-comment">//这时就会从文件里读取数据</span><br>cout &lt;&lt; f &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; n &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="判断输入流结束"><a href="#判断输入流结束" class="headerlink" title="判断输入流结束"></a>判断输入流结束</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//判断数据是否读完</span><br><br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;x) <span class="hljs-comment">//强制类型运算符转换的重载，把cin对象强制转换位bool类型的值，所以可以判断true和false</span><br>&#123;<br>    .....<br>&#125;<br><br><span class="hljs-comment">//这里用到了&gt;&gt;位运算符的重载</span><br>istream &amp;<span class="hljs-keyword">operator</span> &gt;&gt; (<span class="hljs-keyword">int</span> a)<br>&#123;<br>    .....<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>如果是从文件输入数据，</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;some.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<span class="hljs-comment">//到文件尾部，输入流就算结束 </span><br></code></pre></div></td></tr></table></figure></li><li><p>如果从键盘输入，在单独一行输入Ctrl+Z代表输入流结束</p></li></ul><h3 id="istream类的成员函数"><a href="#istream类的成员函数" class="headerlink" title="istream类的成员函数"></a>istream类的成员函数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">istream &amp; <span class="hljs-title">getline</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * buf,<span class="hljs-keyword">int</span> buffSize)</span></span>;<br><span class="hljs-comment">//从输入流中读取bufSzie-1个字符到缓冲区buf，或读到碰到&#x27;\n&#x27;为止(哪个先到算哪个)</span><br><span class="hljs-function">istream &amp; <span class="hljs-title">getline</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *buf,<span class="hljs-keyword">int</span> bufSzie,<span class="hljs-keyword">char</span> delim)</span></span>;<br><span class="hljs-comment">//从输入流中读取bufSize-1个字符到缓冲区buf，或读到碰到delim字符为止(哪个先到算哪个)</span><br>两个函数都会自动在buf中读入数据的结尾添加\<span class="hljs-number">0&#x27;</span><br>    \n或delim之前的字符个数达到或超过了bufSzie个，就导致读入错误，其结果就是：虽然本次读入已经完成，但是之后的读入就都会失败了<br>    <span class="hljs-comment">//可以用if(!cin.getline(...))判读输入是否结束</span><br>    <br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">eof</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//判断输入流是否结束</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//返回下一个字符，但不从流中去掉</span><br><span class="hljs-function">istream &amp; <span class="hljs-title">putback</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span>; <span class="hljs-comment">//将字符ch放回输入流</span><br><span class="hljs-function">istream &amp; <span class="hljs-title">ignore</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nCount = <span class="hljs-number">1</span> ，<span class="hljs-keyword">int</span> delim = EOF)</span></span>;<span class="hljs-comment">//从流中删掉最多nCount个字符，遇到EOF时结束。</span><br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">100</span>];<br>cin &gt;&gt; x;  <span class="hljs-comment">//存入12后，空格留在了缓冲区</span><br>cin.<span class="hljs-built_in">getline</span>(buf, <span class="hljs-number">90</span>); <br>cout &lt;&lt; buf &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">12</span> abcd<br> abcd<br></code></pre></div></td></tr></table></figure><h3 id="流操纵算子"><a href="#流操纵算子" class="headerlink" title="流操纵算子"></a>流操纵算子</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span>   <span class="hljs-comment">//必有的头文件</span></span><br></code></pre></div></td></tr></table></figure><ul><li>整数流的基数：流操纵算子dec、oct、hex、setbase</li><li>浮点数的精度（precision，setprecision)</li><li>设置域宽(setw,width)</li><li>用户自定义的流操纵算子</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//整数流的基数： 流操纵算子 dec ,oct ,hex</span><br><br><span class="hljs-keyword">int</span> n = <span class="hljs-number">10</span>;<br>cout &lt;&lt; n &lt; endl;<br>cout &lt;&lt; hex &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>    &lt;&lt; dec &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span><br>    &lt;&lt; oct &lt;&lt; n &lt;&lt; endl;<br></code></pre></div></td></tr></table></figure><h3 id="控制浮点数精度的流操纵算子"><a href="#控制浮点数精度的流操纵算子" class="headerlink" title="控制浮点数精度的流操纵算子"></a>控制浮点数精度的流操纵算子</h3><ul><li><p>precision是成员函数</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//调用方式为：  cout.precision</span><br></code></pre></div></td></tr></table></figure></li><li><p>setprecison 是流操纵算子</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//调用方式为：  cout &lt;&lt; setprecision(5);  //可以连续输出，连续起作用</span><br></code></pre></div></td></tr></table></figure></li><li><p>功能都相同</p><ul><li>制度输出浮点数的有效位数    非定点方式输出时</li><li>指定输出浮点数的小数点后端有效位数（顶点方式输出时）<ul><li>定点方式：小数点必须出现在个位数后面</li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span> x = <span class="hljs-number">1234567.89</span>,y = <span class="hljs-number">12.34567</span>;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">1234567</span>;<br><span class="hljs-keyword">int</span> m = <span class="hljs-number">12</span>;<br>cout &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">6</span>) &lt;&lt; x &lt;&lt; endl  <span class="hljs-comment">//以小数蒂娜位置固定的方式输出</span><br> &lt;&lt; y &lt;&lt; endl<br> &lt;&lt; n &lt;&lt; endl<br> &lt;&lt; m;<br> &#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-number">1234567.890000</span>  <span class="hljs-comment">//小数点后6位，不足补了0</span><br><span class="hljs-number">12.345670</span>  <span class="hljs-comment">//不足也补了0</span><br><span class="hljs-number">1234567</span>  <span class="hljs-comment">//整数就不再补位</span><br><span class="hljs-number">12</span><br><span class="hljs-comment">//如果小数点后面太长，超出0.000001会四舍五入</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span> x = <span class="hljs-number">1234567.89</span>, y = <span class="hljs-number">12.34567</span>;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">1234567</span>;<br><span class="hljs-keyword">int</span> m = <span class="hljs-number">12</span>;<br>cout &lt;&lt; <span class="hljs-built_in">setiosflags</span>(ios::fixed) &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">6</span>) &lt;&lt; x &lt;&lt; endl  <span class="hljs-comment">//前面以定点方式输出</span><br> &lt;&lt; <span class="hljs-built_in">resetiosflags</span>(ios::fixed) &lt;&lt; x; <span class="hljs-comment">//后面改为以非定点方式输出</span><br>&#125;<br><br><span class="hljs-comment">//输出</span><br><span class="hljs-number">1234567.890000</span><br><span class="hljs-number">1.23457e+06</span><br></code></pre></div></td></tr></table></figure><h3 id="设置域宽的流操纵算子"><a href="#设置域宽的流操纵算子" class="headerlink" title="设置域宽的流操纵算子"></a>设置域宽的流操纵算子</h3><ul><li>setw  成员函数  </li><li>width  流操纵算子</li><li>两个功能相同，调用方式不同</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//是一次性的设置</span><br>cin &gt;&gt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">4</span>);   ==   cin.<span class="hljs-built_in">width</span>(<span class="hljs-number">5</span>)<br>cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">4</span>);  ==   cout.<span class="hljs-built_in">width</span>(<span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> w = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">char</span> string[<span class="hljs-number">10</span>];<br>cin.<span class="hljs-built_in">width</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">//这个域宽包含了&#x27;\0&#x27;</span><br><span class="hljs-keyword">while</span> (cin &gt;&gt; string)<br>&#123;<br>cout.<span class="hljs-built_in">width</span>(w++);<span class="hljs-comment">//域宽循环依次为4，5，6</span><br>cout &lt;&lt; string &lt;&lt; endl; <span class="hljs-comment">//输出不足时在左边补空格</span><br>cin.<span class="hljs-built_in">width</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">//一次性，循环时需要再定义一次</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//输入</span><br><span class="hljs-number">1234567890</span><br><span class="hljs-comment">//输出</span><br><span class="hljs-number">1234</span><br> <span class="hljs-number">5678</span><br>    <span class="hljs-number">90</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//综合例子</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> n = <span class="hljs-number">141</span>;<br><span class="hljs-comment">//1 分别以十六进制、十进制、八进制先后输出n</span><br>cout &lt;&lt; <span class="hljs-string">&quot;1 &quot;</span> &lt;&lt; hex &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; dec &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; oct &lt;&lt; n &lt;&lt; endl;<br><br><span class="hljs-keyword">double</span> x = <span class="hljs-number">1234567.89</span>;<br><span class="hljs-keyword">double</span> y = <span class="hljs-number">12.34567</span>;<br><span class="hljs-comment">//2 保留5位有效数字</span><br>cout &lt;&lt; <span class="hljs-string">&quot;2 &quot;</span> &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">5</span>) &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//3 保留小数点后面5位</span><br>cout &lt;&lt; <span class="hljs-string">&quot;3 &quot;</span> &lt;&lt; fixed &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">5</span>) &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;<br><span class="hljs-comment">//4 科学计数法输出，且保留小数点后面5位</span><br>cout &lt;&lt; <span class="hljs-string">&quot;4 &quot;</span> &lt;&lt; scientific &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">5</span>) &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;<br><span class="hljs-comment">//5 非负数要显示正好，输出宽度位12字符，宽度不足则用&#x27;*&#x27;填补</span><br>cout &lt;&lt; <span class="hljs-string">&quot;5 &quot;</span> &lt;&lt; showpos &lt;&lt; fixed &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">12</span>) &lt;&lt; <span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;*&#x27;</span>) &lt;&lt; <span class="hljs-number">12.1</span> &lt;&lt; endl;<br><span class="hljs-comment">//6 非负数不显示正号，输出宽度为12字符，宽度不足则右边用填充字符填充</span><br>cout &lt;&lt; <span class="hljs-string">&quot;6 &quot;</span> &lt;&lt;noshowpos &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">12</span>) &lt;&lt; left &lt;&lt; <span class="hljs-number">12.1</span> &lt;&lt; endl;<br><span class="hljs-comment">//7 输出宽度为12字符，宽度不足则左边用填充字符填充</span><br>cout &lt;&lt; <span class="hljs-string">&quot;7 &quot;</span> &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">12</span>) &lt;&lt; right &lt;&lt; <span class="hljs-number">12.1</span> &lt;&lt; endl;<br><span class="hljs-comment">//8 宽度不足时，负号和数值分列左右，中间用填充字符填充</span><br>cout &lt;&lt; <span class="hljs-string">&quot;8 &quot;</span> &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">12</span>) &lt;&lt; internal &lt;&lt; <span class="hljs-number">-12.1</span> &lt;&lt; endl;<br><span class="hljs-comment">//9 正常输出,保留后面5位一直有效</span><br>cout &lt;&lt; <span class="hljs-string">&quot;9 &quot;</span> &lt;&lt; <span class="hljs-number">12.1</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125;<br></code></pre></div></td></tr></table></figure><h3 id="用户自定义流操纵算子"><a href="#用户自定义流操纵算子" class="headerlink" title="用户自定义流操纵算子"></a>用户自定义流操纵算子</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><br><span class="hljs-function">ostream &amp;<span class="hljs-title">tab</span><span class="hljs-params">(ostream &amp; output)</span>  </span><br><span class="hljs-function">    <span class="hljs-comment">//自定义了流操纵算子tab，实际上是一个函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> output &lt;&lt; <span class="hljs-string">&#x27;\t&#x27;</span>;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;aa&quot;</span> &lt;&lt; tab &lt;&lt; <span class="hljs-string">&quot;bb&quot;</span> &lt;&lt; endl;  <br><br><span class="hljs-comment">//为什么可以这样用？</span><br>因为iostream里对 &lt;&lt; 进行了重载(成员函数)<br>ostream &amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream &amp; (*p)(ostream &amp;));<br>该函数内部会调用p所指向的函数，且以*<span class="hljs-keyword">this</span>作为参数<br>    <br>hex、dec、oct都是函数<br></code></pre></div></td></tr></table></figure><h3 id="文件和流"><a href="#文件和流" class="headerlink" title="文件和流"></a>文件和流</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">ofstream <span class="hljs-title">outFile</span><span class="hljs-params">(<span class="hljs-string">&quot;clients.dat&quot;</span>, ios::out | ios::binary)</span></span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125;<br><span class="hljs-comment">// - clients.dat  文件名</span><br><span class="hljs-comment">// - ios::out  文件打开方式</span><br>     - ios::out  输出到文件，删除原有内容<br>     - ios::app  输出到文件，保留原有内容<br><span class="hljs-comment">// - ios::binary 以二进制文件格式打开文件</span><br></code></pre></div></td></tr></table></figure><ul><li><p>创建文件</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//也可以先创建ofstream对象，再用open函数打开</span><br>ofstream fout;<br>fout.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.out&quot;</span>,ios::out|ios::binary);<br></code></pre></div></td></tr></table></figure></li><li><p>判断打开是否成功</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(!fout)<br>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;File open error!&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>文件名可以给出绝对路径，也可以给相对路径。没有交代路径信息，就是在当前文件夹下找文件</p></li></ul><h3 id="文件名的绝对路径喝相对路径"><a href="#文件名的绝对路径喝相对路径" class="headerlink" title="文件名的绝对路径喝相对路径"></a>文件名的绝对路径喝相对路径</h3><ul><li><p>绝对路径</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">c:\\tmp\\mydir\\some.txt<br></code></pre></div></td></tr></table></figure></li><li><p>相对路径</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//当前盘符的根目录下的tmp\dir\some.txt</span><br>\\tmp\\mydir\\some.txt<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//当前文件夹的tmp子文件夹里面的...</span><br>tmp\\mydir\\some.txt<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//当前文件夹的父文件夹下面的tmp子文件夹里面的...</span><br>..\\tmp\\mydir\\some.txt<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//当前文件夹的父文件夹的父文件夹下面的tmp子文件夹里面的...</span><br>..\\..\\tmp\\mydir\\some.txt<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="文件的读写指针"><a href="#文件的读写指针" class="headerlink" title="文件的读写指针"></a>文件的读写指针</h3><ul><li>对于输入文件，有读指针</li><li>对于输出文件，有写指针</li><li>对于输入输出文件，有一个读写指针</li><li>标识文件操作的当前位置，该指针在哪里，读写操作就在哪里进行</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">ofstream <span class="hljs-title">fout</span><span class="hljs-params">(<span class="hljs-string">&quot;a1.out,ios::app&quot;</span>)</span></span>;  <span class="hljs-comment">//打开了对应的文件，打开方式是在末尾添加</span><br><span class="hljs-keyword">long</span> location = fout.<span class="hljs-built_in">tellp</span>();  <span class="hljs-comment">//取得写指针的位置</span><br>location = <span class="hljs-number">10</span>;<br>fout.<span class="hljs-built_in">seekp</span>(location);   <span class="hljs-comment">//把文件写指针移动到第10个字节处</span><br><span class="hljs-comment">//具体有下面三种形式：</span><br><span class="hljs-comment">//location为+ 往后数，为-往前数</span><br>fout.<span class="hljs-built_in">seekp</span>(location, ios::beg); <span class="hljs-comment">//从头开始数location个字节</span><br>fout.<span class="hljs-built_in">seekp</span>(location, ios::cur);  <span class="hljs-comment">//从当前位置数location个字节</span><br>fout.<span class="hljs-built_in">seekp</span>(location, ios::end);  <span class="hljs-comment">//从尾部数location个字节</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125;<br><br><span class="hljs-comment">//文件指针位置放置文件尾可以读取文件的大小</span><br></code></pre></div></td></tr></table></figure><h3 id="字符文件读写"><a href="#字符文件读写" class="headerlink" title="字符文件读写"></a>字符文件读写</h3><ul><li>因为文件流也是流，所有流的成员函数和流操作算子也同样适用于文件流</li><li>写一个程序，将文件in.txt里面的整数排序，输出到out.txt</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; v; <span class="hljs-comment">//表示v是int的可变长的数组</span><br><span class="hljs-function">ifstream <span class="hljs-title">srcFile</span><span class="hljs-params">(<span class="hljs-string">&quot;in.txt&quot;</span>, ios::in)</span></span>;<br><span class="hljs-function">ofstream <span class="hljs-title">destFile</span><span class="hljs-params">(<span class="hljs-string">&quot;out.txt&quot;</span>, ios::out)</span></span>;<br><span class="hljs-keyword">int</span> x;<br><span class="hljs-keyword">while</span> (srcFile &gt;&gt; x) <br>&#123;<br>v.<span class="hljs-built_in">push_back</span>(x);  <span class="hljs-comment">//vector的成员函数，表示把x加到v的尾部</span><br>&#125;<br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; v.<span class="hljs-built_in">size</span>();i++)<br>&#123;<br>destFile &lt;&lt; v[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">//对硬盘的访问，这里destFile相当于cout</span><br>&#125;<br>destFile.<span class="hljs-built_in">close</span>();   <span class="hljs-comment">//要记得关闭，内存有限，文件可打开的次数是有限的</span><br>srcFile.<span class="hljs-built_in">close</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="二进制文件读写"><a href="#二进制文件读写" class="headerlink" title="二进制文件读写"></a>二进制文件读写</h3><ul><li><p>二进制读文件</p><ul><li>ifstream 和 fstream的成员函数：</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">istream&amp; <span class="hljs-title">read</span> <span class="hljs-params">(<span class="hljs-keyword">char</span>* s,<span class="hljs-keyword">long</span> n)</span></span>;  <br><span class="hljs-comment">//将文件读指针指向的地方s的n个字节内容</span><br><span class="hljs-comment">//读入到内存地址s,然后将文件读指针向后移动n字节</span><br><span class="hljs-comment">//以ios::in   方式打开文件时，文件读指针开始指向文件开头</span><br></code></pre></div></td></tr></table></figure></li><li><p>二进制写文件</p><ul><li><p>ofstream 和fstream的成员函数：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">istream&amp; <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>*s , <span class="hljs-keyword">long</span> n)</span></span>;<br><span class="hljs-comment">//将内存地址s处的n个字节内容</span><br><span class="hljs-comment">//写入到文件中写指针指向的位置，然后将文件写指针向后移动n字节</span><br><span class="hljs-comment">//以ios::out   方式打开文件时，文件写指针开始指向文件开头</span><br><span class="hljs-comment">//以ios::app   方式打开文件时，文件写指针开始指向文件尾部</span><br></code></pre></div></td></tr></table></figure></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//文件中写入一个整数</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//创建一个ofstream 的对象fout,写指针指向文件的开头，以二进制的形式打开&quot;some.dat&quot;文件</span><br><span class="hljs-function">ofstream <span class="hljs-title">fout</span><span class="hljs-params">(<span class="hljs-string">&quot;some.dat&quot;</span>, ios::out | ios::binary)</span></span>;  <br><span class="hljs-keyword">int</span> x = <span class="hljs-number">120</span>;<br><span class="hljs-comment">//将内存地址&amp;x处的int个字节内容写入文件</span><br>fout.<span class="hljs-built_in">write</span>((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)(&amp;x), <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br><span class="hljs-comment">//关闭文件</span><br>fout.<span class="hljs-built_in">close</span>();<br><span class="hljs-comment">//定义一个fin对象，以文件读指针指向文件开头并以二进制打开文件</span><br><span class="hljs-function">ifstream <span class="hljs-title">fin</span><span class="hljs-params">(<span class="hljs-string">&quot;some.dat&quot;</span>, ios::in | ios::binary)</span></span>;<br><span class="hljs-keyword">int</span> y;<br><span class="hljs-comment">//将int个字节的内容读到&amp;y的地址，读出需要地址才能读出</span><br>fin.<span class="hljs-built_in">read</span>((<span class="hljs-keyword">char</span> *)&amp;y, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>fin.<span class="hljs-built_in">close</span>();<br>cout &lt;&lt; y &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>从键盘输入几个学生的姓名的成绩，并以二进制文件形式保存</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//二进制文件</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">Student</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> score;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Student s;<br><span class="hljs-function">ofstream <span class="hljs-title">OutFile</span><span class="hljs-params">(<span class="hljs-string">&quot;students.dat&quot;</span>, ios::out | ios::binary)</span></span>;<br><span class="hljs-keyword">while</span> (cin&gt;&gt;s.name&gt;&gt;s.score)<br>&#123;<br>OutFile.<span class="hljs-built_in">write</span>((<span class="hljs-keyword">char</span> *)&amp;s, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(s));<br>&#125;<br>OutFile.<span class="hljs-built_in">close</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>读文件</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">Student</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> score;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Student s;<br><span class="hljs-function">ofstream <span class="hljs-title">OutFile</span><span class="hljs-params">(<span class="hljs-string">&quot;students.dat&quot;</span>, ios::in | ios::binary)</span></span>;<span class="hljs-comment">//打开文件</span><br><span class="hljs-keyword">if</span>(!inFile)&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;error&quot;</span> &lt;&lt; endl;<br>&#125;  <span class="hljs-comment">//判断文件是否打开成功</span><br><br><span class="hljs-keyword">while</span> (inFile.<span class="hljs-built_in">read</span>((<span class="hljs-keyword">char</span>*)&amp;s,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(s)))<span class="hljs-comment">//读s对象个字节，强制转换为char*</span><br>&#123;<br><span class="hljs-keyword">int</span> readedBytes = inFile.<span class="hljs-built_in">gcount</span>(); <span class="hljs-comment">//到文件结尾位数可能不够读，看刚才读了多少字节</span><br>cout &lt;&lt; s.name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; s.score &lt;&lt; endl;<br>&#125;<br><br>inFile.<span class="hljs-built_in">close</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ul><li>修改文件</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Student s;<br>    <span class="hljs-function">fstream <span class="hljs-title">iofile</span><span class="hljs-params">(<span class="hljs-string">&quot;c:\\tmp\\students.dat&quot;</span>,ios::in|ios::binary)</span></span>;<br><span class="hljs-keyword">if</span>(!iofile)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;error&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    iofile.<span class="hljs-built_in">seekp</span>(<span class="hljs-number">2</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(s),ios::beg);<span class="hljs-comment">//定位写指针</span><br>    iofile.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;Mike&quot;</span>,<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;Mike&quot;</span>)+<span class="hljs-number">1</span>);<span class="hljs-comment">//字符串以&#x27;\0&#x27;结尾需要多一位</span><br>    iofile.<span class="hljs-built_in">seekg</span>(<span class="hljs-number">0</span>,ios::beg);<span class="hljs-comment">//定位读指针到开头</span><br>    <span class="hljs-keyword">while</span>(iofile.<span class="hljs-built_in">read</span>((<span class="hljs-keyword">char</span>*)&amp;s,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(s)))<br>        cout&lt;&lt; s.name&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;s.score&lt;&lt;endl;<br>    iofile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//为什么存二进制？</span><br>更节省空间，方便查找<br></code></pre></div></td></tr></table></figure><ul><li>复制文件</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">用法示例：</span><br><span class="hljs-comment">mycopy src.dat dest.dat</span><br><span class="hljs-comment">即  将src.dat 拷贝到dest.dat  如果dest.dat原来就有，则原来的文件就会杯覆盖</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iosteream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc,<span class="hljs-keyword">char</span> * argv[])</span><span class="hljs-comment">//命令行参数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">3</span>)<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;File name missing!&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function">ifstream <span class="hljs-title">inFile</span><span class="hljs-params">(argv[<span class="hljs-number">1</span>],ios::binary|ios::in)</span></span>;<span class="hljs-comment">//打开文件</span><br>    <span class="hljs-keyword">if</span>(! inFile)&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Source file open error.&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function">ofstream <span class="hljs-title">outFile</span><span class="hljs-params">(argv[<span class="hljs-number">2</span>],ios::binary|ios::out)</span></span>;<span class="hljs-comment">//打开文件用于写</span><br>    <span class="hljs-keyword">if</span>(!outFile)&#123;<br>        cout &lt;&lt;<span class="hljs-string">&quot;New file open error.&quot;</span>&lt;&lt;endl;<br>        inFile.<span class="hljs-built_in">close</span>(); <span class="hljs-comment">//打开的文件一定要关闭</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">char</span> c;<br>    <span class="hljs-comment">//字符缓冲区，</span><br>    <span class="hljs-keyword">while</span>(inFile.<span class="hljs-built_in">get</span>(c)) <span class="hljs-comment">//每次读取一个字符</span><br>        outFile.<span class="hljs-built_in">put</span>(c);  <span class="hljs-comment">//每次写入一个字符</span><br>    outFile.<span class="hljs-built_in">close</span>();<br>    inFile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="二进制文件和文本文件的区别"><a href="#二进制文件和文本文件的区别" class="headerlink" title="二进制文件和文本文件的区别"></a>二进制文件和文本文件的区别</h3><ul><li><p>Linux 和 Unix下的换行符号：‘\n’  (ASCII码 ： 0x0a)</p></li><li><p>Windows下的换行符号：‘\r\n’  (ASCII码 ： 0x0d0a)  endl 就是‘\n’</p></li><li><p>Mac OS下的换行符号：‘\r’ (ASCII码 ： 0x0d) </p></li><li><p>==不注意就会导致Linux和 Mac OS文本文件在Windows 记事本打开时不换行==</p></li><li><p>Unix/Linux 下打开文件，用不用ios::binary 没区别</p></li><li><p>Windows 下打开文件，如果不用ios::binary，则：</p><ul><li>读取文件时，所有的‘\r\n’会被当做一个字符‘\n’处理，即少读了一个字符‘\r’</li><li>写入文件时，写入单独的’\n’时，系统自动在前面加一个’\r‘，即多写了一个’\r‘</li></ul></li></ul><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><p><a href="https://sm.ms/image/afcWXVmykoxwpuJ" target="_blank"><img src="https://i.loli.net/2021/05/15/afcWXVmykoxwpuJ.png" style="zoom:50%;"  ></a></p><ul><li>能否只写一个Swap</li><li>代码重用</li><li>容易的生成相像的函数</li></ul><p><img src="https://i.loli.net/2021/05/15/KHBnWPzrlSamxOA.png" alt="image-20210515162059563"></p><p><img src="https://i.loli.net/2021/05/15/nLKx9oesuXgWHZt.png" alt="image-20210515162313743"></p><p><img src="https://i.loli.net/2021/05/15/GivCScJKlI2oX74.png" alt="image-20210515162556241"></p><p><img src="https://i.loli.net/2021/10/07/e2UXVoENjQOpBYP.png" alt="image-20210515162626705"></p><ul><li>模板生成函数 是模板函数的实例化</li></ul><p><img src="https://i.loli.net/2021/05/15/fUJ4bjlZGkIpMSA.png" alt="image-20210515164239012"></p><p><img src="https://i.loli.net/2021/05/15/BcwEx3C6HtrI5zA.png"></p><p><img src="https://i.loli.net/2021/05/15/FfvsVWHmUPDGNd2.png" alt="image-20210515165235748"></p><p><img src="https://i.loli.net/2021/05/15/zvMxfskpuXr9CGB.png" alt="image-20210515165614395"></p><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><p><img src="https://i.loli.net/2021/05/15/CnXAx9fmry1ESla.png" alt="image-20210515170231583"></p><p><img src="https://i.loli.net/2021/05/15/T6e8sY2LlpOawtB.png" alt="image-20210515170243894"></p><p><img src="https://i.loli.net/2021/05/15/B5A9aNjsLgWUKz8.png" alt="image-20210515170315784"></p><p><img src="https://i.loli.net/2021/05/15/pdq4gYjD6x8Al7L.png" alt="image-20210515170342740"></p><p><img src="https://i.loli.net/2021/05/15/IiRlBzQkWDZLvXt.png" alt="image-20210515170521114"></p><p><img src="https://i.loli.net/2021/05/15/Ls4xgSTjFMei7YX.png" alt="image-20210515170553458"></p><p><img src="https://i.loli.net/2021/10/07/j3AxkdsvuODHz2R.png" alt="image-20210515170845494"></p><p><img src="https://i.loli.net/2021/05/15/vPfaRyE5ZcGDrkU.png" alt="image-20210515171038469"></p><p><img src="https://i.loli.net/2021/05/16/ZpaIzuNJqHTwRXO.png" alt="image-20210516143223419"></p><p><img src="https://i.loli.net/2021/05/16/t8BWsEDuozHgdr4.png" alt="image-20210516143424092"></p><p><img src="https://i.loli.net/2021/05/16/3LJ6urdSsXlMycY.png" alt="image-20210516143438504"></p><h3 id="类模板与友元"><a href="#类模板与友元" class="headerlink" title="类模板与友元"></a>类模板与友元</h3><p><img src="https://i.loli.net/2021/05/16/bf8H6I2QCJODE4S.png" alt="image-20210516143545469"></p><p><img src="https://i.loli.net/2021/05/16/cvdje5nmhB31wPa.png" alt="image-20210516143712422"></p><p><img src="https://i.loli.net/2021/05/16/ATICrOMbgzvwUxK.png" alt="image-20210516143855576"></p><p><img src="https://i.loli.net/2021/10/07/aPc2WneGSRAjdyr.png" alt="image-20210516144004498"></p><p><img src="https://i.loli.net/2021/05/16/jmewgzaWXZLuqnb.png" alt="image-20210516144026139"></p><p><img src="https://i.loli.net/2021/05/16/1AegGqdDbRo7XW3.png" alt="image-20210516144137179"></p><h3 id="类模板与静态成员变量的关系"><a href="#类模板与静态成员变量的关系" class="headerlink" title="类模板与静态成员变量的关系"></a>类模板与静态成员变量的关系</h3><p><img src="https://i.loli.net/2021/05/16/rcbPO7Nxtd8zWAT.png" alt="image-20210516144241442"></p><p><img src="https://i.loli.net/2021/05/16/L1sy9Ow8rqI5cMf.png" alt="image-20210516144331341"></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++系列：虚函数和多态（五）</title>
    <link href="/2021/10/07/5.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E5%A4%9A%E6%80%81/"/>
    <url>/2021/10/07/5.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<p>更多参考其他文档<a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">菜鸟文档</a>、<a href="https://www.w3cschool.cn/cpp/">W3C</a>、<a href="https://docs.microsoft.com/zh-cn/cpp/cpp/?view=msvc-160">微软C++文档</a></p><h2 id="虚函数和多态"><a href="#虚函数和多态" class="headerlink" title="虚函数和多态"></a>虚函数和多态</h2><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><ul><li><p>在类的定义中,前面有virtual关键字的成员函数就是虚函数</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">base</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">base::get</span><span class="hljs-params">()</span></span>&#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>virtual 关键字值用在类定义里函数声明中,在类外写函数体时不用写</p></li><li><p>参与多态</p></li><li><p>构造函数和静态成员函数不能是虚函数</p></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="表现形式-一"><a href="#表现形式-一" class="headerlink" title="表现形式 一"></a>表现形式 一</h4><ul><li>派生类的指针可以赋给基类指针 </li><li>通过基类指针调用基类和派生类中的同名虚函数时:<ul><li>若该指针指向一个基类的对象,那么被调用是基类的虚函数;</li><li>若该指针指向一个派生类的对象,那么被调用的是派生类的虚函数;</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CBase</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SomeVirtualFunction</span><span class="hljs-params">()</span></span>&#123;&#125;  <span class="hljs-comment">//虚函数</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDerived</span>:</span><span class="hljs-keyword">public</span> CBsae&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SomeVirtualFunction</span><span class="hljs-params">()</span></span>&#123;&#125; <br>    <span class="hljs-comment">//虚函数,virtual可以不写，但是写了对写子孙类等的人有好处，代码更明了</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CDerived ODerived;<br>    CBase * p = &amp;ODerived;<span class="hljs-comment">//p指针指向派生类</span><br>    p-&gt;<span class="hljs-built_in">SomeVirtualFunction</span>(); <span class="hljs-comment">//多态性</span><br>    <span class="hljs-comment">//调用取决于指针指向的类的虚函数,故这里运用派生类的虚函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="表现形式-二"><a href="#表现形式-二" class="headerlink" title="表现形式 二"></a>表现形式 二</h4><ul><li>派生类的对象可以赋给基类引用</li><li>通过基类引用调用基类和派生类中的同名虚函数时<ul><li>若该引用引用的是一个基类的对象,那么被调用是基类的虚函数</li><li>若该引用引用的是一个派生类的对象,那么被调用的是派生类的虚函数</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CBase</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SomeVirtualFunction</span><span class="hljs-params">()</span></span>&#123;&#125; <span class="hljs-comment">//虚函数</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDerived</span>:</span><span class="hljs-keyword">public</span> CBase<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SomeVirtualFunction</span><span class="hljs-params">()</span></span>&#123;&#125;  <span class="hljs-comment">//虚函数</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>CDerived ODerived;<br>CBase &amp;r = ODerived;  <span class="hljs-comment">//这里引用的是 派生类</span><br>r.<span class="hljs-built_in">SomeVirtualFunction</span>(); <br>    <span class="hljs-comment">// 这里调用取决于 r引用的类是基类还是派生类</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="多态的作用"><a href="#多态的作用" class="headerlink" title="多态的作用"></a>多态的作用</h4><ul><li>在面向对象的程序设计中使用多态,能够增强程序的可扩充性,即程序需要修改或增加功能的时候,需要改动和增加代码较少</li></ul><h3 id="多态实例"><a href="#多态实例" class="headerlink" title="多态实例"></a>多态实例</h3><ul><li>游戏程序多态</li></ul> <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//表现多态的游戏实例</span><br><span class="hljs-comment">//非多态</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCreature</span>&#123;</span><br><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">int</span> nPower;  <span class="hljs-comment">//代表攻击力</span><br><span class="hljs-keyword">int</span> nLifrValue; <span class="hljs-comment">//代表生命值</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDragon</span>:</span><span class="hljs-keyword">public</span> CCreature&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">(CWolf * pWolf)</span> <span class="hljs-comment">//攻击狼</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//表现攻击动作的代码</span><br>pWolf-&gt;<span class="hljs-built_in">Hurted</span>(nPower);<br>pWolf-&gt;<span class="hljs-built_in">FightBack</span>(<span class="hljs-keyword">this</span>);  <span class="hljs-comment">//this指向攻击的发起者</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">(CGhost * pGhost)</span><span class="hljs-comment">//攻击鬼</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//表现攻击动作的代码</span><br>pWolf-&gt;<span class="hljs-built_in">Hurted</span>(nPower);<br>pWolf-&gt;<span class="hljs-built_in">FightBack</span>(<span class="hljs-keyword">this</span>);  <span class="hljs-comment">//this指向攻击的发起者</span><br>&#125;<br><span class="hljs-comment">//有多少种怪物就要有多少个Attack函数，相应的还有FightBack函数</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Hurted</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nPower)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//表现受伤的代码</span><br>nLifrValue -= nPower;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FightBack</span><span class="hljs-params">(CWolf * pWolf)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//表现反击动作的代码</span><br>pWolf-&gt;<span class="hljs-built_in">Hurted</span>(nPower / <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FightBack</span><span class="hljs-params">(CGhost *pGhost)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//表现反击动作的代码</span><br>pGhost-&gt;<span class="hljs-built_in">Hurted</span>(nPower / <span class="hljs-number">2</span>);<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//如果想要新增一个怪物，此时所有类需要增加两个成员函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">(CA * pA)</span> </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FightBack</span><span class="hljs-params">(CA * pA)</span></span><br></code></pre></div></td></tr></table></figure><ul><li>多态形的写法</li></ul> <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//表现多态的游戏实例</span><br><span class="hljs-comment">//多态</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCreature</span>  //基类</span><br><span class="hljs-class">&#123;</span><br><br><span class="hljs-keyword">protected</span>:<br><span class="hljs-keyword">int</span> m_nPower;  <span class="hljs-comment">//代表攻击力</span><br><span class="hljs-keyword">int</span> m_nLifrValue; <span class="hljs-comment">//代表生命值</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">(CCreature *pCreature)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Hurted</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nPower)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FightBack</span><span class="hljs-params">(CCreature *pCreature)</span> </span>&#123;&#125;<br><span class="hljs-comment">//基类只有一个Attack成员函数和FightBack成员函数，并且是虚函数</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDragon</span>:</span> <span class="hljs-keyword">public</span> CCreature   <span class="hljs-comment">//派生类  龙</span><br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">(CCreature *pCreature)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Hurted</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nPower)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FightBack</span><span class="hljs-params">(CCreature *pCreature)</span> </span>&#123;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CDragon::Attack</span><span class="hljs-params">(CCreature *p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//表现攻击动作的代码</span><br>p-&gt;<span class="hljs-built_in">Hurted</span>(m_nPower); <span class="hljs-comment">//多态</span><br>p-&gt;<span class="hljs-built_in">FightBack</span>(<span class="hljs-keyword">this</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CDragon::Hurted</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nPower)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//表现受伤动作的代码</span><br>m_nLifrValue -= nPower;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CDragon::FightBack</span><span class="hljs-params">(CCreature *p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//表现反击动作的代码</span><br>p-&gt;<span class="hljs-built_in">Hurted</span>(m_nPower / <span class="hljs-number">2</span>); <span class="hljs-comment">//多态</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="几何形体处理程序"><a href="#几何形体处理程序" class="headerlink" title="几何形体处理程序"></a>几何形体处理程序</h3><ul><li>例子</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//几何形体处理程序</span><br><br><br><span class="hljs-comment">//类的声明----------------------</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CShape</span> //图形基类</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//纯虚函数 ，没有实体</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintInfo</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CRectangle</span> :</span> <span class="hljs-keyword">public</span> CShape <span class="hljs-comment">//矩形</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> w, h;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintInfo</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">CRectangle::Area</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> w * h;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CRectangle::PrintInfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Rectangle:&quot;</span> &lt;&lt; <span class="hljs-built_in">Area</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCircle</span> :</span> <span class="hljs-keyword">public</span> CShape<br>&#123; <span class="hljs-comment">//圆</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> r;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintInfo</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">CCircle::Area</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * r * r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CCircle::PrintInfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Circle:&quot;</span> &lt;&lt; <span class="hljs-built_in">Area</span>() &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTriangle</span> :</span> <span class="hljs-keyword">public</span> CShape<br>&#123; <span class="hljs-comment">//三角</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> a, b, c;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">double</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintInfo</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">CTriangle::Area</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span> p = (a + b + c) / <span class="hljs-number">2.0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(p * (p - a) * (p - b) * (p - c));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CTriangle::PrintInfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Triangle:&quot;</span> &lt;&lt; <span class="hljs-built_in">Area</span>() &lt;&lt; endl;<br><br>&#125;<br><span class="hljs-comment">//函数声明-----------------------------</span><br><br>CShape *pShapes[<span class="hljs-number">100</span>]; <span class="hljs-comment">//基类指针数组可以指向派生类</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MyCompare</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *s1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *s2)</span></span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mian</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">int</span> n;<br>CRectangle *pr;<br>CCircle *pc;<br>CTriangle *pt;<br>cin &gt;&gt; n; <span class="hljs-comment">//几何图形的个数</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">char</span> c;<br>cin &gt;&gt; c;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (c)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;R&#x27;</span>:<br>pr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CRectangle</span>();<br>cin &gt;&gt; pr-&gt;w &gt;&gt; pr-&gt;h;<br>pShapes[i] = pr;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>pc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CCircle</span>();<br>cin &gt;&gt; pc-&gt;r;<br>pShapes[i] = pc;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;T&#x27;</span>:<br>pt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CTriangle</span>();<br>cin &gt;&gt; pt-&gt;a &gt;&gt; pt-&gt;b &gt;&gt; pt-&gt;c;<br>pShapes[i] = pt;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">qsort</span>(pShapes, n, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(CShape *), MyCompare);  <span class="hljs-comment">//这里排序算法没有写明</span><br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>pShapes[i]-&gt;<span class="hljs-built_in">PrintInfo</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MyCompare</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *s1, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *s2)</span> <span class="hljs-comment">//传入的是数组中的图形元素指针</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">double</span> a1, a2;<br>CShape **p1;<br>CShape **p2;<br>p1 = (CShape **)s1; <br><span class="hljs-comment">//数组中的元素是CShape指针,这里要调取CShape指针指向图形的元素</span><br><span class="hljs-comment">//所以要指向指针数组，故写成指向指针的指针，因此转换为CShape **</span><br>p2 = (CShape **)s2;<br>a1 = (*p1)-&gt;<span class="hljs-built_in">Area</span>();  <span class="hljs-comment">//将数组指针指向图形的面积赋值给a1</span><br>a2 = (*p2)-&gt;<span class="hljs-built_in">Area</span>();  <span class="hljs-comment">//将数组指针指向图形的面积赋值给a2</span><br><span class="hljs-keyword">if</span>(a1 &lt; a2)  <span class="hljs-comment">//判断大小</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a2 &lt;a1)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>另外，在不是构造、析构函数的成员函数调用虚函数就是多态！！</li></ul><h3 id="构造函数和析构函数中调用虚函数"><a href="#构造函数和析构函数中调用虚函数" class="headerlink" title="构造函数和析构函数中调用虚函数"></a>构造函数和析构函数中调用虚函数</h3><ul><li>不是多态，编译时就确定了调用的是自己的类或基类中定义的函数，不会到运行时才决定调用的是自己的还是派生类的函数</li><li>程序运行时先调用的是==基类的构造函数== ，此时派生类还没有构造，易出错，所以不能调用派生类中的函数，所以就不是多态</li><li>在派生类中有与基类中同名同参数的函数，不加virtual也自动成为虚函数</li></ul><h3 id="多态的实现原理"><a href="#多态的实现原理" class="headerlink" title="多态的实现原理"></a>多态的实现原理</h3><ul><li><p>虚函数表，在类中定义虚函数时就存在</p></li><li><p>占用内存、查找需要消耗时间</p></li><li><p>引入</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Base:Print&quot;</span>; &#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span>:</span><span class="hljs-keyword">public</span> Base&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;Drived:Print&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>cout &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(Base) &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(Derived);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//输出：</span><br><span class="hljs-number">16</span>,<span class="hljs-number">16</span>  <span class="hljs-comment">//这是因为有虚函数表的存在，多分配了内存</span><br></code></pre></div></td></tr></table></figure></li><li><p>带有虚函数的类的对象占用的空间会明显较多</p></li><li><p>时间成本增多，因为需要查询虚函数表</p></li></ul> <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//实例</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Func</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;A::Func&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>:</span><span class="hljs-keyword">public</span> A<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Func</span><span class="hljs-params">()</span> </span>&#123; cout &lt;&lt; <span class="hljs-string">&quot;B::Func&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>A a;<br>A *pa = <span class="hljs-keyword">new</span> <span class="hljs-built_in">B</span>(); <span class="hljs-comment">//指向了一个B类的对象</span><br>pa-&gt;<span class="hljs-built_in">Func</span>();<br><span class="hljs-comment">//64程序指针为8个字节</span><br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> *p1 = (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> *)&amp;a;  <span class="hljs-comment">//指向了a的虚函数表</span><br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> *p2 = (<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> *)pa;  <span class="hljs-comment">// 指向了pa指向的B类对象的虚函数表</span><br>*p2 = *p1;  <span class="hljs-comment">//使指向的B类对象的虚函数表的指针p2指向类A的对象a的虚函数表</span><br>pa-&gt;<span class="hljs-built_in">Func</span>();  <span class="hljs-comment">//这里pa本ying</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//输出为</span><br>B::Func<br>A::Func  <span class="hljs-comment">//这里虚函数表替换了，所以输出A的虚函数表</span><br></code></pre></div></td></tr></table></figure><h3 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h3><ul><li>通过基类的指针删除派生类对象时，通常情况下只调用基类的析构函数<ul><li>但是，删除一个派生类的对象时，应该先调用派生类的析构函数，然后调用基类的析构函数</li></ul></li><li>==解决办法：把基类的析构函数声明为virtual== <ul><li>派生类的析构函数可以virtual不进行声明</li><li>通过基类的指针删除派生类对象时，首先调用派生类的析构函数，然后调用基类的析构函数</li></ul></li><li>类如果定义了虚函数，则应该将析构函数也定义成虚函数</li><li>一个类如果打算作为基类使用，也应该将析构函数定义为虚函数</li><li>虚函数不能作为构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">son</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>~<span class="hljs-built_in">son</span>()&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;bye from son&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">grandson</span>:</span><span class="hljs-keyword">public</span> son &#123;<br><span class="hljs-keyword">public</span>:<br>~<span class="hljs-built_in">grandson</span>() &#123; cout &lt;&lt; <span class="hljs-string">&quot;bye from grandson&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>son *pson;<br>pson = <span class="hljs-keyword">new</span> <span class="hljs-built_in">grandson</span>();<br><span class="hljs-keyword">delete</span> pson;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出： bye from son  </span><br><span class="hljs-comment">//此时虚构不完整</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">son</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">son</span>()&#123; <span class="hljs-comment">//设置为虚析构函数</span><br>cout &lt;&lt; <span class="hljs-string">&quot;bye from son&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">grandson</span>:</span><span class="hljs-keyword">public</span> son &#123;<br><span class="hljs-keyword">public</span>:<br>~<span class="hljs-built_in">grandson</span>() &#123; cout &lt;&lt; <span class="hljs-string">&quot;bye from grandson&quot;</span> &lt;&lt; endl; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>son *pson;<br>pson = <span class="hljs-keyword">new</span> <span class="hljs-built_in">grandson</span>();<br><span class="hljs-keyword">delete</span> pson;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//输出</span><br>bye from grandson<br>bye from son<br></code></pre></div></td></tr></table></figure><h3 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h3><ul><li>纯虚函数：没有函数体</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <br></code></pre></div></td></tr></table></figure><ul><li><p>抽象类：包含纯虚函数的类</p><ul><li><p>抽象类只能作为基类来派生新类使用，不能创建抽象类的对象</p></li><li><p>抽象类的指针和引用可以指向由抽象类派生出来的类的对象</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">A a; <span class="hljs-comment">//错，A是抽象类，不能创建对象</span><br>A * pa; <span class="hljs-comment">//ok,可以定义抽象类的指针和引用</span><br>pa = <span class="hljs-keyword">new</span> A; <span class="hljs-comment">//错误，A是抽象类，不能创建对象</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>在抽象类的成员函数内可以调用纯虚函数，但是在构造函数或析构函数内部不能调用纯虚函数。</p></li><li><p>如果一个类从抽象类派生类而来，那么当且仅当它实现了基类中的所有虚函数，它才能成为非抽象类。</p></li></ul> <figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>&#123;</span>  <span class="hljs-comment">//抽象类</span><br>    <span class="hljs-comment">//抽象类里可以有成员变量、函数</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<span class="hljs-comment">//纯虚函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">f</span>()&#125;;<span class="hljs-comment">//ok，class A为抽象类，不能有对象，所有此时this指针指向的是派生类对象 B</span><br>    <span class="hljs-built_in">A</span>()&#123;<br>        <span class="hljs-comment">//f();  //错误  ，调用的是自己的f</span><br>    &#125;<span class="hljs-comment">//在构造函数、析构函数内调用虚函数不是多态</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>:</span><span class="hljs-keyword">public</span> A<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;cout &lt;&lt; <span class="hljs-string">&quot;B:f()&quot;</span>&lt;&lt;endl;&#125;<br>&#125; ;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    B b;<br>    b.<span class="hljs-built_in">g</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++系列：继承和派生（四）</title>
    <link href="/2021/10/07/4.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E6%B4%BE%E7%94%9F/"/>
    <url>/2021/10/07/4.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E7%BB%A7%E6%89%BF%E5%92%8C%E6%B4%BE%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<p>更多参考其他文档<a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">菜鸟文档</a>、<a href="https://www.w3cschool.cn/cpp/">W3C</a>、<a href="https://docs.microsoft.com/zh-cn/cpp/cpp/?view=msvc-160">微软C++文档</a></p><h2 id="继承和派生"><a href="#继承和派生" class="headerlink" title="继承和派生"></a>继承和派生</h2><h3 id="继承和派生的概念"><a href="#继承和派生的概念" class="headerlink" title="继承和派生的概念"></a>继承和派生的概念</h3><ul><li>继承：在定义以恶搞新的类B时，如果该类与某个已有的类A相似(指的是B拥有A的全部特点)，那么就可以把A作为一个基类，而把B作为基类的一个派生类(也称子类)。</li><li>派生类是通过对基类进行修改和扩充得到的。在派生类中，可以扩充新的成员变量和成员函数。</li><li>派生类一经定义后，可以独立适用，不依赖于基类。</li><li>派生类拥有基类的全部成员函数和成员变量，不论是private、protected、public。<ul><li>在派生类的各个成员函数中，不能访问基类中的private成员。</li></ul></li></ul><h3 id="需要继承的例子"><a href="#需要继承的例子" class="headerlink" title="需要继承的例子"></a>需要继承的例子</h3><h3 id="派生类的写法"><a href="#派生类的写法" class="headerlink" title="派生类的写法"></a>派生类的写法</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><br><span class="hljs-comment">//语法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> 派生类名 ：<span class="hljs-title">public</span> 基类名</span><br><span class="hljs-class">&#123;</span><br>    <br>&#125;;<br><br><br><span class="hljs-comment">//实例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CStudent</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    string sName;<br>    <span class="hljs-keyword">int</span> nAge;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsThreeGood</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetName</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string &amp; name)</span></span>&#123;sName = name;&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CUndergraduateStudent</span>:</span><span class="hljs-keyword">public</span> CStudent&#123;  <br>    <span class="hljs-comment">//新的派生类包含基类的成员变量和函数</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> nDepartment; <span class="hljs-comment">//新增的成员变量</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsThreeGood</span><span class="hljs-params">()</span></span>&#123;&#125;   <span class="hljs-comment">//覆盖，相同的成员函数名就会覆盖基类中的</span><br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CanBaoYan</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CGraduatedStudent</span>:</span><span class="hljs-keyword">public</span> CStudent&#123;<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> nDepartment;<br>    <span class="hljs-keyword">char</span> szMentorName[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CountSalary</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h3 id="派生类对象的内存空间"><a href="#派生类对象的内存空间" class="headerlink" title="派生类对象的内存空间"></a>派生类对象的内存空间</h3><ul><li>派生类对象的体积，等于基类对象的体积，再加上派生类对象自己的成员变量的体积。在派生类对象中，包含着基类对象，而且基类对象的存储位置位于类派生类对象新增的成员变量之前。</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CBase</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> v1,v2;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDerived</span>:</span><span class="hljs-keyword">public</span> CBase<br>&#123;<br>    <span class="hljs-keyword">int</span> v3;<br>&#125;;<br></code></pre></div></td></tr></table></figure><ul><li>==派生类对象包含基类对象，派生类对象新增的内容位于基类对象之后== </li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//实例</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CStudent</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br>    string name;<br>    string id;<br>    <span class="hljs-keyword">char</span> gender;<br>    <span class="hljs-keyword">int</span> age;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Printlnfo</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Setlnfo</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string &amp;name_, <span class="hljs-keyword">const</span> string &amp;id_, <span class="hljs-keyword">int</span> age_, <span class="hljs-keyword">char</span> gender_)</span></span>;<br>    <span class="hljs-function">string <span class="hljs-title">GetName</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> name; &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CUndergraduateStudent</span> :</span> <span class="hljs-keyword">public</span> CStudent<br>&#123;<br><span class="hljs-keyword">private</span>:<br>    string department;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">QualifiedForBaoyan</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-comment">//给予保研资格</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;qualified for baoyan&quot;</span> &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printlnfo</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        CStudent::<span class="hljs-built_in">Printlnfo</span>(); <span class="hljs-comment">//调用基类的Printlnfo</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;Department:&quot;</span> &lt;&lt; department &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Setlnfo</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string &amp;name_, <span class="hljs-keyword">const</span> string &amp;id_, <span class="hljs-keyword">int</span> age_, <span class="hljs-keyword">char</span> gender_, <span class="hljs-keyword">const</span> string &amp;department_)</span></span><br><span class="hljs-function">    </span>&#123;<br>        CStudent::<span class="hljs-built_in">Setlnfo</span>(name_, id_, age_, gender_); <span class="hljs-comment">//调用基类的Setinfo</span><br>        department = department_;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CUndergraduateStudent s2;<br>    s2.<span class="hljs-built_in">Setlnfo</span>(<span class="hljs-string">&quot;Harray Potter&quot;</span>, <span class="hljs-string">&quot;118829212&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&quot;Computer Science&quot;</span>);<br>    cout &lt;&lt; s2.<span class="hljs-built_in">GetName</span>() &lt;&lt; <span class="hljs-string">&quot;&quot;</span>;<br>    s2.<span class="hljs-built_in">QualifiedForBaoyan</span>();<br>    s2.<span class="hljs-built_in">printlnfo</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="继承关系和复合关系"><a href="#继承关系和复合关系" class="headerlink" title="继承关系和复合关系"></a>继承关系和复合关系</h3><ul><li><p>继承  “是”关系</p><ul><li>满足逻辑要求“ 一个B对象也是一个C对象”</li><li>基类A，B是基类A的派生类</li></ul></li><li><p>复合  “有”关系</p><ul><li>类C中“有”成员变量k，k是类D的对象，则C和D是复合关系</li><li>一般逻辑上要求：“D对象是C对象的固有属性或组成部分”</li></ul></li><li><p>继承关系使用</p><ul><li>人 对男人和女人 的关系，把人作为基类，男人和女人作为人的派生类</li></ul></li><li><p>复合关系使用</p><ul><li><p>需要“点”类，也需要“圆”类时，两者的关系就是复合关系，即每一个圆包含一个点</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//正确做法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPoint</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">double</span> x,y;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCircle</span>;</span><br>    <span class="hljs-comment">//便于Ccirle类操作其圆心</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCircle</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">double</span> r;<br>    CPoint center;<br>&#125;;<br></code></pre></div></td></tr></table></figure></li><li><p>小区业主与狗的关系</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//这样的定义是错的，循环定义了</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDog</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMaster</span></span><br><span class="hljs-class">&#123;</span><br>    CDog dogs[<span class="hljs-number">10</span>];<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDog</span></span><br><span class="hljs-class">&#123;</span><br>    CMaster m;<br>&#125;;<br><br><br><span class="hljs-comment">//改进</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDog</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMaster</span></span><br><span class="hljs-class">&#123;</span><br>    CDog * dogs[<span class="hljs-number">10</span>];  <span class="hljs-comment">//CDog类的指针数组</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDog</span>&#123;</span><br>    CMaster m;<br>&#125;;<br><span class="hljs-comment">//依然不行 在调用修改狗的主人的信息时，需要维持不同狗之间的一致性，比较繁琐</span><br><br><span class="hljs-comment">//再次改进</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMaster</span>;</span> <span class="hljs-comment">//先声明</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDog</span>&#123;</span><br>    CMaster *pm;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMaster</span>&#123;</span>  <br>    <span class="hljs-comment">//这样使得狗对象只能通过人来调用，失去了自由</span><br>    CDog dogs[<span class="hljs-number">10</span>];<br>&#125;;<br><br><span class="hljs-comment">//正确做法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMsater</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDog</span>&#123;</span><br>    CMaster *pm;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMaster</span>&#123;</span><br>    CDog *dogs[<span class="hljs-number">10</span>];  <span class="hljs-comment">//这种关系也被称为&quot;知道&quot;</span><br>&#125;;<br></code></pre></div></td></tr></table></figure></li></ul></li></ul><h3 id="派生类覆盖基类成员"><a href="#派生类覆盖基类成员" class="headerlink" title="派生类覆盖基类成员"></a>派生类覆盖基类成员</h3><ul><li><p>派生类可以定义一个和基类成员同名的成员，这叫做覆盖。== 在派生类中访问这类成员时，缺省的情况是访问派生类中定义的成员。要在派生类中访问由类定义的同名成员时，要使用作用域符号 :: </p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">base</span>//基类</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> j;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">derived</span>:</span><span class="hljs-keyword">public</span> base<span class="hljs-comment">//派生类</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">access</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">derived::access</span><span class="hljs-params">()</span> <span class="hljs-comment">//派生类的成员函数</span></span><br><span class="hljs-function"></span>&#123;<br>    j=<span class="hljs-number">5</span>; <span class="hljs-comment">//这里是在派生类里找，错误error</span><br>    i=<span class="hljs-number">5</span>; <span class="hljs-comment">//派生类i</span><br>    base::i =<span class="hljs-number">5</span>;  <span class="hljs-comment">//基类i</span><br>    <span class="hljs-built_in">func</span>();<span class="hljs-comment">//派生类fun</span><br>    base::<span class="hljs-built_in">func</span>();<span class="hljs-comment">//基类fun</span><br>&#125;<br><br><span class="hljs-comment">//注意</span><br>一般来说，基类和派生类不定义同名的成员变量<br><span class="hljs-comment">//占用空间</span><br>|  base::j |<br>|  base::i |<br>|     i    |<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="类的保护成员"><a href="#类的保护成员" class="headerlink" title="类的保护成员"></a>类的保护成员</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">private</span>:   <span class="hljs-comment">//基类的成员函数、友元函数可以访问</span><br><span class="hljs-keyword">public</span>：   <span class="hljs-comment">//基本上都可以访问</span><br><span class="hljs-keyword">protected</span> :  <span class="hljs-comment">//基类的成员函数、友元函数、派生类的成员函数可以访问当前对象的基类的保护成员</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span>&#123;</span><br>    <span class="hljs-keyword">private</span>: <span class="hljs-keyword">int</span> nPrivate;<br>    <span class="hljs-keyword">public</span>: <span class="hljs-keyword">int</span> nPublic;<br>    <span class="hljs-keyword">protected</span>: <span class="hljs-keyword">int</span> nProtected;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span>:</span> <span class="hljs-keyword">public</span> Father&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AccessFatther</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        nPublic =  <span class="hljs-number">1</span>;<span class="hljs-comment">//  ok</span><br>        nPrivate = <span class="hljs-number">1</span> ; <span class="hljs-comment">//wrong  访问了基类的私有成员</span><br>        nProtected = <span class="hljs-number">1</span>; <span class="hljs-comment">// ok ，派生类可以访问基类的保护成员</span><br>        Son f;<br>        f.nProtected = <span class="hljs-number">1</span>;  <span class="hljs-comment">//wrong ,f不是当前对象</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Father f;<br>    Son s;<br>    f.nPublic = <span class="hljs-number">1</span>;<span class="hljs-comment">// OK</span><br>    s.nPublic = <span class="hljs-number">1</span>; <span class="hljs-comment">//OK</span><br>    f.nProtected = <span class="hljs-number">1</span>; <span class="hljs-comment">//error 保护</span><br>    f.nPrivate = <span class="hljs-number">1</span>;  <span class="hljs-comment">//error  私有</span><br>    s.nProtected = <span class="hljs-number">1</span>;<span class="hljs-comment">//error  保护</span><br>    s.nPrivate = <span class="hljs-number">1</span>;  <span class="hljs-comment">//error  私有</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="派生类的构造函数"><a href="#派生类的构造函数" class="headerlink" title="派生类的构造函数"></a>派生类的构造函数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bug</span>  //基类</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-keyword">int</span> nLegs;<br><span class="hljs-keyword">int</span> nColor;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> nType;  <span class="hljs-comment">//公有</span><br><span class="hljs-built_in">Bug</span>(<span class="hljs-keyword">int</span> legs, <span class="hljs-keyword">int</span> color);<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintBug</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlyBug</span> :</span> <span class="hljs-keyword">public</span> Bug  <span class="hljs-comment">//派生类</span><br>&#123;<br><span class="hljs-keyword">int</span> nWings;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">FlyBug</span>(<span class="hljs-keyword">int</span> legs, <span class="hljs-keyword">int</span> color, <span class="hljs-keyword">int</span> wings);<br>&#125;;<br><br>Bug::<span class="hljs-built_in">Bug</span>(<span class="hljs-keyword">int</span> legs, <span class="hljs-keyword">int</span> color)<br>&#123;<br>nLegs = legs;<br>nColor = color;<br>&#125;<br><br><br><span class="hljs-comment">//错误 的派生类构造函数</span><br>FlyBug::<span class="hljs-built_in">FlyBug</span>(<span class="hljs-keyword">int</span> legs, <span class="hljs-keyword">int</span> color, <span class="hljs-keyword">int</span> wings)<span class="hljs-comment">//派生类成员函数</span><br>&#123;<br>nLegs = legs;  <span class="hljs-comment">//访问的是基类的私有成员数据  错误</span><br>nColor = color;   <span class="hljs-comment">//访问的是基类的私有成员数据  错误</span><br>nType = <span class="hljs-number">1</span>;  <span class="hljs-comment">//访问基类的公有成员  </span><br>nWings = wings;  <span class="hljs-comment">//自己的私有成员</span><br>&#125;<br><span class="hljs-comment">//正确 的派生类构造函数</span><br>FlyBug::<span class="hljs-built_in">FlyBug</span>(<span class="hljs-keyword">int</span> legs,<span class="hljs-keyword">int</span> color,<span class="hljs-keyword">int</span> wings):<span class="hljs-built_in">Bug</span>(legs,color)<br>&#123;<br>    nWings = wings;<br>&#125;<br><br><br>FlyBug::<span class="hljs-built_in">FlyBug</span>(<span class="hljs-keyword">int</span> legs, <span class="hljs-keyword">int</span> color, <span class="hljs-keyword">int</span> wings) : <span class="hljs-built_in">Bug</span>(legs, color)<br>&#123;<br>nWings = wings;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">FlyBug <span class="hljs-title">fb</span><span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)</span></span>;<br>fb.nType = <span class="hljs-number">1</span>;<br>fb.nLegs = <span class="hljs-number">2</span>;  <span class="hljs-comment">//这里同样不能调用基类的私有成员  错误</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//在一个派生类的构造函数被执行之前，总是先执行基类的构造函数</span><br><span class="hljs-comment">//相反，在派生类的析构函数被执行时，执行完派生类的析构函数后，自动调用基类的构造函数</span><br></code></pre></div></td></tr></table></figure><ul><li><p>调用基类构造函数的两种方式</p><ul><li><p>显示方式：在派生类的构造函数中，为基类的构造函数提供参数</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">derived::<span class="hljs-built_in">derived</span>(arg_derived-list):<span class="hljs-built_in">base</span>(arg_base-list)<br></code></pre></div></td></tr></table></figure></li><li><p>隐式方式：在派生类的构造函数中，省略基类构造函数时，派生类的构造函数则自动调用基类的默认构造函数。</p></li></ul></li></ul><h3 id="包含成员对象的派生类的构造函数写法"><a href="#包含成员对象的派生类的构造函数写法" class="headerlink" title="包含成员对象的派生类的构造函数写法"></a>包含成员对象的派生类的构造函数写法</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bug</span>&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> nLegs;<br>    <span class="hljs-keyword">int</span> nColor;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> nType;<br>    <span class="hljs-built_in">Bug</span>(<span class="hljs-keyword">int</span> legs,<span class="hljs-keyword">int</span> color);<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintBug</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SKill</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>: <br>    <span class="hljs-built_in">Skill</span>(<span class="hljs-keyword">int</span> n)&#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FlyBug</span>:</span><span class="hljs-keyword">public</span> Bug&#123;<br>    <span class="hljs-keyword">int</span> nWings;<br>    Skill sk1,sk2;<br>    <span class="hljs-keyword">public</span>:<span class="hljs-built_in">FlyBug</span>(<span class="hljs-keyword">int</span> legs,<span class="hljs-keyword">int</span> color, <span class="hljs-keyword">int</span> wings);<br>&#125;;<br>FlyBug::<span class="hljs-built_in">FlyBug</span>(<span class="hljs-keyword">int</span> legs,<span class="hljs-keyword">int</span> color, <span class="hljs-keyword">int</span> wings):<br><span class="hljs-built_in">Bug</span>(legs,color),<span class="hljs-built_in">sk1</span>(<span class="hljs-number">5</span>),<span class="hljs-built_in">sk2</span>(color),<span class="hljs-built_in">nWings</span>(wings)&#123;&#125;<br></code></pre></div></td></tr></table></figure><p>生成时：</p><ul><li>先执行基类的构造函数，用以初始化派生类对象中的从基类继承的成员；</li><li>在执行成员对象类的构造函数，用以初始化派生类对象中成员对对象。</li><li>最后指向派生类自己的析构函数</li></ul><p>消亡时：</p><ul><li>先执行派生类自己的析构函数</li><li>再一次执行各成员对象类的析构函数</li><li>最后执行基类的析构函数</li></ul><p>==析构函数的调用顺序与构造函数的调用顺序相反== </p><h3 id="public-继承的赋值兼容规则"><a href="#public-继承的赋值兼容规则" class="headerlink" title="public  继承的赋值兼容规则"></a>public  继承的赋值兼容规则</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">base</span>&#123;</span>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">derived</span>:</span><span class="hljs-keyword">public</span> base&#123;&#125;;<br>base b;<br>derived d;<br></code></pre></div></td></tr></table></figure><ul><li><p>派生类对象可以赋值给基类对象</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">b = d;<br></code></pre></div></td></tr></table></figure></li><li><p>派生类对象可以初始化基类引用</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">base &amp; br = d;<br></code></pre></div></td></tr></table></figure></li><li><p>派生类对象的地址可以赋值给基类指针</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">base * pb = &amp; d;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="直接基类与间接基类"><a href="#直接基类与间接基类" class="headerlink" title="直接基类与间接基类"></a>直接基类与间接基类</h3><p>A－派生－Ｂ－派生－Ｃ</p><p>Ａ是B的直接基类，Ａ是Ｃ的间接基类</p><ul><li>声明派生类时,只需要列出它的直接基类<ul><li>派生类沿着类的层次自动向上继承它的间接基类</li></ul></li><li>==派生类的成员包括==<ul><li>派生类自己定义的成员</li><li>直接基类中的所有成员</li><li>所有间接基类的全部成员</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-keyword">int</span> n;<br><span class="hljs-built_in">Base</span>(<span class="hljs-keyword">int</span> i):<span class="hljs-built_in">n</span>(i)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;constructed&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Base</span>()&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;dextructed&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Derived</span>:</span><span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Derived</span>(<span class="hljs-keyword">int</span> i):<span class="hljs-built_in">Base</span>(i)&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Derived costructed&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Derived</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Derived dsetucted&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MoreDerived</span>:</span><span class="hljs-keyword">public</span> Derived<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MoreDerived</span>():<span class="hljs-built_in">Derived</span>(<span class="hljs-number">4</span>)  <span class="hljs-comment">//只用写明直接基类的成员赋值就行，不需要写间接基类</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;More Derived constructed&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">MoreDerived</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;More Derived destructed&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MoreDerived Obj;  <span class="hljs-comment">//从最顶层基类开始构造</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <span class="hljs-comment">//先析构最后派生的类</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++系列：运算符重载（三）</title>
    <link href="/2021/10/07/3.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <url>/2021/10/07/3.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>更多参考其他文档<a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">菜鸟文档</a>、<a href="https://www.w3cschool.cn/cpp/">W3C</a>、<a href="https://docs.microsoft.com/zh-cn/cpp/cpp/?view=msvc-160">微软C++文档</a></p><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><ul><li>c++预定义的运算符不能满足全部的运算需求，比如：复数的加减运算</li><li>希望能有一种特殊的运算，可以使类、等复杂的数据也可以进行运算，易于理解</li><li>运算符重载，就是对已有的运算符赋予更多含义的运算，可以使不同类型或者复杂的数据也可以进行运算。（比如类之间的运算）</li><li>即，对于自定义的这个运算符，具有唯一性，表达的含义只能作用于对应的运算数据 。 类a + 类 b</li><li>实质  函数重载</li><li>可以重载为普通函数，也可以重载为成员函数</li><li>实现  把含运算符的表达式转换成对运算符函数的调用</li><li>重载运算符，多个重载运算符时，根据参数选择</li></ul><p>==目数：运算所需变量个数== </p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//运算符重载形式</span><br><br>返回值类型 <span class="hljs-keyword">operator</span> 运算符（形参表）<br>&#123;<br>    ....<br>&#125;<br><br><br><span class="hljs-comment">//实例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">double</span> real,imag;  <span class="hljs-comment">//实部，虚部</span><br>    <span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r = <span class="hljs-number">0.0</span>,<span class="hljs-keyword">double</span> i=<span class="hljs-number">0.0</span>):<span class="hljs-built_in">real</span>(r),<span class="hljs-built_in">imag</span>(i)&#123;&#125;<br>    Complex <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> Complex &amp; c); <span class="hljs-comment">//声明，被重载的 “ - ”</span><br>&#125;;<br><br>Complex <span class="hljs-keyword">operator</span> +(<span class="hljs-keyword">const</span> Complex &amp;a,<span class="hljs-keyword">const</span> Complex &amp; b)  <span class="hljs-comment">//作普通函数时，参数个数为运算符目数</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>(a.real + b.real,a.imag + b.imag);<span class="hljs-comment">//返回一个临时对象</span><br>&#125;<br>Complex Complex::<span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> Complex &amp; c) <span class="hljs-comment">//做成员函数时，参数个数为运算符目数减一</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>(real - c.real, imag - c.imag);<span class="hljs-comment">//返回一个临时对象</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Complex <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)</span>,<span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</span>,c</span>;<br>    c = a + b;   <span class="hljs-comment">//等价于 c = operator +(a,b);</span><br>    cout &lt;&lt; c.real &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>&lt;&lt;c.imag &lt;&lt;endl;<br>    cout &lt;&lt; (a-b).real &lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;(a-b).imag &lt;&lt; endl;  <span class="hljs-comment">//a-b 等价于a.operator -(b)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="赋值运算符的重载"><a href="#赋值运算符的重载" class="headerlink" title="赋值运算符的重载"></a>赋值运算符的重载</h4><ul><li><p>用于类型不匹配数据之间的赋值</p></li><li><p>赋值运算符“ = ” 只能重载为成员函数</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span> :<br>    <span class="hljs-keyword">char</span> * str;  <span class="hljs-comment">//将指向动态分配空间</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">String</span>():<span class="hljs-built_in">str</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1</span>])&#123;str[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;&#125;  <span class="hljs-comment">//构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * <span class="hljs-title">c_str</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> str;&#125;; <span class="hljs-comment">//访问str</span><br>    String &amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s);<span class="hljs-comment">//赋值运算符重载</span><br>    ~<span class="hljs-built_in">String</span>()&#123;<span class="hljs-keyword">delete</span>[] str;&#125;<br>&#125;;<br><span class="hljs-comment">//下面重载“ = ” 以使得 obj = &quot;hello&quot; 能够成立</span><br>String &amp; String::<span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * s)<br>&#123;<br>    <span class="hljs-keyword">delete</span> [] str;<br>    str = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(s)+ <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">strcpy</span>(str , s);<br>    <span class="hljs-keyword">return</span> * <span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    String s;<br>    s = <span class="hljs-string">&quot;Good Luck,&quot;</span>; <span class="hljs-comment">//等价于s.operator(&quot;Good Luck,&quot;);</span><br>    cout &lt;&lt; s.<span class="hljs-built_in">c_str</span>() &lt;&lt; endl;<br>    <span class="hljs-comment">//String s2 = &quot;hello!&quot;;  //这里是初始化，并不是赋值，所以不能这样写，初始化用的是构造函数</span><br>    s = <span class="hljs-string">&quot;Shenzhou 8!&quot;</span>; <span class="hljs-comment">//等价于s.opeartor = (&quot;Shenzhou 8!&quot;);</span><br>    cout &lt;&lt; s.<span class="hljs-built_in">c_str</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">char</span> * str;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">String</span>(): <span class="hljs-built_in">str</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1</span>])&#123;str[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * <span class="hljs-title">c_str</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> str;&#125;; <span class="hljs-comment">//返回str</span><br>    String &amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * s)&#123;  <span class="hljs-comment">//赋值重载</span><br>            <span class="hljs-keyword">delete</span> [] str ;  <span class="hljs-comment">//原先的就被删除</span><br>            str = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(s)+<span class="hljs-number">1</span>];<br>            <span class="hljs-built_in">strcpy</span>(str,s);<br>            <span class="hljs-keyword">return</span> * <span class="hljs-keyword">this</span>;<br>        &#125;;<br>    ~<span class="hljs-built_in">String</span>()&#123;<span class="hljs-keyword">delete</span>[] str;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    String S1,S2;<br>    S1 = <span class="hljs-string">&quot;this&quot;</span>;<br>    S2 = <span class="hljs-string">&quot;that&quot;</span>;<br>    S1 = S2;   <span class="hljs-comment">//注意  这里存在问题！！有隐患</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br> <span class="hljs-comment">// S1 = S2; </span><br><span class="hljs-comment">// 上面直接用 “ = ” 没有重载的话，就是指针指向S2的首地址，使得S1原先指向的内存被丢弃，内存被浪费。</span><br><span class="hljs-comment">//S2、S1消亡时 ，该空间会析构两次，导致程序出错</span><br><span class="hljs-comment">// 如果再用于其他的如： S1 = “...” 时，就会delete原先的内存，导致S2指向的空间消失。依据第9行</span><br><br><span class="hljs-comment">//所以对于同类型的赋值，也需要在class 中添加成员函数：</span><br><br>String &amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> String &amp; s)&#123;<br>    <span class="hljs-keyword">delete</span> [] str;<br>    str = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(s.str) + <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">strcpy</span>(str,s.str);<br>    <span class="hljs-keyword">return</span> * <span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">//但是还会有问题,如果 s = s 是，就会先delete导致地址被提前释放从而报错，所以改成下面</span><br><br>String &amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-keyword">const</span> String &amp; s)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == &amp; <span class="hljs-keyword">this</span>)<br>        <span class="hljs-keyword">return</span> * <span class="hljs-keyword">this</span>;<br>    <span class="hljs-keyword">delete</span> [] str;<br>    str = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-built_in">strlen</span>(s.str) + <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">strcpy</span>(str,s.str);<br>    <span class="hljs-keyword">return</span> * <span class="hljs-keyword">this</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="对-operator-返回值类型的讨论"><a href="#对-operator-返回值类型的讨论" class="headerlink" title="对 operator = 返回值类型的讨论"></a>对 operator = 返回值类型的讨论</h4><p>对运算符进行重载的时候，好的风格是应该尽量保留运算符原本的特性</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//返回void </span><br>a = b = c ，导致“ = ” 不能连等<br><span class="hljs-comment">//返回String </span><br>(a = b) = c 时，a = b 返回的是a的引用<br><span class="hljs-comment">//为什么返回 String &amp;</span><br>a.<span class="hljs-built_in"><span class="hljs-keyword">operator</span></span>(b.<span class="hljs-keyword">operator</span>=(c));<br>(a.<span class="hljs-keyword">operator</span>=(b)).<span class="hljs-keyword">operator</span>=(c);<br><br><span class="hljs-comment">//特别的，为String类编写复制构造函数的时候，会面临和=同样的问题，用同样的方法处理,避免两个字符串指向同一空间</span><br><br><span class="hljs-built_in">String</span> (String &amp; s)<br>&#123;<br>    str = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span> [<span class="hljs-built_in">strlen</span>(s.str) + <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">strcpy</span>(str,s.str);<br>&#125;<br>    <br></code></pre></div></td></tr></table></figure><h4 id="运算符重载为友元函数"><a href="#运算符重载为友元函数" class="headerlink" title="运算符重载为友元函数"></a>运算符重载为友元函数</h4><ul><li>一般情况下，运算符重载为类的成员函数已经够用，但是有特殊的情况，还需使之==重载为普通函数，还可以访问该类的私有成员== ，所以需要重载为友元函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">double</span> real,imag;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">double</span> i):<span class="hljs-built_in">real</span>(r),<span class="hljs-built_in">imag</span>(i)&#123;&#125;;<br>    <span class="hljs-function">Complex <span class="hljs-title">operator</span><span class="hljs-params">(<span class="hljs-keyword">double</span> r)</span></span>;<br>    <span class="hljs-keyword">friend</span> Complex <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">const</span> Complex &amp; c); <span class="hljs-comment">//声明为友元</span><br>&#125;;<br><br>Complex Complex::<span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">double</span> r) <span class="hljs-comment">//成员函数</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>(real + r, imag);<br>&#125;<br><br><span class="hljs-comment">//到这里  c = c + 5； 有定义，相当于c = c.operator + (5)</span><br><span class="hljs-comment">//但如果写成  c = 5 + c  就会报错，所以要写一个下面的全局函数</span><br>Complex <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">const</span> Complex &amp; c)<span class="hljs-comment">//全局函数</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Complex</span>(c.real + r,c.imag);  <span class="hljs-comment">//这里访问了私有成员，故需要在类中，声明该函数为友元</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="数组和结构"><a href="#数组和结构" class="headerlink" title="数组和结构"></a>数组和结构</h3><h3 id="可变长数据类的实现"><a href="#可变长数据类的实现" class="headerlink" title="可变长数据类的实现"></a>可变长数据类的实现</h3><h4 id="需要实现的功能"><a href="#需要实现的功能" class="headerlink" title="需要实现的功能"></a>需要实现的功能</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//可变长整型数组类，应该满足下面的需求</span><br><span class="hljs-keyword">int</span> main<br>&#123;<br>    CArray a;  <span class="hljs-comment">//定义空数组</span><br>    <span class="hljs-keyword">for</span>( <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;++i)<br>        a.<span class="hljs-built_in">push_back</span>(i);  <span class="hljs-comment">//放置元素</span><br>    CArray a2,a3;<br>    a2 = a;  <span class="hljs-comment">//将a的元素复制给a</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;a.<span class="hljs-built_in">length</span>();++i)<br>        cout&lt;&lt;a2[i]&lt;&lt;<span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">//输出a2的元素</span><br>    a2 = a3; <span class="hljs-comment">//a2是空的，原来的空间被释放掉</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;a2.<span class="hljs-built_in">length</span>();++i)<span class="hljs-comment">//a2.length()返回()</span><br>        cout &lt;&lt;a2[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">//所以这里循环没有输出</span><br>    cout&lt;&lt;endl;<br>    a[<span class="hljs-number">3</span>] = <span class="hljs-number">100</span>;  <span class="hljs-comment">//更改了a 的3的数</span><br>    <span class="hljs-function">CArray <span class="hljs-title">a4</span><span class="hljs-params">(a)</span></span>;<span class="hljs-comment">//复制构造函数初始化</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;a4.<span class="hljs-built_in">length</span>();++i)<br>        cout&lt;&lt;a4[i]&lt;&lt;<span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">//</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//要用动态分配的内存来存放元素，需要一个指针成员变量</span><br><span class="hljs-comment">//在析构函数中，释放内存</span><br><span class="hljs-comment">//重载 []  ,</span><br><span class="hljs-comment">//写复制构造函数</span><br></code></pre></div></td></tr></table></figure><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//实现</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CArray</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> size;<br>    <span class="hljs-keyword">int</span> *ptr;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CArray</span>(<span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>);                  <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-built_in">CArray</span>(CArray &amp;a);                  <span class="hljs-comment">//复制构造函数</span><br>    ~<span class="hljs-built_in">CArray</span>();                          <span class="hljs-comment">//析构函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span></span>;              <span class="hljs-comment">//成员函数，在已有数组的尾部添加一个元素v</span><br>    CArray &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> CArray &amp;a); <span class="hljs-comment">//运算符的重载，用于数组对象间的赋值</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> size; &#125;       <span class="hljs-comment">//成员函数，返回数组元素个数</span><br>    <span class="hljs-keyword">int</span> &amp;CArray::<span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">int</span> i)      <span class="hljs-comment">//函数调用的返回值不能左值，所以返回类型应该是 int&amp; 。</span><br>    &#123;                                   <span class="hljs-comment">//为了使对象数组可以和普通数组一样进行左右值，所以这里将[] 符重载，满足对象的属性</span><br>        <span class="hljs-keyword">return</span> ptr[i];                  <span class="hljs-comment">//这里返回的是指针对应下标的数，不是对象</span><br>    &#125;<br>&#125;;<br><br>CArray::<span class="hljs-built_in">CArray</span>(<span class="hljs-keyword">int</span> s) : <span class="hljs-built_in">size</span>(s) <span class="hljs-comment">//构造函数</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-number">0</span>)<br>    &#123;<br>        ptr = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ptr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[s];<br>    &#125;<br>&#125;<br><br>CArray::<span class="hljs-built_in">CArray</span>(CArray &amp;a) <span class="hljs-comment">//复制构造函数</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!a.ptr) <span class="hljs-comment">//判断被复制的对象里的指针是不是NULL，如果为NULL则让新的数组也指向空</span><br>    &#123;<br>        ptr = <span class="hljs-literal">NULL</span>;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br>    ptr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[a.size];                  <span class="hljs-comment">//动态分配a的元素个数</span><br>    <span class="hljs-built_in">memcpy</span>(ptr, a.ptr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>) * size); <span class="hljs-comment">//String 的库函数，将后面元素的值赋给前面，最后是赋值的个数</span><br>    size = a.size;                          <span class="hljs-comment">// 成员size 赋值</span><br>&#125;<br><br>CArray ::~<span class="hljs-built_in">CArray</span>()<br>&#123;<br>    <span class="hljs-keyword">if</span> (ptr)<br>    &#123;<br>        <span class="hljs-keyword">delete</span>[] ptr;<br>    &#125;<br>&#125;<br>CArray &amp;CArray::<span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> CArray &amp;a) <span class="hljs-comment">//返回值 一般是该类型的引用</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (ptr == a.ptr) <span class="hljs-comment">//防止自己赋值给自己出错</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a.ptr == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptr) <span class="hljs-comment">//判断被赋值的对象数组是不是空</span><br>        &#123;<br>            <span class="hljs-keyword">delete</span>[] ptr; <span class="hljs-comment">//不是空 就删除该对象数组的存储空间</span><br>        &#125;<br>        ptr = <span class="hljs-literal">NULL</span>;<br>        size = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (size &lt; a.size) <span class="hljs-comment">//判断原有的内存空间够不够用，如果够用就不需要再分配新的空间</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptr)<br>            <span class="hljs-keyword">delete</span>[] ptr;<br>        ptr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[a.size];<br>    &#125;<br>    <span class="hljs-built_in">memcpy</span>(ptr, a.ptr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>) * size); <span class="hljs-comment">//复制元素</span><br>    size = a.size;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-keyword">void</span> CArray ::<span class="hljs-built_in">push_back</span>(<span class="hljs-keyword">int</span> v)<br>&#123;<br>    <span class="hljs-keyword">if</span> (ptr)<br>    &#123;<br>        <span class="hljs-keyword">int</span> *tmpPtr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size + <span class="hljs-number">1</span>];         <span class="hljs-comment">//重新分配空间</span><br>        <span class="hljs-built_in">memcpy</span>(tmpPtr, ptr, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>) * size); <span class="hljs-comment">//拷贝原函数组内容</span><br>        <span class="hljs-keyword">delete</span>[] ptr;                            <span class="hljs-comment">//参见释放数组</span><br>        ptr = tmpPtr;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ptr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">1</span>]; <span class="hljs-comment">//如果数组本来是空的，则要先new一个空间</span><br>    &#125;<br>    ptr[size++] = v; <span class="hljs-comment">//加入新的数组元素</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="流插入选算符和流提取运算符的重载"><a href="#流插入选算符和流提取运算符的重载" class="headerlink" title="流插入选算符和流提取运算符的重载"></a>流插入选算符和流提取运算符的重载</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">cout &lt;&lt;  <span class="hljs-comment">//什么含义</span><br>cout 是 ostream类的对象<br>&lt;&lt;  <span class="hljs-comment">//在iostream里 使用了重载</span><br><span class="hljs-comment">//如何才能 “this” 和 5 都可以输出</span><br></code></pre></div></td></tr></table></figure><p>有可能的做法</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">void</span> ostream::<span class="hljs-keyword">operator</span> &lt;&lt; (<span class="hljs-keyword">int</span> n) <span class="hljs-comment">//重载ostream类的成员函数</span><br>&#123;<br>    <span class="hljs-comment">//输出n的代码</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">void</span>  ...仿照上面写<span class="hljs-keyword">char</span>的<br>    <br>    <br><span class="hljs-comment">//为了可以连续输出 cout &lt;&lt; a &lt;&lt; b  修改如下</span><br><br>ostream &amp; ostream::<span class="hljs-keyword">operator</span>&lt;&lt;(<span class="hljs-keyword">int</span> n)<br>&#123;<br>    <span class="hljs-comment">//输出n的代码</span><br>    <span class="hljs-keyword">return</span> * <span class="hljs-keyword">this</span>;<br>&#125;<br>ostream &amp; ostream::<span class="hljs-keyword">operator</span>&lt;&lt;(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s)<br>&#123;<br>    <span class="hljs-comment">//输出s的代码</span><br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">//修改后的对应的函数调用形式为 </span><br>cout.<span class="hljs-keyword">operator</span>&lt;&lt;(<span class="hljs-number">5</span>).<span class="hljs-keyword">operator</span>&lt;&lt;(<span class="hljs-string">&quot;this&quot;</span>);<br><br><span class="hljs-comment">//例题</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CStudent</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span> : <span class="hljs-keyword">int</span> nAge;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CStudent s;<br>    s.nAge = <span class="hljs-number">5</span>;<br>    cout &lt;&lt; s&lt;&lt; <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>ostream &amp; <span class="hljs-keyword">operator</span> &lt;&lt;( ostream &amp; o,<span class="hljs-keyword">const</span> CStudent &amp; s)<br>&#123;<br>     o &lt;&lt;s.nAge;<br>    <span class="hljs-keyword">return</span> o;<span class="hljs-comment">//使返回值还是cout</span><br>&#125;<br><br><span class="hljs-comment">//例题</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span> &#123;</span><br>    <span class="hljs-keyword">double</span> real ,imag;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r = <span class="hljs-number">0</span>, <span class="hljs-keyword">double</span> i = <span class="hljs-number">0</span>) : <span class="hljs-built_in">real</span>(r), <span class="hljs-built_in">imag</span>(i)&#123;&#125;;<br>        <span class="hljs-keyword">friend</span> ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="hljs-keyword">const</span> Complex &amp;c);<br>        <span class="hljs-keyword">friend</span> istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(istream &amp;is, Complex &amp;c);<br>&#125;;<br><br>ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="hljs-keyword">const</span> Complex &amp;c)<br>&#123;<br>    os &lt;&lt; c.real &lt;&lt; <span class="hljs-string">&quot;+&quot;</span> &lt;&lt; c.imag &lt;&lt; <span class="hljs-string">&quot;i&quot;</span>;<span class="hljs-comment">//以&quot;a + bi&quot; 的形式输出</span><br>    <span class="hljs-keyword">return</span> os;<br>&#125;<br><br>istream &amp;<span class="hljs-keyword">operator</span>&gt;&gt;(istream &amp; is,Complex &amp; c)<br>&#123;<br>    string s;<br>    is &gt;&gt; s;<br>    <span class="hljs-keyword">int</span> pos = s.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-number">0</span>);<br>    string sTmp = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, pos);<br>    c.real = <span class="hljs-built_in">atof</span>(sTmp.<span class="hljs-built_in">c_str</span>());<br>    sTmp = s.<span class="hljs-built_in">substr</span>(pos + <span class="hljs-number">1</span>, s.<span class="hljs-built_in">length</span>() - pos - <span class="hljs-number">2</span>);<br>    c.imag = atof（sTmp.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">return</span> is;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="类型转换运算符的重载"><a href="#类型转换运算符的重载" class="headerlink" title="类型转换运算符的重载"></a>类型转换运算符的重载</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">double</span> real, imag;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r = <span class="hljs-number">0</span>, <span class="hljs-keyword">double</span> i = <span class="hljs-number">0</span>) : <span class="hljs-built_in">real</span>(r), <span class="hljs-built_in">imag</span>(i)&#123;&#125;;<br>        <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">double</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> real; &#125;<br>        <span class="hljs-comment">//重载强制类型转换运算符 double</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Complex <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-number">1.2</span>, <span class="hljs-number">3.4</span>)</span></span>;<br>    cout &lt;&lt; (<span class="hljs-keyword">double</span>)c &lt;&lt; endl;<span class="hljs-comment">//输出1.2</span><br>    <span class="hljs-keyword">double</span> n = <span class="hljs-number">2</span> + c;  <span class="hljs-comment">//等价于double n = 2+c.operator  double()</span><br>    cout &lt;&lt; n; <span class="hljs-comment">//输出3.2</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="自增自减运算符的重载"><a href="#自增自减运算符的重载" class="headerlink" title="自增自减运算符的重载"></a>自增自减运算符的重载</h3><ul><li><p>自增运算符++、自减运算符–有前置\后置之分，为了区分所重载的是前置运算符还是后置运算符</p></li><li><p>==前置运算== 符当作一元运算符重载</p><ul><li>重载为成员函数：</li><li>T &amp; operator++();</li><li>T &amp; operator–();</li><li>重载为全局函数：</li><li>T1 &amp; operator ++(T2);</li><li>T1 &amp; operator–(T2);</li></ul></li><li><p>==后置运算== 符当作二元运算符重载，多写一个没用的参数：</p><ul><li>重载为成员函数：</li><li>T &amp; operator++(int );</li><li>T &amp; operator–( int );</li><li>重载为全局函数：</li><li>T1 &amp; operator ++(T2，int);</li><li>T1 &amp; operator–(T2，int);</li></ul><p>在没有后置运算符重载而有牵制重载的情况下，在VS中，obj++也调用前置重载，而dev则令obj++编译出错</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">CDemo <span class="hljs-title">d</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<br>    cout &lt;&lt; (d++)&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>;  <span class="hljs-comment">//等价于d.operator++(0);</span><br>    cout &lt;&lt; d &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>    cout &lt;&lt; (++d)&lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;  <span class="hljs-comment">//等价于d.operator++();</span><br>    cout &lt;&lt; d &lt;&lt;endl;<br>    cout &lt;&lt; (d--) &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>; <span class="hljs-comment">//等价于operator--（d,0);</span><br>    cout &lt;&lt; d &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>    cout &lt;&lt; (--d) &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;  <span class="hljs-comment">//等价于 operator(d);</span><br>    cout &lt;&lt; d &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//实现</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDemo</span>&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CDemo</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>):<span class="hljs-built_in">n</span>(i)&#123;&#125;<br>    CDemo &amp; <span class="hljs-keyword">operator</span>++();  <span class="hljs-comment">//用于前置形式</span><br>    CDemo <span class="hljs-keyword">operator</span>++(<span class="hljs-keyword">int</span>);<br>    <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">int</span> <span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> n;&#125;<br>    <span class="hljs-keyword">friend</span> CDemo &amp; <span class="hljs-keyword">operator</span>--(CDemo &amp;);<br>    <span class="hljs-keyword">friend</span> CDemo <span class="hljs-keyword">operator</span>--(CDemo &amp;,<span class="hljs-keyword">int</span>);<br>&#125;;<br><br>CDemo &amp; CDemo ::<span class="hljs-keyword">operator</span>++()<br>&#123;<br>    <span class="hljs-comment">//前置++</span><br>     ++ n;<br>    <span class="hljs-keyword">return</span> * <span class="hljs-keyword">this</span>;<br>    <span class="hljs-comment">//++s 即为：s.operator();</span><br>&#125;<br><span class="hljs-comment">//++a 在原生c++中是引用</span><br><br>CDemo &amp; CDemo ::<span class="hljs-keyword">operator</span>++( <span class="hljs-keyword">int</span> k) <br>&#123;<br>    <span class="hljs-comment">//后置++</span><br>    <span class="hljs-function">CDemo <span class="hljs-title">tmp</span><span class="hljs-params">(*<span class="hljs-keyword">this</span>)</span></span>; <span class="hljs-comment">//记录修改前的对象</span><br>     n++;<br>    <span class="hljs-keyword">return</span> tmp;  <span class="hljs-comment">//返回修改前的对象</span><br>    <span class="hljs-comment">//s++ 即为：s.operator++(0);</span><br>&#125;<br>CDemo &amp; <span class="hljs-keyword">operator</span>--(CDemo &amp; d)<br>&#123;<br>    <span class="hljs-comment">//前置--</span><br>     d.n --;<br>    <span class="hljs-keyword">return</span> d;<br>    <span class="hljs-comment">//--s 即为：s.operator--(s);</span><br>&#125;<br>CDemo <span class="hljs-keyword">operator</span>--(CDemo &amp; d,<span class="hljs-keyword">int</span>)<br>&#123;<br>    <span class="hljs-comment">//后置--</span><br>    <span class="hljs-function">CDemo <span class="hljs-title">tmp</span><span class="hljs-params">(d)</span></span>; <span class="hljs-comment">//记录修改前的对象</span><br>     d.n--;<br>    <span class="hljs-keyword">return</span> tmp;  <span class="hljs-comment">//返回修改前的对象</span><br>    <span class="hljs-comment">//s-- 即为：s.operator();</span><br>&#125;<br><br><span class="hljs-comment">//通常情况下推荐适用  ++ i</span><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="运算符重载的注意事项"><a href="#运算符重载的注意事项" class="headerlink" title="运算符重载的注意事项"></a>运算符重载的注意事项</h3><ul><li>c++不允许定义新的运算符</li><li>重载后运算符的含义应该符合日常习惯<ul><li>complex_a + complex_b</li><li>word_a &gt; word_b</li><li>date_b =date_a +n</li></ul></li><li>运算符重载不改变运算符的优先级；</li><li>以下运算符不能被重载：“.”  “.* ”  “ :: ”  “ ? : ”   sizeof;</li><li>重载运算符()、[]、-&gt; 或者赋值运算符 = 时，运算符重载函数必须声明为类的成员函数。</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++系列：类和对象基础（二）</title>
    <link href="/2021/10/07/2.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80.md/"/>
    <url>/2021/10/07/2.C++%E7%B3%BB%E5%88%97%EF%BC%9A%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80.md/</url>
    
    <content type="html"><![CDATA[<p>更多参考其他文档<a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">菜鸟文档</a>、<a href="https://www.w3cschool.cn/cpp/">W3C</a>、<a href="https://docs.microsoft.com/zh-cn/cpp/cpp/?view=msvc-160">微软C++文档</a></p><h2 id="类和对象基础"><a href="#类和对象基础" class="headerlink" title="类和对象基础"></a>类和对象基础</h2><h3 id="类和对象基本概念"><a href="#类和对象基本概念" class="headerlink" title="类和对象基本概念"></a>类和对象基本概念</h3><ul><li>类的成员函数和类的定义分开写</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//类的成员函数和类的定义分开写</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CRectangle</span>  //定义一个类</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> w,h;   <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span></span>;     <span class="hljs-comment">//此处函数可以先声明，并不写出函数体</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Perimeter</span><span class="hljs-params">()</span></span>;   <span class="hljs-comment">//此处函数可以先声明，并不写出函数体</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> w_,<span class="hljs-keyword">int</span> h_)</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CRectangle::Area</span><span class="hljs-params">()</span></span>&#123;   <span class="hljs-comment">//类中的函数实体可以写到函数外</span><br>    <span class="hljs-keyword">return</span> w * h;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">CRectangle::Perimeter</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * (w + h);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CRectangle::Init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> w_,<span class="hljs-keyword">int</span> h_)</span></span>&#123;<br>     w = w_; h = h_;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>类成员的可访问范围</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//在类的定义中，用下来关键字来说明类成员的可被访问的范围</span><br> - <span class="hljs-keyword">private</span> : 私有成员，只能在函数内访问<br> - <span class="hljs-keyword">public</span> ：公有成员，可以在任何地方访问<br> - <span class="hljs-keyword">protected</span>:保护成员，以后再说<br> <span class="hljs-comment">//出现的顺序没有限制</span><br>     <br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">className</span> &#123;</span><br>     <span class="hljs-keyword">private</span>:<br>     私有属性和函数<br>     <span class="hljs-keyword">public</span> ：<br>            公有属性和函数<br>     <span class="hljs-keyword">protected</span>:<br>            保护属性和函数<br> &#125;;<br><br><span class="hljs-comment">//一般的，如果某个类的成员前面没有上述关键字，则被认为是私有成员</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Man</span>&#123;</span><br>    <span class="hljs-keyword">int</span> nAge;<span class="hljs-comment">//私有</span><br>    <span class="hljs-keyword">char</span> szName[<span class="hljs-number">20</span>];<span class="hljs-comment">//私有</span><br><span class="hljs-keyword">public</span>：<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetName</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * szName)</span>  <span class="hljs-comment">//公有</span></span><br><span class="hljs-function">    </span>&#123;<br><span class="hljs-built_in">strcpy</span>(Man::szName,szName);<br>    &#125;<br>&#125;;<br><br></code></pre></div></td></tr></table></figure><ul><li>访问范围</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//在当前类、函数的成员函数内部，能够访问：</span><br>- 当前对象的全部函数、属性；<br>- 同类其它对象的全部属性、函数；<br><span class="hljs-comment">//在类的成员函数以外的地方，只能够访问该类对象的公有成员，私有成员不能访问</span><br>    <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CEemployee</span> &#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">char</span> szName[<span class="hljs-number">30</span>];<span class="hljs-comment">//名字</span><br>    <span class="hljs-keyword">public</span>：<br>        <span class="hljs-keyword">int</span> salary;<span class="hljs-comment">//工资</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * name)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getName</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * name)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">averageSalary</span><span class="hljs-params">(CEmployee e1,CEmployee e2)</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CEmplotyee::setName</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * name)</span></span>&#123;<br>    <span class="hljs-built_in">strcpy</span>(szName,name);<span class="hljs-comment">//可以访问私有的szName</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CEmployee::getName</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * name)</span></span>&#123;<br>    <span class="hljs-built_in">strcpy</span>(name,szName); <span class="hljs-comment">//ok</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CEmployee::averageSalary</span><span class="hljs-params">(CEmployee e1,CEmployee e2)</span></span>&#123;<br>    cout&lt;&lt;e1.szName;<span class="hljs-comment">//ok</span><br>    salary = (e1.salary + e2.salary)/<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CEmployee e;<br>    <span class="hljs-built_in">strcpy</span>(e.szName,<span class="hljs-string">&quot;Tom1234567889&quot;</span>);<span class="hljs-comment">// 编译错，不能访问私有成员</span><br>    e.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;Tom&quot;</span>); <span class="hljs-comment">// ok</span><br>    e.salary = <span class="hljs-number">5000</span>;  <span class="hljs-comment">//ok</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//隐藏</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CEmployee e;<br>    <span class="hljs-built_in">strcpy</span>(e.szName,<span class="hljs-string">&quot;Tom1234567889&quot;</span>);<span class="hljs-comment">//编译错，不能访问私有成员</span><br>    e.<span class="hljs-built_in">setNName</span>(<span class="hljs-string">&quot;Tom&quot;</span>); <span class="hljs-comment">//ok</span><br>    e.salary = <span class="hljs-number">5000</span>; <span class="hljs-comment">// ok</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//设置私有成员的机制叫“隐藏”</span><br>“隐藏”的目的是强制对成员变量的访问一定要通过成员函数进行，那么以后成员变量的类型等属性修改后，只需要更改成员函数即可。否则，所有直接访问成员变量的语句都需要修改。<br>    <br><span class="hljs-comment">//例--</span><br>当一个程序移植到小内存的设备上时，会有例如将 szName[<span class="hljs-number">30</span>] 改为 szName[<span class="hljs-number">5</span>] 的需求，如果不在程序中设置为私有成员，那么程序中会有很多下面这样的语句：<br><span class="hljs-built_in">strcpy</span>(e.szName,<span class="hljs-string">&quot;Tom1234567889&quot;</span>);<br>此时，相关的语句也会报错，要一个一个修改，设置为私有后，我们就不会有上面的语句出现，可以通过如setName函数 来实现:<br>e.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;Tom12345678909887&quot;</span>);<br>这样，即便有这样的需求我们只需要将set函数做修改就行<br><br><br></code></pre></div></td></tr></table></figure><h4 id="成员函数的重载及参数缺省"><a href="#成员函数的重载及参数缺省" class="headerlink" title="成员函数的重载及参数缺省"></a>成员函数的重载及参数缺省</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//成员函数的重载及参数缺省</span><br><span class="hljs-comment">//成员函数可以带缺省参数</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Location</span> &#123;</span><br>    <span class="hljs-keyword">private</span> :<br>    <span class="hljs-keyword">int</span> x,y;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,<span class="hljs-keyword">int</span> y=<span class="hljs-number">0</span>)</span></span>;  <span class="hljs-comment">//函数中有两个缺省参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">valueX</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;x = val;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">valueX</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> x;&#125;       <span class="hljs-comment">//这里用了重载，即两个函数名相同，但是参数不同</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Location A,B;<br>    A.<span class="hljs-built_in">init</span>(<span class="hljs-number">5</span>);       <span class="hljs-comment">//少了的参数用缺省值，0</span><br>    A.<span class="hljs-built_in">valueX</span>(<span class="hljs-number">5</span>);        <span class="hljs-comment">//调用时，注意避免二义性</span><br>    cout&lt;&lt;A.<span class="hljs-built_in">valueX</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//二义性报错！！</span><br><span class="hljs-comment">//二义性报错！！</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Location</span> &#123;</span><br>    <span class="hljs-keyword">private</span> :<br>    <span class="hljs-keyword">int</span> x,y;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,<span class="hljs-keyword">int</span> y=<span class="hljs-number">0</span>)</span></span>; <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">valueX</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val = <span class="hljs-number">0</span>)</span></span>&#123;x = val;&#125;  <span class="hljs-comment">//这里使用了缺省参数0</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">valueX</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> x;&#125;       <span class="hljs-comment">//这里其实也是相当于为0</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Location A,B;<br>    A.<span class="hljs-built_in">init</span>(<span class="hljs-number">5</span>);   <br>    A.<span class="hljs-built_in">valueX</span>();        <span class="hljs-comment">//如果此时调用，就会报错，存在二义性，计算机不知道调用哪个函数</span><br>    cout&lt;&lt;A.<span class="hljs-built_in">valueX</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="构造函数（constructor）"><a href="#构造函数（constructor）" class="headerlink" title="构造函数（constructor）"></a>构造函数（constructor）</h3><p>构造函数是成员函数的一种，<strong>名字  与  类名</strong>  <strong>相同</strong>，可以有参数，不能有返回值(void 也不行)</p><p>作用：对对象进行初始化，如给成员变量赋初值</p><p><strong>如果定义类时没有写构造参数，则编译器生成一个默认的无参数的构造函数</strong></p><p>默认构造函数无参数，不做任何操作</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//基本概念</span><br>类如果定义了构造函数，则编译器不生成默认的无参数的构造函数<br>对象生成时，构造函数自动被调用。对象一旦生成，就再也不能在其执行构造函数<br>一个类可以有多个构造函数<br><span class="hljs-comment">//为什么需要构造函数</span><br>    构造函数执行必要的初始化工作，有了构造函数，就不必专门写初始化函数，也不用担心忘记调用初始化函数。<br>    对象没有被初始化，容易出错<br>    <br><span class="hljs-comment">//例1</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span>&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">double</span> real,imag;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Set</span><span class="hljs-params">(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">double</span> i)</span></span>;<br>&#125;;<span class="hljs-comment">//编译器自动生成默认构造函数</span><br><br>Complex cl;<span class="hljs-comment">//默认构造函数被调用</span><br>Complexa * pc = newComeplex;<span class="hljs-comment">//默认构造函数被调用</span><br><br><span class="hljs-comment">//例2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span>&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">double</span> real,imag;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">double</span> i = <span class="hljs-number">0</span>);<br>&#125;;<br>Complex::<span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">double</span> i)&#123;<br>    real = r;imag = i;<br>&#125;<br>Complex c1; <span class="hljs-comment">//error 缺少构造函数的参数</span><br>Complex * pc = <span class="hljs-keyword">new</span> Complex; <span class="hljs-comment">//error 也是因为没有参数</span><br><span class="hljs-function">Complex <span class="hljs-title">C1</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>;  <span class="hljs-comment">//OK  提供了参数，i 是 = 0的缺省参数，所以传一个参数就可以</span><br><span class="hljs-function">Complex <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)</span>,<span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)</span></span>;  <br>Complex * pc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Complex</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br></code></pre></div></td></tr></table></figure><p>一个类可以有多个构造函数，只要这些类的参数个数或类型不同就可以，类似函数重载，也用于初始化</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span>&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">double</span> real,imag;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Set</span><span class="hljs-params">(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">double</span> i)</span></span>;<br>    <span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">double</span> i);    <span class="hljs-comment">//重载的关系</span><br>    <span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r);              <span class="hljs-comment">//重载的关系</span><br>   <span class="hljs-built_in">Complex</span>(Complex c1,Complex c2);  <span class="hljs-comment">//重载的关系</span><br>&#125;;<br>Complex::<span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">double</span> i)  <span class="hljs-comment">//构造函数1</span><br>&#123;<br>    real = r; imag = i;<br>&#125;<br>Complex::<span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r)   <span class="hljs-comment">//构造函数2</span><br>&#123;<br>    real = r; imag = <span class="hljs-number">0</span>;<br>&#125;<br>Complex::<span class="hljs-built_in">Complex</span>(Complex c1,Complex c2);  <span class="hljs-comment">//构造函数3</span><br>&#123;<br>    real = cl.real + c2.real;   <span class="hljs-comment">//对应相加</span><br>    imag = cl.imag + c2.imag;   <br>&#125;<br><span class="hljs-function">Complex <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>;    <span class="hljs-comment">//对应构造函数2，表示赋初始值为（3，0）</span><br><span class="hljs-function">Complex <span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;    <span class="hljs-comment">//对应构造函数1，表示赋初始值为（1，0）</span><br><span class="hljs-function">Complex <span class="hljs-title">c3</span><span class="hljs-params">(c1,c2)</span></span>;    <span class="hljs-comment">//对应构造函数3，表示赋初始值为（4，0）</span><br><br></code></pre></div></td></tr></table></figure><h4 id="构造函数在数组中的使用"><a href="#构造函数在数组中的使用" class="headerlink" title="构造函数在数组中的使用"></a>构造函数在数组中的使用</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CSample</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CSample</span>()&#123;    <span class="hljs-comment">//无参数构造函数</span><br>            cout&lt;&lt;<span class="hljs-string">&quot;Constructor 1 Called&quot;</span>&lt;&lt;endl;<br>        &#125;<br>    <span class="hljs-built_in">CSample</span>(<span class="hljs-keyword">int</span> n)&#123;   <span class="hljs-comment">//有参构造函数</span><br>            x = n;<br>            cout&lt;&lt;<span class="hljs-string">&quot;Constructor 2 Called&quot;</span>&lt;&lt;endl;<br>        &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CSample array1[<span class="hljs-number">2</span>];  <span class="hljs-comment">// 2个变量都 没有 参数，则默认使用没给参数的构造函数</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;step1&quot;</span>&lt;&lt;endl;<br>    <br>    CSample array2[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">// 2个变量都 有 参数，则默认使用给参数的构造函数</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;step2&quot;</span>&lt;&lt;endl;<br>    <br>    CSample array3[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">3</span>&#125;; <br>    <span class="hljs-comment">//一个有参数，一个无参数，则有参数的用有参构造函数初始化，无参的用无参构造函数初始化</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;step3&quot;</span>&lt;&lt;endl;<br>    <br>    CSample *array4 = <span class="hljs-keyword">new</span> CSample[<span class="hljs-number">2</span>];   <span class="hljs-comment">//没有参数用无参</span><br>    <span class="hljs-keyword">delete</span> []array4;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//分割线----------------------------------------------------</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;</span><br>    pulic:<br>    <span class="hljs-built_in">Test</span>(<span class="hljs-keyword">int</span> n)&#123;&#125;  <span class="hljs-comment">//构造1</span><br>    <span class="hljs-built_in">Test</span>(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)&#123;&#125;  <span class="hljs-comment">//构造2</span><br>   <span class="hljs-built_in">Test</span>()&#123;&#125;  <span class="hljs-comment">//构造3</span><br>&#125;<br>Test array1[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>，<span class="hljs-built_in">Test</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)&#125;;  <span class="hljs-comment">//三个元素分别于1，2，3构造初始化</span><br><br>Test array2[<span class="hljs-number">3</span>] = &#123;<span class="hljs-built_in">Test</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),<span class="hljs-built_in">Test</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),<span class="hljs-number">1</span>&#125;; <span class="hljs-comment">//三个元素分别用2，2，1初始化</span><br><br>Test * Parray[<span class="hljs-number">3</span>] = &#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">Test</span>(<span class="hljs-number">4</span>),<span class="hljs-keyword">new</span> <span class="hljs-built_in">Test</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)&#125;; <span class="hljs-comment">// 1，2   Parray[2]没有被初始化！</span><br></code></pre></div></td></tr></table></figure><h4 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h4><p>只有一个参数，即对同类对象的引用</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">形式：  <br>X::<span class="hljs-built_in">X</span>(X &amp;)<br>    <br>X::<span class="hljs-built_in">X</span>(<span class="hljs-keyword">const</span> X &amp;)  <span class="hljs-comment">//可以常量对象作为参数</span><br>    <br>如果没有定义复制构造函函数，那么编译器生成默认复制构造函数。默认的复制构造函数完成复制功能。<br>    <br><br></code></pre></div></td></tr></table></figure><ul><li><p>==无参的构造函数==也叫默认构造函数==不一定存在==，没有任何构造函数编译器就会生成无参构造函数，写了构造函数系统就不会生成无参构造函数</p></li><li><p>==复制构造函数一定存在==，你不写编译器就帮你形成。</p></li><li><p>==构造函数不一定是无参的==，有了构造函数，就不会自动生成无参构造函数了</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//复制构造函数概念</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span>&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">double</span> real,imag;<br>&#125;;<br>Complex c1; <span class="hljs-comment">//无参构造函数初始化</span><br><span class="hljs-function">Complex <span class="hljs-title">c2</span><span class="hljs-params">(c1)</span></span>; <span class="hljs-comment">//复制构造函数，将c2初始化成和c1一样，复制的工作</span><br></code></pre></div></td></tr></table></figure><h4 id="复制构造函数起作用的三种情况"><a href="#复制构造函数起作用的三种情况" class="headerlink" title="复制构造函数起作用的三种情况"></a>复制构造函数起作用的三种情况</h4><ul><li><p>当用一个对象去初始化同类的另一个对象时。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">Complex <span class="hljs-title">c2</span><span class="hljs-params">(c1)</span></span>;<br><br>Complex c2 = c1; <span class="hljs-comment">//初始化语句，非赋值语句，与上面等价</span><br></code></pre></div></td></tr></table></figure></li><li><p>如果某函数有一个参数是类A的对象，那么该函数被调用时，类A的复制构造函数将被调用</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>: <br>    <span class="hljs-built_in">A</span>()&#123;&#125;;<br>    <span class="hljs-built_in">A</span>(A &amp; a)&#123;<br>        cout &lt;&lt;<span class="hljs-string">&quot;Copy constructor called&quot;</span>&lt;&lt;endl;<br>         <span class="hljs-comment">//没有写复制的语句</span><br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Func</span><span class="hljs-params">(A a1)</span></span>&#123;&#125;  <span class="hljs-comment">//参数传递后有一个复制的工作</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    A a2;<br>    <span class="hljs-built_in">Func</span>(a2);  <span class="hljs-comment">//此时a1就是a2的复制品</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//如果自己写了复制构造函数，但是里面没有写复制的语句，则上面就不能完成复制，则此时形参就不一定是实参的拷贝</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>: <br>    <span class="hljs-built_in">A</span>()&#123;&#125;;<br>    <span class="hljs-built_in">A</span>(A &amp; a)&#123;<br>        cout &lt;&lt;<span class="hljs-string">&quot;Copy constructor called&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-comment">//没有写复制的语句</span><br>    &#125;<br>&#125;;<br><br></code></pre></div></td></tr></table></figure></li><li><p>如果函数的返回值是类A的对象时，则函数返回时，A的复制构造函数被调用</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> v;<br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">int</span> n) &#123; v = n; &#125;;<br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">const</span> A &amp; a)&#123;  <span class="hljs-comment">//复制构造函数</span><br>        v = a.v;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Copy constructor called&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;;<br><span class="hljs-function">A <span class="hljs-title">Func</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//是返回类型为对象的函数</span><br>    <span class="hljs-function">A <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span>;<br>    <span class="hljs-keyword">return</span> b;   <span class="hljs-comment">//这是复制构造函数的参数</span><br>    <span class="hljs-comment">//在函数返回时，通过复制构造函数，使得返回值赋值为b.v </span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-built_in">Func</span>().v&lt;&lt;endl;  <span class="hljs-comment">//输出的是返回值对象的V，相当于b.v</span><br>    <span class="hljs-comment">//Fun函数返回时，复制了b.v</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><p>==总结三种情况：用一个对象初始化另一个对象、函数的形参是个对象、函数的返回值是对象==</p><p>注意：对象间的赋值并不导致复制构造函数被调用</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMyclass</span> &#123;</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-built_in">CMyclass</span>()&#123;&#125;;<br>        <span class="hljs-built_in">CMyclass</span>(CMyclass &amp; c)&#123;n = <span class="hljs-number">2</span> * c.n;&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    CMyclass c1,c2;<br>    c1.n = <span class="hljs-number">5</span>;  <span class="hljs-comment">//</span><br>    c2 = c1;   <span class="hljs-comment">//单纯的对象间的赋值操作不会导致复制构造函数被调用，类似结构体赋值</span><br>    <span class="hljs-function">CMyclass <span class="hljs-title">c3</span><span class="hljs-params">(c1)</span></span>;  <span class="hljs-comment">//这里使用了复制构造函数，但是函数内做的不是复制的工作</span><br>    cout &lt;&lt;<span class="hljs-string">&quot;c2.n=&quot;</span>&lt;&lt; c2.n &lt;&lt;<span class="hljs-string">&quot;,&quot;</span>;<br>    cout &lt;&lt;<span class="hljs-string">&quot;c3.n=&quot;</span>&lt;&lt; c3.n &lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="常量引用参数"><a href="#常量引用参数" class="headerlink" title="常量引用参数"></a>常量引用参数</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(CMyclass obj_)</span></span>&#123;<br>    cout &lt;&lt;<span class="hljs-string">&quot;fun&quot;</span>&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-comment">//这样的函数，调用时生成形参会引发复制构造函数调用，开销比较大。</span><br><span class="hljs-comment">//所以可以考虑使用CMyclass &amp; 引用类型作为参数。</span><br><span class="hljs-comment">//如果希望确保实参的值在函数中不应被改变，那么可以加上const关键字：</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-keyword">const</span> CMyclass &amp; obj)</span></span>&#123;<br>    <span class="hljs-comment">//在函数中任何试图改变obj值的语句都将变成非法</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>为什么要自己写构造函数？？？？</p><h4 id="类型转换构造函数"><a href="#类型转换构造函数" class="headerlink" title="类型转换构造函数"></a>类型转换构造函数</h4><p>定义转换构造函数的目的是==实现类型的自动转换== </p><p>==只有一个参数==，而且==不是复制构造函数的构造函数==，一般就可以看作是转换构造函数。</p><p>当需要的时候，==编译系统自动调用转换构造函数== ，建立一个无名的临时对象（或临时变量）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span>&#123;</span><br>    <span class="hljs-keyword">public</span> : <br>    <span class="hljs-keyword">double</span> real,imag;<br>    <span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">int</span> i)&#123;  <span class="hljs-comment">//类型转换构造函数</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;IntConstructor called&quot;</span>&lt;&lt; endl;<br>            real  = i ; imag =<span class="hljs-number">0</span>;<br>        &#125;<br>    <span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">double</span> i)&#123;real = r; imag = i;&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">Complex <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">7</span>,<span class="hljs-number">8</span>)</span></span>;<br>    Complex c2 = <span class="hljs-number">12</span>; <span class="hljs-comment">//调用了Complex()构造函数，real = 12，imag = 0；</span><br>    c1 = <span class="hljs-number">9</span>; <span class="hljs-comment">// 9被自动转换成一个临时Complex对象，值为（9，0）然后进行赋值</span><br>    cout &lt;&lt; c1.real&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;c1.imag &lt;&lt;endl;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>==名字与类名相同== ，==在前面加‘ ~’ ,没有参数和返回值== ，一个==类== 最多==只能有一个析构函数== 。</p><p>析构函数对象消亡时象消亡时即自动被调用。用来在对象消亡前做善后工作，比如==释放分配的空间== 等。</p><p>如果定义类时==没写析构函数==，则编==译器生成缺省析构函数== ，缺省析构函数==什么也不做== 。</p><p>如果定义了析构函数，则编译器就不在定义缺省的析构函数了</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">String</span>&#123;</span><br>    <span class="hljs-keyword">private</span> :<br>    <span class="hljs-keyword">char</span> * p;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">String</span>()&#123;<br>            p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">10</span>];<br>        &#125;<br>    ~ <span class="hljs-built_in">String</span>();<br>&#125;<br>String ::~<span class="hljs-built_in">String</span>()&#123;<br>    <span class="hljs-keyword">delete</span> [] p;  <span class="hljs-comment">//释放内存 </span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="析构函数和数组"><a href="#析构函数和数组" class="headerlink" title="析构函数和数组"></a>析构函数和数组</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ctest</span>&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    ~<span class="hljs-built_in">Ctest</span>()&#123; cout&lt;&lt;<span class="hljs-string">&quot;destryctor called&quot;</span>&lt;&lt; endl;&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Ctest array[<span class="hljs-number">2</span>];  <span class="hljs-comment">//数组消亡，数组中每个元素依次调用消亡，故会输出两行destrytor 。。</span><br>    cout &lt;&lt;<span class="hljs-string">&quot;End Main&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="析构函数和运算符delete"><a href="#析构函数和运算符delete" class="headerlink" title="析构函数和运算符delete"></a>析构函数和运算符delete</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">Ctest * pTest;<br>pTest = <span class="hljs-keyword">new</span> Ctest; <span class="hljs-comment">//构造函数调用</span><br><span class="hljs-keyword">delete</span> pTest;            <span class="hljs-comment">//析构函数调用</span><br><span class="hljs-comment">//---------------------------------</span><br>pTest = <span class="hljs-keyword">new</span> Ctest[<span class="hljs-number">3</span>];  <span class="hljs-comment">//构造函数调用 3 次</span><br><span class="hljs-keyword">delete</span> [] pTest;     <span class="hljs-comment">//析构函数调用 3 次， 动态数组消亡的写法</span><br><br> <span class="hljs-comment">//若new 一个对象数组，那么用delete释放时应该写[]。否则只delete一个对象（即调用依次析构函数）</span><br></code></pre></div></td></tr></table></figure><h4 id="析构函数在对象作为函数返回值返回后被调用"><a href="#析构函数在对象作为函数返回值返回后被调用" class="headerlink" title="析构函数在对象作为函数返回值返回后被调用"></a>析构函数在对象作为函数返回值返回后被调用</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMyclass</span>&#123;</span><br>    <span class="hljs-keyword">public</span> :<br>    ~<span class="hljs-built_in">CMyclass</span>()&#123;cout &lt;&lt;<span class="hljs-string">&quot;destructor&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br>CMyclass obj;<br><span class="hljs-function">CMyclass <span class="hljs-title">fun</span><span class="hljs-params">(CMyclass sobj)</span></span>&#123;  <span class="hljs-comment">//参数对象消亡也会导致析构函数被调用  </span><br>    <span class="hljs-keyword">return</span> sobj;  <span class="hljs-comment">//返回时，函数形参对象消亡，调用复制构造函数  1</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    obj = <span class="hljs-built_in">fun</span>(obj); <span class="hljs-comment">//函数调用的返回值被调用过后，该临时对象析构函数被调用  2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;     <span class="hljs-comment">//函数结束时，全体变量对象的析构函数被调用  3</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="构造函数和析构函数什么时候被调用"><a href="#构造函数和析构函数什么时候被调用" class="headerlink" title="构造函数和析构函数什么时候被调用"></a>构造函数和析构函数什么时候被调用</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">实例：<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Demo</span>(<span class="hljs-keyword">int</span> i)&#123;   <span class="hljs-comment">//类型转换构造函数(只有一个参数的构造函数，)</span><br>        id = i;<br>        cout &lt;&lt;<span class="hljs-string">&quot;id=&quot;</span>&lt;&lt;id&lt;&lt;<span class="hljs-string">&quot;constructed&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    ~<span class="hljs-built_in">Demo</span>()&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;id=&quot;</span>&lt;&lt;id&lt;&lt;<span class="hljs-string">&quot;destructed&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function">Demo <span class="hljs-title">dl</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;  <span class="hljs-comment">//全局对象初始化引发构造函数，会输出id 1 =constructed</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Fun</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> Demo <span class="hljs-title">d2</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>; <span class="hljs-comment">// 静态局部变量，函数结束时不消亡，程序结束消亡 </span><br>    <span class="hljs-function">Demo <span class="hljs-title">d3</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">//定义d3类，函数结束时就消亡了</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;func&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">Demo <span class="hljs-title">d4</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span>;  <span class="hljs-comment">//局部对象定义引发构造函数，输出 id 4 =constructed</span><br>    d4 = <span class="hljs-number">6</span>;    <span class="hljs-comment">//使用了的类型转换构造函数，创建了临时对象，id 6 =constructed</span><br>    <span class="hljs-comment">//结束后，临时对象消亡id 6 destructed;</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;main&quot;</span>&lt;&lt;endl;<br>    &#123;<br>        <span class="hljs-function">Demo <span class="hljs-title">d5</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;  <span class="hljs-comment">//定义了d5 ,生存期为&#123;&#125; id 5 =constructed</span><br>    &#125;<span class="hljs-comment">//出了花括号，d5消亡，id 5 destructed;</span><br>    <span class="hljs-built_in">Func</span>();<br>    cout&lt;&lt;<span class="hljs-string">&quot;main ends&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <span class="hljs-comment">//先定义初始化，后析构，先d2 消亡，后d1消亡</span><br><br><span class="hljs-comment">//delete时析构函数同样被调用！</span><br></code></pre></div></td></tr></table></figure><h4 id="复制构造函数在不同编译器中的表现"><a href="#复制构造函数在不同编译器中的表现" class="headerlink" title="复制构造函数在不同编译器中的表现"></a>复制构造函数在不同编译器中的表现</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">int</span> x_):<span class="hljs-built_in">x</span>(x_)&#123;<br>            cout&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot;constructor called&quot;</span>&lt;&lt;endl;<br>        &#125;<br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">const</span> A&amp;a)&#123; <span class="hljs-comment">//dev需要这里的const，其他编译器不要</span><br>            x = <span class="hljs-number">2</span> +a.x;<br>            cout&lt;&lt;<span class="hljs-string">&quot;copy called&quot;</span>&lt;&lt;endl;<br>        &#125;<br>    ~<span class="hljs-built_in">A</span>()&#123;<br>            cout &lt;&lt;x&lt;&lt;<span class="hljs-string">&quot;destructor called&quot;</span>&lt;&lt;endl;<br>        &#125;<br>&#125;;<br><br><span class="hljs-built_in">Af</span>()&#123;<br>    <span class="hljs-built_in">Ab</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">A <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>    a = <span class="hljs-built_in">f</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/07/iEwLyzpkUBrToA2.png" alt="image-20210320182435205"></p><h3 id="类类型作函数参数的三种方式"><a href="#类类型作函数参数的三种方式" class="headerlink" title="类类型作函数参数的三种方式"></a>类类型作函数参数的三种方式</h3><p>c++依然采用传值的方式传递参数</p><h4 id="对象本身作为参数"><a href="#对象本身作为参数" class="headerlink" title="对象本身作为参数"></a>对象本身作为参数</h4><ul><li>使用对象本身作为参数时，形参时实参的一个拷贝，即调用了拷贝构造函数。最好自己定义一个明确的构造函数，以免发生不容易发现的错误。</li><li>多次调用拷贝构造函数，效率低</li></ul><h4 id="对象引用作为参数"><a href="#对象引用作为参数" class="headerlink" title="对象引用作为参数"></a>对象引用作为参数</h4><ul><li>推荐用这一种，容易理解使用，没有副作用，参考 引用 那里</li></ul><h4 id="对象指针作为参数"><a href="#对象指针作为参数" class="headerlink" title="对象指针作为参数"></a>对象指针作为参数</h4><ul><li>使指针指向实参对象，还是有指针空间的使用和释放，空间相对较小</li></ul><h3 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h3><h4 id="c-翻译到c"><a href="#c-翻译到c" class="headerlink" title="c++翻译到c"></a>c++翻译到c</h4><p>起初是没有c++编译器的，是将c++翻译到c</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCar</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> price;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetPrice</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p)</span></span>;<br>&#125;;<br><span class="hljs-keyword">void</span> CCar:：<span class="hljs-built_in">SetPrice</span>(<span class="hljs-keyword">int</span> p)<br>&#123;<br>    price = p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CCar car;<br>    car.<span class="hljs-built_in">SetPrice</span>(<span class="hljs-number">20000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>翻译为C语言,如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">sturct CCar &#123;<br>    <span class="hljs-keyword">int</span> price;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetPricr</span><span class="hljs-params">(struct CCar * <span class="hljs-keyword">this</span>,<span class="hljs-keyword">int</span> p)</span>  <span class="hljs-comment">//增加了this指针</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;pricr = p;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">CCar</span> <span class="hljs-title">car</span>;</span><br>    SetPrice(&amp;car,<span class="hljs-number">20000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>C++中的成员函数到了C中就会成为全局函数，并且在参数中多出一项this指针，这个this指针含义是指向被作用的对象</p><p>this指针的作用： ==指向成员函数所作用的对象==</p><p> ==非静态成员函数中可以直接使用this来代表指向该函数作用的对象的指针==</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Complex</span>&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">double</span> real imag;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">()</span></span>&#123;<br>        cout&lt;&lt; real&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;imag;<br>    &#125;<br>    <span class="hljs-built_in">Complex</span>(<span class="hljs-keyword">double</span> r,<span class="hljs-keyword">double</span> i):<span class="hljs-built_in">real</span>(r),<span class="hljs-built_in">imag</span>(i)<br>    &#123;  &#125;<br>    <span class="hljs-function">Complex <span class="hljs-title">AddOne</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;real ++;   <span class="hljs-comment">//等价于real++ ,this指向这个函数作用的对象</span><br>        <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">Print</span>();  <span class="hljs-comment">//等价于 Print()</span><br>        <span class="hljs-keyword">return</span> * <span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Complex <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</span>,<span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)</span></span>;<br>    c2 =c1.<span class="hljs-built_in">AddOne</span>();<span class="hljs-comment">//c1 real + 1,并且输出了2，1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//看着有点怪，但是正确的例子</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    A*p = <span class="hljs-literal">NULL</span>;<br>    p-&gt;<span class="hljs-built_in">Hello</span>();  <span class="hljs-comment">//相当于hello(p)</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span>&#123;<br>        cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;hello&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-comment">//转化为，void Hello(A * this)&#123;cout&lt;&lt; this-&gt;i &lt;&lt;&quot;hello&quot;&lt;&lt;endl;&#125;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    A*p = <span class="hljs-literal">NULL</span>;<br>    p-&gt;<span class="hljs-built_in">Hello</span>();  <span class="hljs-comment">//相当于hello(p)</span><br>&#125;<br><span class="hljs-comment">//静态成员函数中不能使用this指针！</span><br>    因为静态成员函数并不具体作用于某个对象<br>        因此，静态成员函数的真实的参数的个数，就是程序中写出的参数个数<br></code></pre></div></td></tr></table></figure><h3 id="“-”在c-中的作用"><a href="#“-”在c-中的作用" class="headerlink" title="“ :  ”在c++中的作用"></a>“ :  ”在c++中的作用</h3><p>对目标x 初始化</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> x = <span class="hljs-number">100</span>;  <span class="hljs-comment">//const 声明或定义的变量是不能被赋值的，但是在下面的语句中，可以通过初始化，来改变它的初始值</span><br>    <span class="hljs-built_in">A</span>(<span class="hljs-keyword">int</span> x_):<span class="hljs-built_in">x</span>(x_)&#123;  <span class="hljs-comment">//: 后的x是指函数中的x，意思是用x_也可以是数字，将x初始化</span><br>            cout&lt;&lt;x&lt;&lt;<span class="hljs-string">&quot;constructor called&quot;</span>&lt;&lt;endl;<br>        &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> abc = <span class="hljs-number">0</span>;<br><span class="hljs-function">A <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">A <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-function">A <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    cout &lt;&lt; a.x &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p> 在初始化列表中是对变量进行初始化，而在构造函数内是进行赋值操作。</p><p>两都的差别在对于像const类型数据的操作上表现得尤为明显。我们知道，const类型的变量必须在定义时进行初始化，而不能对const型的变量进行赋值，因此const类型的成员变量只能（而且必须）在初始化列表中进行初始化</p><p>其他参考文章：<a href="https://blog.csdn.net/chw1989/article/details/7480375">https://blog.csdn.net/chw1989/article/details/7480375</a></p><h3 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h3><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>在定义前面加了 static 关键字的成员,本质是全局变量</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CRectengle</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> w ,h;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> nTotalArea;   <span class="hljs-comment">//静态成员变量</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> nTotalNumber;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CRectangle</span>(<span class="hljs-keyword">int</span> w_,<span class="hljs-keyword">int</span> h_);<br>    ~<span class="hljs-built_in">CRectangle</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintTotal</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//静态成员函数</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>静态的成员变量，是所有该类的对象共享的，而普通变量是只有对象自己能用。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// 另  sizeof 运算符不会计算静态成员变量，因为静态变量实际上不是放在对象内部的，而是在整个对象的外部</span><br><br>如：<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CMclass</span>&#123;</span><br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> s;<br>    &#125;;<br><span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(CMyclass);  <span class="hljs-comment">//结果为4 ，而不是8</span><br><br><br></code></pre></div></td></tr></table></figure><ul><li><p>普通成员函数</p><p>必须作用于一个对象，通过对象来调用</p></li><li><p>静态成员函数</p><p>并不具体作用于某个对象，因此不需要通过对象就能访问</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//如何访问静态成员变量、函数？</span><br><br><span class="hljs-comment">//1 类名：：成员名</span><br>CRectangle::<span class="hljs-built_in">PrintTotal</span>();<br><span class="hljs-comment">//2 对象名.成员名</span><br>CRrctangle r;<br>r.<span class="hljs-built_in">PrintTotal</span>();<br><span class="hljs-comment">//3 指针-&gt;成员名</span><br>CRectangle*p = &amp;r;<br>p-&gt;<span class="hljs-built_in">Printotal</span>();<br><span class="hljs-comment">//4 引用.成员名</span><br>CRectangle &amp;ref = r;<br><span class="hljs-keyword">int</span> n = ref.nTotalNumber;<br><br></code></pre></div></td></tr></table></figure><ul><li>引入的意义，把和类紧密相关的内容能写到类中去，使得成为一个整体，便于理解维护。</li></ul><p>比如：记录与类相关的数据，就可以用静态变量，放到类里</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//实例</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CRectangle</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> w,h;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> nTotalArea;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> nTotalNumber;  <span class="hljs-comment">//私有</span><br>    <span class="hljs-keyword">public</span> :<br>    <span class="hljs-built_in">CRectangle</span>(<span class="hljs-keyword">int</span> w_,<span class="hljs-keyword">int</span> h_);<br>    ~<span class="hljs-built_in">CRectangle</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintTotal</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Crectangle::<span class="hljs-built_in">CRectangle</span>(<span class="hljs-keyword">int</span> w_,<span class="hljs-keyword">int</span> h_)<br>&#123;<br>    w = w_;<br>    h = h_;<br>    nTotalNumber ++;<br>    nTotalArea += w*h;<br>&#125;<br><br>CRectangle::~<span class="hljs-built_in">CRectangle</span>()<br>&#123;<br>    nTotalNumber --;<br>    nTotalArea -= w*h;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CRectangle::PrintTotal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;nTotalNumber&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;nTotalArea&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-comment">//特别注意  静态函数必须在定义类的文件中对静态成员变量进行依次说明或初始化，否则编译能通过，链接不能通过</span><br><br><span class="hljs-keyword">int</span> CRectangle：：nTotalNumber=<span class="hljs-number">0</span>; <span class="hljs-comment">//初始化，可以赋初值</span><br><br><span class="hljs-comment">//静态成员函数中，不能访问非静态成员变量，也不能第调用用非静态成员函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CRectabgle::PrintTotal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt;w&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;....  <span class="hljs-comment">//wrong</span><br>&#125;<br><br><span class="hljs-comment">//非静态函数，里面会调用非静态变量，所以也是不可以的</span><br></code></pre></div></td></tr></table></figure><ul><li><p>缺陷</p><p>复制构造函数生成对象初始化，就导致会存在漏洞</p></li><li><p>临时对象消亡时调用析构函数，影响数值</p></li><li><p>要自己写一个复制构造函数，包含对静态变量的操作</p></li></ul><h3 id="静态变量和常量"><a href="#静态变量和常量" class="headerlink" title="静态变量和常量"></a>静态变量和常量</h3><h4 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h4><ul><li>static和const在编译时直接分配内存。</li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>（本质）static是类型引用，const是实例引用。</li><li>（赋值）静态变量的值在运行时可以更改赋值，而常量的值是不可改变的，运行一开始已经固定，之后修改会报错。</li><li>（内存）静态变量存放在全局数据区中，伴随着这个程序流程，能将此变量的值保留到下次调用，不过数据过大的静态变量有可能造成内存泄露。 而const常量算是一个普通的只读变量，随函数结束而结束。在C里，const常量总是会分配内存，位于只读数据段。在C++，如果const常量在没有声明为extern，那么就是一个编译时的符号，不占用内存。</li></ul><h3 id="成员-对象-和封闭类-enclosing"><a href="#成员-对象-和封闭类-enclosing" class="headerlink" title="成员==对象==和封闭类(enclosing)"></a>成员==对象==和封闭类(enclosing)</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTyre</span>  //<span class="hljs-title">l</span>轮胎类</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> radius;   <span class="hljs-comment">//半径</span><br>    <span class="hljs-keyword">int</span> width;   <span class="hljs-comment">//宽度</span><br>    <span class="hljs-keyword">public</span>: <br>    <span class="hljs-built_in">CTyre</span>(<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> w):<span class="hljs-built_in">radius</span>(r),<span class="hljs-built_in">width</span>(w)&#123;&#125;  <span class="hljs-comment">//需要参数</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CEngine</span>  //引擎类</span><br><span class="hljs-class">&#123;</span><br>    <br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCar</span>   //这个类就是封闭类</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">int</span> price;<br>        CTyre tyre;   <span class="hljs-comment">//成员对象  ，构造时如果需要参数，调用该类时需要给出参数</span><br>        CEngine engine;   <span class="hljs-comment">//成员对象</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CCar</span>(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> tr,<span class="hljs-keyword">int</span> tw)&#123;&#125;;<br>&#125;;<br>CCar::<span class="hljs-built_in">CCar</span>(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> tr,<span class="hljs-keyword">int</span> w):<span class="hljs-built_in">price</span>(p),<span class="hljs-built_in">tyre</span>(tr,w)<br>&#123;<br>    <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">CCar <span class="hljs-title">car</span><span class="hljs-params">(<span class="hljs-number">20000.17</span>,<span class="hljs-number">225</span>)</span></span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><strong>封闭类构造函数和析构函数的执行顺序</strong><ul><li>封闭类对象生成时，先执行所有对象成员的构造函数，然后执行封闭类的构造函数。</li><li>对象成员的构造函数调用次序和对象成员在类中的说明次序一致，与它们在成员初始化列表中出现的次序无关。</li><li>当封闭类的对象消亡时，先执行封闭类的析构函数，然后再执行成员对象的析构函数。次序和构造函数的调用次序相反。</li></ul></li></ul><p>先构造的后析构，先初始化后消亡 </p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//实例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTyre</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CTyre</span>()&#123;cout &lt;&lt; <span class="hljs-string">&quot;CTyre contructor&quot;</span> &lt;&lt;endl;&#125;<br>    ~<span class="hljs-built_in">CTyre</span>()&#123;cout &lt;&lt; <span class="hljs-string">&quot;CTyre destructor&quot;</span> &lt;&lt;endl;&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CEngine</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CEngine</span>()&#123;cout &lt;&lt; <span class="hljs-string">&quot;CEngine contructor&quot;</span> &lt;&lt;endl;&#125;<br>    ~<span class="hljs-built_in">CEngine</span>()&#123;cout &lt;&lt; <span class="hljs-string">&quot;CEngine destructor&quot;</span> &lt;&lt;endl;&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCar</span></span><br><span class="hljs-class">&#123;</span><br> <span class="hljs-keyword">private</span>:<br>    CEngine engine;<br>    CTyre tyre;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CCar</span>()&#123;cout&lt;&lt;<span class="hljs-string">&quot;CCar contructor&quot;</span>&lt;&lt;endl;&#125;<br>    ~<span class="hljs-built_in">CCar</span>()&#123;cout &lt;&lt; <span class="hljs-string">&quot;CCar destructor&quot;</span> &lt;&lt;endl;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    CCar car;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>封闭类的复制构造函数</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">A</span>()&#123;cout &lt;&lt;<span class="hljs-string">&quot;default&quot;</span>&lt;&lt;endl;&#125;<br>    <span class="hljs-built_in">A</span>(A &amp; a)&#123;cout &lt;&lt;<span class="hljs-string">&quot;copy&quot;</span>&lt;&lt;enld;&#125;<br>&#125;;<br><span class="hljs-function">class <span class="hljs-title">B</span><span class="hljs-params">(A a;)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    B b1,<span class="hljs-built_in">b2</span>(b1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ul><h3 id="常量对象、常量成员、常引用"><a href="#常量对象、常量成员、常引用" class="headerlink" title="常量对象、常量成员、常引用"></a>常量对象、常量成员、常引用</h3><ul><li><p>如果不希望改变某个对象的值，即可以再定义对象前加const关键字</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetValue</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">const</span> Demo Obj;  <span class="hljs-comment">//常量对象</span><br></code></pre></div></td></tr></table></figure></li><li><p>在类的成员函数说明后面可以加const关键字，则该成员函数成为常量成员函数</p></li><li><p>常量成员函数执行期间==不应修改其所作用的对象== 。因此，在常量成员函数中==不能修改成员变量的值(== 静态成员变量除外)，也不==能调用同类的非常量成员函数== (静态成员函数除外)</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sample</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>：<br>        <span class="hljs-keyword">int</span> value;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GetValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>    <span class="hljs-built_in">Sample</span>()&#123;&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Sample::GetValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span></span><br><span class="hljs-function"></span>&#123;<br>    value = <span class="hljs-number">0</span>;<span class="hljs-comment">//wrong   常量函数内部，不能调用或改变非常量成员</span><br>    <span class="hljs-built_in">func</span>();<span class="hljs-comment">//wrong    常量函数内部，不能调用或改变非常量成员函数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">const</span> Sample o;<br>    o.value = <span class="hljs-number">100</span>;  <span class="hljs-comment">//err.常量对象不可被修改</span><br>    o.<span class="hljs-built_in">func</span>();     <span class="hljs-comment">//err.常量对象上面不能执行非常量成员函数</span><br>    o.<span class="hljs-built_in">getvalue</span>();   <span class="hljs-comment">//ok. 常量对象上可以执行常量成员函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//在dev c++中 要为Sample类编写无参构造函数才可以。</span><br></code></pre></div></td></tr></table></figure></li></ul><h4 id="常量成员函数的重载"><a href="#常量成员函数的重载" class="headerlink" title="常量成员函数的重载"></a>常量成员函数的重载</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTest</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CTest</span>()&#123;n=<span class="hljs-number">1</span>;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> n;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetValue</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*n;&#125;  <span class="hljs-comment">//这里重载了上个函数</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">const</span> CTest objTest1;<br>    CTest objTest2;<br>    cout &lt;&lt; objTest1.<span class="hljs-built_in">GetValue</span>()&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;objTest2.<span class="hljs-built_in">GetValue</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>    <br></code></pre></div></td></tr></table></figure><h4 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sample</span></span><br><span class="hljs-class">&#123;</span><br>    ...<br>&#125;;<br><span class="hljs-comment">//函数参数调用时避免重复多次使用构造函数，提升效率，使用引用</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintfObj</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Sample &amp; o)</span>  <span class="hljs-comment">//因为有const，所以不能修改o值</span></span><br><span class="hljs-function"></span>&#123;<br>    .....<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><ul><li><p>友元</p><ul><li><p>友元函数</p></li><li><p>友元类</p></li></ul></li></ul><h4 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h4><p>一个类的友元函数可以访问该类的私有成员</p><p>友元函数并不是成员函数，友元函数可以是一个全局函数，当把这个全局函数声明为友元的时候，就可以访问该类的私有成员了</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCar</span>;</span>  <span class="hljs-comment">//这里起提前声明的作用，以便CDriver类使用</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDriver</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ModifyCar</span><span class="hljs-params">(CCar *pCar)</span></span>; <span class="hljs-comment">//改装车，如果这里不是一个指针而是一个类，则需要把CCar在上面写完整</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCar</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> price;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">int</span> <span class="hljs-title">MostExpensiveCar</span><span class="hljs-params">(CCar cars[],<span class="hljs-keyword">int</span> total)</span></span>;  <span class="hljs-comment">//声明友元，并不是成员函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CDriver::ModifyCay</span><span class="hljs-params">(CCAr * pCar)</span></span>;  <span class="hljs-comment">//声明友元，不是成员函数，而是上一个类的成员函数，这里把这个函数声明为CCar的友元</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CDriver::ModifyCar</span><span class="hljs-params">(CCar * pCar)</span>  <span class="hljs-comment">//全局函数</span></span><br><span class="hljs-function"></span>&#123;<br>    pCar-&gt;price += <span class="hljs-number">1000</span>;  <span class="hljs-comment">//这里访问了类的私有成员</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">MostExpensiveCar</span><span class="hljs-params">(CCar car[],<span class="hljs-keyword">int</span> total)</span>  <span class="hljs-comment">//全局函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> tmpMax = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;total; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(cars[i].pricr &gt; tmpMax)<br>        &#123;<br>            tmpMax = cars[i].price;  <span class="hljs-comment">//访问量私有成员</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tempMax;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//可以将一个类的成员函数(包括构造、析构函数)说明为另一个类的友元</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">function</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-keyword">void</span> <span class="hljs-title">B::function</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">//这里使 类B 的成员函数成为 类A 的友元，这样 类B 的成员函数function就可以访问 类A 的私有成员 num了</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h4><p>如果A是B的友元，那么A的成员函数可以访问B的私有成员</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCar</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">int</span> price;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDriver</span>;</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CDriver</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>：<br>        CCar myCar;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ModifyCar</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">//改装汽车</span><br>            myCar.price += <span class="hljs-number">1000</span>;  <span class="hljs-comment">//因CDriver是CCar的友元类，</span><br>                                 <span class="hljs-comment">//故此处可以访问其私有成员</span><br>        &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><span class="hljs-comment">//友元类之间的关系不能传递，不能继承</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++系列：C++与C的区别（一）</title>
    <link href="/2021/10/07/1.C++%E7%B3%BB%E5%88%97%EF%BC%9AC++%E4%B8%8EC%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/10/07/1.C++%E7%B3%BB%E5%88%97%EF%BC%9AC++%E4%B8%8EC%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>更多参考其他文档<a href="https://www.runoob.com/cplusplus/cpp-tutorial.html">菜鸟文档</a>、<a href="https://www.w3cschool.cn/cpp/">W3C</a>、<a href="https://docs.microsoft.com/zh-cn/cpp/cpp/?view=msvc-160">微软C++文档</a></p><h2 id="从C到C"><a href="#从C到C" class="headerlink" title="从C到C++"></a>从C到C++</h2><h3 id="C和C-的区别"><a href="#C和C-的区别" class="headerlink" title="C和C++的区别"></a>C和C++的区别</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*程序文件名：test.cpp</span><br><span class="hljs-comment">  本程序功能：输入2个整数求和</span><br><span class="hljs-comment">  设计者：              */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span>  <span class="hljs-comment">//输入输出流对象</span></span><br><br><span class="hljs-comment">//using namespace std; 没有此语句就要写成下面的输出形式</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Enter two numbers&quot;</span> &lt;&lt; std::endl;  <span class="hljs-comment">//通过输出流符 &lt;&lt; 将字符输出到标准输出流对象cout，std是命名空间。</span><br>    <span class="hljs-keyword">int</span> v1, v2;<br>    std::cin &gt;&gt; v1 &gt;&gt; v2;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;the sum of&quot;</span> &lt;&lt; v1 &lt;&lt; <span class="hljs-string">&quot;and&quot;</span> &lt;&lt; v2 &lt;&lt; <span class="hljs-string">&quot;is&quot;</span> &lt;&lt; v1 + v2 &lt;&lt; std::endl;  <span class="hljs-comment">//可以输出不同类型的数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>c++输入输出时不需要制定格式字符</p><p>通过标准输出流对象输出输入</p><p>std是命名空间，如果定义的实例名相同也不影响，因为是在命名空间中的实例</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/*程序文件名：test.cpp</span><br><span class="hljs-comment">  本程序功能：输入2个整数求和</span><br><span class="hljs-comment">  设计者：              */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span>  <span class="hljs-comment">//输入输出流对象</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <span class="hljs-comment">//有此语句就可以std：：，但是不能变量名不能相同，相同则函数内变量名将命名空间内示例覆盖</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter two numbers&quot;</span> &lt;&lt; endl;  <br>    <span class="hljs-keyword">int</span> v1, v2;<br>    cin &gt;&gt; v1 &gt;&gt; v2;<br>    cout &lt;&lt; <span class="hljs-string">&quot;the sum of&quot;</span> &lt;&lt; v1 &lt;&lt; <span class="hljs-string">&quot;and&quot;</span> &lt;&lt; v2 &lt;&lt; <span class="hljs-string">&quot;is&quot;</span> &lt;&lt; v1 + v2 &lt;&lt; endl; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>iostream ： istream,ostream</p><h4 id="标准输入输出对象"><a href="#标准输入输出对象" class="headerlink" title="标准输入输出对象"></a>标准输入输出对象</h4><p>标准库定义了4个IO对象：</p><p>cin：istream对象，标准输入</p><p>cout：ostream对象，标准输出</p><p>cerr：标准错误。用来输出警告和错误信息给程序的使用者</p><p>clog：用于产生程序执行的一般信息</p><p>“ &lt;&lt; ” 操作符</p><p>cout &lt;&lt; 表达式&lt;&lt; 表达式&lt;&lt; endl</p><p>“ &gt;&gt;” 操作符</p><p>cin &gt;&gt; 表达式&gt;&gt; 表达式&lt;&lt; endl</p><p>==表达式只能是变量或内存区，否则就不能将读入的数据放到表达式当中了== </p><h4 id="输入数据的几种方式"><a href="#输入数据的几种方式" class="headerlink" title="输入数据的几种方式"></a>输入数据的几种方式</h4><p><img src="C:/Users/71041/AppData/Roaming/Typora/typora-user-images/image-20210317200434446.png" alt="image-20210317200434446"></p><h4 id="数据类型和表达式的区别"><a href="#数据类型和表达式的区别" class="headerlink" title="数据类型和表达式的区别"></a>数据类型和表达式的区别</h4><p><img src="https://i.loli.net/2021/10/07/Uian6rR9XdgL37e.png" alt="image-20210318081153281"></p><p>逻辑类型、引用类型、类 类型</p><ul><li><p>基本类型转换</p><p><img src="https://i.loli.net/2021/10/07/pUJan3rvNIqWflw.png" alt="image-20210318081330842"></p></li></ul><ul><li><p>构造书类型</p><p><img src="https://i.loli.net/2021/10/07/Dqz9KYI3ThBl56F.png" alt="image-20210318081523918"></p></li><li><p>类类型</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">abc</span>&#123;</span><br>    privte:<br>    <br>    <span class="hljs-keyword">public</span>:<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//类型名 &amp; 引用名 = 其变量名</span><br><br><span class="hljs-keyword">int</span> n = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">int</span> &amp; r = n;  <span class="hljs-comment">//表示使 r 引用 n，也是初始化，r和n等价，即改变r就改变了n</span><br><br><span class="hljs-comment">//r的类型就是 int &amp;</span><br><br><span class="hljs-comment">//例子1：</span><br><br><span class="hljs-keyword">int</span> n = <span class="hljs-number">7</span>;<br><span class="hljs-keyword">int</span> &amp; r = n;  <span class="hljs-comment">//定义引用一定要初始化为某个变量,初始化后就一直引用该变量，不会引用别的变量了</span><br>r = <span class="hljs-number">4</span>;<br>cout&lt;&lt;r;<br>cout&lt;&lt;n;<br>n=<span class="hljs-number">5</span>;<br>cout&lt;&lt;r<br>    <br><span class="hljs-comment">//例子2：</span><br><span class="hljs-keyword">double</span> a = <span class="hljs-number">4</span>,b =<span class="hljs-number">5</span>;<br><span class="hljs-keyword">double</span> &amp; r1 = a;<br><span class="hljs-keyword">double</span> &amp; r2 = r1;  <span class="hljs-comment">//相当于传递引用了a，</span><br>r2 = <span class="hljs-number">10</span>;  <span class="hljs-comment">//相当于对指针指向的那个地方赋值，不过是，有多个指针指向这个地方</span><br>cout&lt;&lt;a&lt;&lt;endl;  <span class="hljs-comment">//  输出10</span><br>r1 = b;    <span class="hljs-comment">//这里不表示r1 引用b， 而是表示 a = b；，不能对引用进行修改</span><br><br><span class="hljs-comment">//不可以引用数组！！  但可以这样 int &amp; B = A[0]; </span><br></code></pre></div></td></tr></table></figure><p>交换函数</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//C</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> tmp;<br>    tmp  = *a;<br>    *a = *b;<br>    *b = tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b;<br>    <span class="hljs-built_in">swap</span>(&amp;a,&amp;b);<br>&#125;<br><br><br><br><span class="hljs-comment">//C++  用引用</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a,<span class="hljs-keyword">int</span> &amp;b)</span>  <span class="hljs-comment">//这里用了引用  </span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> tmp;<br>    tmp  = a;<br>    a = b;<br>    b = tmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b;<br>    <span class="hljs-built_in">swap</span>(a,b);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>引用可以作为函数的返回值</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n = <span class="hljs-number">4</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> &amp; <span class="hljs-title">SetValue</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-keyword">return</span> n;&#125;  <span class="hljs-comment">//此处引用的是返回值 n</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mian</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">SetValue</span>()=<span class="hljs-number">40</span>;  <span class="hljs-comment">// 这里就达到了修改返回值的目的</span><br>    cout&lt;&lt;n;  <span class="hljs-comment">//输出为 40</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h3><p>常引用 不能通过引用修改值</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> n = <span class="hljs-number">400</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;  r = n; <span class="hljs-comment">//这个r是常引用， r 的类型是 const int &amp; </span><br><span class="hljs-comment">//相当于这个变量的别名，另一个该变量的名字，不能再改名</span><br><br>r = <span class="hljs-number">200</span>;  错误<br>n = <span class="hljs-number">300</span>;  <span class="hljs-comment">//正确</span><br><br><span class="hljs-comment">//T == 普通数据类型 如int</span><br>    <br><span class="hljs-comment">//const T &amp; 和 T &amp; 是不同类型</span><br><span class="hljs-comment">//T &amp; 类型的引用 或 T类型变量可以初始化const T&amp; 类型和引用</span><br><span class="hljs-comment">//const T 类型的常变量  和  const T &amp; 类型的引用  则不能用来初始化  T&amp;类型的引用</span><br>除非进行强制转换<br></code></pre></div></td></tr></table></figure><h3 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//定义常量</span><br>        建议少用 define 因为 用<span class="hljs-keyword">const</span>定义有数据类型的检验<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX_VAL = <span class="hljs-number">23</span>；<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> Pi = <span class="hljs-number">3.14</span> ;<br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *SCHOOL_NAME = <span class="hljs-string">&quot;Peking University&quot;</span>;  <span class="hljs-comment">//字符指针</span><br><br><span class="hljs-comment">//指向常量的指针</span><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> * p = &amp; n;  <span class="hljs-comment">//不能通过指针修改 n的值，但可以指向其他变量(易错)</span><br><br>        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *name =<span class="hljs-string">&quot;chen&quot;</span>;<br>        name[<span class="hljs-number">3</span>] =<span class="hljs-string">&quot;a&quot;</span>;  <span class="hljs-comment">//错误 不能修改name的值</span><br>        name =<span class="hljs-string">&quot;zhang&quot;</span>;  <span class="hljs-comment">//正确  可以改变name指向</span><br><br>        <span class="hljs-comment">//在函数定义时，用指向常量的指针</span><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MyPrintf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * p)</span>  <span class="hljs-comment">// 使得指针指向的值进入函数后不会被改变</span></span><br><span class="hljs-function">        </span>&#123;                                                                            <br>            <span class="hljs-built_in">strcpy</span>(p,<span class="hljs-string">&quot;this&quot;</span>);<span class="hljs-comment">//此时会编译出错</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,p);<br>        &#125;<br><br><span class="hljs-comment">//常指针</span><br><span class="hljs-keyword">int</span> * <span class="hljs-keyword">const</span> name=<span class="hljs-string">&quot;chen&quot;</span> ;  <span class="hljs-comment">//不能改变地址，即指针所指的指向</span><br><br><span class="hljs-comment">//指向常量的常指针</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * <span class="hljs-keyword">const</span> name=<span class="hljs-string">&quot;chen&quot;</span>;  <span class="hljs-comment">//不能改变指向，也不能改变值</span><br></code></pre></div></td></tr></table></figure><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">C 使用malloc ， c++ 使用<span class="hljs-keyword">new</span><br>    <br>    <br><span class="hljs-comment">//分配整形空间</span><br>P = <span class="hljs-keyword">new</span> T ;  <br><span class="hljs-comment">//P是指针，T是数据类型，T是任意类型名，P是类型为T*的指针，动态分配出一片大小为sizeof(T)的空间，并且将该内存空间的起始地址赋值给P。</span><br>例：<br><span class="hljs-keyword">int</span> *pn;<br>pn = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>;<br>*pn = <span class="hljs-number">5</span>;<br><br><br><span class="hljs-comment">//分配数组</span><br>P = <span class="hljs-keyword">new</span> T[N];<br><span class="hljs-comment">//T:任意类型名 P： 类型为T*的指针  N：要分配的数组元素的个数，可以是整型表达式</span><br><span class="hljs-comment">//动态分配出一片大小为N * sizeof（T）字节的内存空间，并且将该空间的其实地址赋值给P</span><br>例：<br><span class="hljs-keyword">int</span> * pn;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">5</span>;<br>pn = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[i * <span class="hljs-number">20</span>];<br>pn[<span class="hljs-number">0</span>] = <span class="hljs-number">20</span>;<br>pn[<span class="hljs-number">100</span>] = <span class="hljs-number">30</span>; <span class="hljs-comment">//这里数组越界了</span><br><br><br><span class="hljs-comment">//注意：int * p = new int;  //返回类型，都为int * 即 指针</span><br><br><br>使用delet运算符进行释放 <br><br><span class="hljs-keyword">delete</span> 指针 ; <span class="hljs-comment">//释放的指针必须是new出来的，只能做一次</span><br><span class="hljs-comment">//例：</span><br><span class="hljs-keyword">int</span> *p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>;<br>*p = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">delete</span> p;<br><span class="hljs-keyword">delete</span> p; <span class="hljs-comment">//释放两次</span><br><br><br><span class="hljs-comment">//释放数组</span><br><span class="hljs-keyword">delete</span> [] 指针;  <span class="hljs-comment">//该指针必须指向new出的数组</span><br>例：<br><span class="hljs-keyword">int</span>*p = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">20</span>];<br>p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">delete</span> [] p ; <span class="hljs-comment">//没有[] 会导致空间没有被完全释放</span><br></code></pre></div></td></tr></table></figure><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//由来：调用函数时的额外开销</span><br><span class="hljs-comment">//调用函数过程：  把参数和返回地址放到栈里面去，函数执行完返回后，还要从栈里取回返回地址，然后跳转到返回地址去执行</span><br><span class="hljs-comment">//为了减少开销</span><br><br><br><span class="hljs-comment">//将整个函数体的代码插入到调用语句处，而不会产生调用函数的语句，不会进行参数传递</span><br><br><span class="hljs-comment">//定义</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a&gt;b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br><br><span class="hljs-comment">//缺点</span><br>会增大空间，因为调用时相当于将函数的内部语句插入直接使用，根据程序的体积会有体良上的影响<br></code></pre></div></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//一个或多个函数，名字相同，然而参数或参数类型不相同，这叫做函数的重载</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">double</span> f1, <span class="hljs-keyword">double</span> f2)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f1, <span class="hljs-keyword">int</span> f2)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> f1, <span class="hljs-keyword">int</span> f2 , <span class="hljs-keyword">int</span> f3)</span></span>&#123;&#125;<br><br><span class="hljs-comment">//编译器根据调用参数的形式来匹配函数的声明，从而找到对应的函数</span><br><br><span class="hljs-built_in">Max</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2.4</span>);   <span class="hljs-comment">//有二义性 错误 ，编译器找不到该函数</span><br></code></pre></div></td></tr></table></figure><h3 id="函数缺省参数"><a href="#函数缺省参数" class="headerlink" title="函数缺省参数"></a>函数缺省参数</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//定义参数的时候可以给函数参数一个预先的值，如果在调用参数的时候没有写该参数，则可以使用预定义的值,但是注意只能最右边缺省，不能中间缺省</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x1, <span class="hljs-keyword">int</span> x2 = <span class="hljs-number">2</span>,,<span class="hljs-keyword">int</span> x3 = <span class="hljs-number">3</span>)</span></span>&#123;&#125;<br><br><span class="hljs-built_in">fun</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//相当于func(10,2,3)</span><br><span class="hljs-built_in">fun</span>(<span class="hljs-number">10</span>，<span class="hljs-number">8</span>;<span class="hljs-comment">//相当于func(10,2,8)</span><br>    <br><span class="hljs-built_in">fun</span>(<span class="hljs-number">10</span>，，<span class="hljs-number">8</span>);<span class="hljs-comment">//函数调用错误</span><br>    <br><span class="hljs-comment">//提高程序的可扩充性</span><br></code></pre></div></td></tr></table></figure><h3 id="作用域运算符"><a href="#作用域运算符" class="headerlink" title="作用域运算符"></a>作用域运算符</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">::  变量名相同时，：：可使全局变量在局部变量的作用域内使用<br>    <br><span class="hljs-keyword">int</span>  a;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a;<br>    ::a ;<span class="hljs-comment">//此时的a为全局变量a </span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="结构化程序设计"><a href="#结构化程序设计" class="headerlink" title="结构化程序设计"></a>结构化程序设计</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//程序 = 数据结构 + 算法</span><br><span class="hljs-comment">//程序由全局变量以及众多相互调用的函数组成</span><br><span class="hljs-comment">//算法以函数的形式实现，用于对数据结构进行操作</span><br><br><span class="hljs-comment">//不足</span><br>数据结构和函数操作关系不清、<br>函数和函数的关系不清<br>不方便重用函数<br></code></pre></div></td></tr></table></figure><h3 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">面向对象程序 = 类 + 类 + 类<br>    <br><span class="hljs-comment">//方法</span><br><span class="hljs-comment">//归纳事物共同属性、形成数据结构</span><br>    <br><span class="hljs-comment">//抽象 </span><br><span class="hljs-comment">//这类函数能进行的行为也归纳出来，形成函数，这些函数也可以操作数据结构</span><br>    <br><span class="hljs-comment">//封装     </span><br><span class="hljs-comment">//将数据结构和操作该数据结构的函数捆绑在一起，形成了类，通过类可以看出数据结构和函数的关系</span><br><br>抽象、封装、继承、多态<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/07/EckALI4KopUwVmi.png" alt="image-20210313200955552"></p><h3 id="类和对象基本概念"><a href="#类和对象基本概念" class="headerlink" title="类和对象基本概念"></a>类和对象基本概念</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">写一个程序，输入矩形的长和宽，输出面积和周长<br><span class="hljs-comment">//属性： 长 和 宽</span><br><span class="hljs-comment">//行为： 面积 和 周长</span><br>    <br><span class="hljs-comment">//从客观事物的特性出发，设计定义变量和函数，封装为类</span><br>    <br><span class="hljs-comment">//封装为类</span><br> 矩形类<br>&#123;<br>    长 、 宽 变量    <span class="hljs-comment">//成员变量</span><br>    计算矩形周长函数; <span class="hljs-comment">//成员函数</span><br>    计算矩形面积函数; <span class="hljs-comment">//成员函数 和 成员变量 统称为 类的成员</span><br>    输出矩形长宽函数; <span class="hljs-comment">//成员函数</span><br>&#125;<br><br>例：<br>    <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CRectangle</span>  //类型的名字，用户自定义</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> w,h;    <span class="hljs-comment">//成员变量</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span></span>&#123;   <br>                <span class="hljs-keyword">return</span> w * h;<br>            &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Perimeter</span><span class="hljs-params">()</span></span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>* (w + h);<br>            &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Init</span><span class="hljs-params">( <span class="hljs-keyword">int</span> w_,<span class="hljs-keyword">int</span> h_)</span></span>&#123;<br>                w = w_; h = h_;<br>            &#125;<br>&#125;;  <span class="hljs-comment">//必须有分号！！！！！</span><br>    <span class="hljs-comment">//必须有分号！！！！！</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> w,h;<br>    CRectangle r;    <span class="hljs-comment">//r 是一个对象，类型的名字可以定义变量，通过类定义的变量即为对象</span><br>    cin &gt;&gt; w &gt;&gt; h;<br>    r.<span class="hljs-built_in">Init</span>(w,h);   <span class="hljs-comment">//调用了r的成员函数，作用到了r的成员变量中</span><br>    cout&lt;&lt; r.<span class="hljs-built_in">Area</span>() &lt;&lt; endl &lt;&lt; r.<span class="hljs-built_in">Perimeter</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="对象的内存分配"><a href="#对象的内存分配" class="headerlink" title="对象的内存分配"></a>对象的内存分配</h3><p>类似C中的结构体</p><p>和结构变量相同，对象所占用的内存空间的大小，等于所有成员变量的大小之和</p><p>对象，只包含了成员变量，不包含成员函数</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//因此，sizeof（上述类CRectangle) = 8;</span><br><span class="hljs-comment">//每个用类定义的对象，都有自己的存储空间，不共用，因此改变相同类的对象的成员变量的值，不会影响另一个对象。对象中的函数是共用的，成员变量不共用。</span><br></code></pre></div></td></tr></table></figure><h3 id="对象之间的运算"><a href="#对象之间的运算" class="headerlink" title="对象之间的运算"></a>对象之间的运算</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//类似C语言的结构体，可以整体赋值</span><br>如果使用了“重载”，则可以进行其他类型操作、判断、算数运算等<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//使用类的成员变量和成员函数</span><br><br><span class="hljs-comment">//用法1： 对象名.成员名</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CRectangle</span>  </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">int</span> w,h;    <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span></span>&#123;   <br>                <span class="hljs-keyword">return</span> w * h;<br>            &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Perimeter</span><span class="hljs-params">()</span></span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>* (w + h);<br>            &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Init</span><span class="hljs-params">( <span class="hljs-keyword">int</span> w_,<span class="hljs-keyword">int</span> h_)</span></span>&#123;<br>                w = w_; h = h_;<br>            &#125;<br>&#125;;  <br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Crectangle r1,r2;<br>    r1.w = <span class="hljs-number">5</span>;    <span class="hljs-comment">// 将对象r1中的 w 变量 赋值为5</span><br>    r2.<span class="hljs-built_in">Init</span>(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>);  <span class="hljs-comment">// 调用对象r2中的函数.Init传入5和4两个参数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//用法2  指针-&gt;成员名</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Crectangle r1,r2;<br>    Crectangle * p1 = &amp; r1;<br>    Crectangle * p2 = &amp; r2;<br>    p1-&gt;w = <span class="hljs-number">5</span>;   <span class="hljs-comment">//p1 指针指向的对象的成员变量赋值</span><br>    p2-&gt;<span class="hljs-built_in">Init</span>(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>);  <span class="hljs-comment">//Init作用在p2指针的对象上</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//用法3  引用名.成员名</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Crectangle r2;<br>    Crectangle  &amp; rr = r2; <span class="hljs-comment">//rr 引用了 对象r2</span><br>    rr.w = <span class="hljs-number">5</span>;<br>    rr.<span class="hljs-built_in">Init</span>(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>);  <span class="hljs-comment">//和引用概念相同，rr引用的r2一同变</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//另</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintRectangle</span><span class="hljs-params">(CRectangle &amp; r)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;r.<span class="hljs-built_in">Area</span>()&lt;&lt;<span class="hljs-string">&quot;,&quot;</span>&lt;&lt;r.<span class="hljs-built_in">perimeter</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Crectangle r3;<br>    r3.<span class="hljs-built_in">Init</span>(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>);  <span class="hljs-comment">//和引用概念相同，rr引用的r2一同变</span><br>    <span class="hljs-built_in">PrintRectangle</span>(r3);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//1  输出一个水平中轴为n的菱形</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintStar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1</span>; i &lt;= n;++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; n - i;++j)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; i;++j)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;*&quot;</span><br>                 &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>     <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">5</span>;++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; i; ++j)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> ( j = n-i; j &gt; <span class="hljs-number">0</span>;--j)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;*&quot;</span><br>                 &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">PrintStar</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//2  </span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于VS code如何下载并配置C语言（windows）</title>
    <link href="/2021/10/03/%E5%85%B3%E4%BA%8EVS%20code%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD%E5%B9%B6%E9%85%8D%E7%BD%AEC%E8%AF%AD%E8%A8%80%EF%BC%88windows%EF%BC%89/"/>
    <url>/2021/10/03/%E5%85%B3%E4%BA%8EVS%20code%E5%A6%82%E4%BD%95%E4%B8%8B%E8%BD%BD%E5%B9%B6%E9%85%8D%E7%BD%AEC%E8%AF%AD%E8%A8%80%EF%BC%88windows%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="关于VS-code如何下载并配置C语言（windows）"><a href="#关于VS-code如何下载并配置C语言（windows）" class="headerlink" title="关于VS code如何下载并配置C语言（windows）"></a>关于VS code如何下载并配置C语言（windows）</h3><h3 id="0x01-下载VS-code"><a href="#0x01-下载VS-code" class="headerlink" title="0x01  下载VS code"></a>0x01  下载VS code</h3><p><strong>1.</strong><a href="https://code.visualstudio.com/"><strong>VS code官网</strong></a> </p><p><a href="https://imgchr.com/i/rq9RVe"><img src="https://s3.ax1x.com/2020/12/29/rq9RVe.png" alt="rq9RVe.png"></a></p><p><strong>2</strong>.点击后无需操作，等待下载弹窗</p><p><strong>3</strong>.下载后找到安装包，打开</p><p><a href="https://imgchr.com/i/rq9WUH"><img src="https://s3.ax1x.com/2020/12/29/rq9WUH.png" alt="rq9WUH.png"></a></p><h3 id="0x02-安装VS-code"><a href="#0x02-安装VS-code" class="headerlink" title="0x02  安装VS code"></a>0x02  安装VS code</h3><p>**1.**按照下图流程操作</p><p><a href="https://imgchr.com/i/rq9f5d"><img src="https://s3.ax1x.com/2020/12/29/rq9f5d.png" alt="rq9f5d.png" style="zoom:150%;" /></a></p><p><a href="https://imgchr.com/i/rq94PA"><img src="https://s3.ax1x.com/2020/12/29/rq94PA.png" alt="rq94PA.png" style="zoom: 150%;" /></a></p><p><a href="https://imgchr.com/i/rq958I"><img src="https://s3.ax1x.com/2020/12/29/rq958I.png" alt="rq958I.png" style="zoom:150%;" /></a></p><p><a href="https://imgchr.com/i/rq9oxP"><img src="https://s3.ax1x.com/2020/12/29/rq9oxP.png" alt="rq9oxP.png" style="zoom:150%;" /></a></p><p><strong>2</strong>.本人已经装过了，所以没有<strong>自定义安装地址</strong></p><h3 id="0x03-下载及安装MinGW"><a href="#0x03-下载及安装MinGW" class="headerlink" title="0x03  下载及安装MinGW"></a>0x03  下载及安装MinGW</h3><p>​    <a href="%5B**https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/**%5D(https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/)"><strong>MinGW官网</strong></a>   进入后一直翻，找到下图的位置</p><p><a href="https://imgchr.com/i/rq96KK"><img src="https://s3.ax1x.com/2020/12/29/rq96KK.jpg" alt="rq96KK.jpg"></a></p><p>​    <a href="%5B**https://pan.baidu.com/s/1g3BEDOh65r58OhwM7eMgeQ**%5D(https://pan.baidu.com/s/1g3BEDOh65r58OhwM7eMgeQ)"><strong>百度网盘</strong></a>    <strong>提取码：e42m</strong></p><p>​    下载解压即可，并找到并进入<strong>bin文件夹</strong>，记住路径</p><h3 id="0x04-配置环境变量"><a href="#0x04-配置环境变量" class="headerlink" title="0x04  配置环境变量"></a>0x04  配置环境变量</h3><p><strong>1.</strong> 设置中找到 <strong>编辑系统环境变量</strong> ，或者如下图找到并单击</p><p><a href="https://imgchr.com/i/rq97Kf"><img src="https://s3.ax1x.com/2020/12/29/rq97Kf.png" alt="rq97Kf.png" style="zoom:150%;" /></a></p><p><strong>2</strong>.如下图提示依次操作</p><p><a href="https://imgchr.com/i/rq9LVg"><img src="https://s3.ax1x.com/2020/12/29/rq9LVg.png" alt="rq9LVg.png"></a></p><p><a href="https://imgchr.com/i/rq9X5j"><img src="https://s3.ax1x.com/2020/12/29/rq9X5j.png" alt="rq9X5j.png" style="zoom:150%;" /></a></p><p><strong>3</strong>.找到Path变量并点击，再点击编辑</p><p><a href="https://imgchr.com/i/rq9vPs"><img src="https://s3.ax1x.com/2020/12/29/rq9vPs.png" alt="rq9vPs.png" style="zoom:150%;" /></a></p><p><strong>4</strong>.复制之前解压的mingw到bin的链接</p><p><a href="https://imgchr.com/i/rbloOe"><img src="https://s3.ax1x.com/2020/12/29/rbloOe.jpg" alt="rbloOe.jpg"></a></p><p><a href="https://imgchr.com/i/rbl7eH"><img src="https://s3.ax1x.com/2020/12/29/rbl7eH.jpg" alt="rbl7eH.jpg"></a></p><p><strong>5</strong>.接下来一直点确定，直到窗口关闭</p><p><strong>6</strong>.<strong>点击 输入cmd 点击打开cmd，也可用快捷键win + R 输入cmd 打开</strong></p><img src="https://s3.ax1x.com/2020/12/29/rq97Kf.png" alt="rq97Kf.png" style="zoom:150%;" /><p><a href="https://imgchr.com/i/rq9xGn"><img src="https://s3.ax1x.com/2020/12/29/rq9xGn.png" alt="rq9xGn.png" style="zoom:150%;" /></a></p><p><strong>5</strong>.测试计算机能否找到 gcc，有下方的输出表明配置正确，如果没有说明之前的配置有误，再去查看一下变量的地址、mingw的地址等。测试正确关闭即可。</p><p><a href="https://imgchr.com/i/rq9z2q"><img src="https://s3.ax1x.com/2020/12/29/rq9z2q.png" alt="rq9z2q.png" style="zoom:150%;" /></a></p><h3 id="0x05-设置VS-Code"><a href="#0x05-设置VS-Code" class="headerlink" title="0x05  设置VS Code"></a>0x05  设置VS Code</h3><p><strong>1.</strong> 打开vs code</p><p><a href="https://imgchr.com/i/rqC9MV"><img src="https://s3.ax1x.com/2020/12/29/rqC9MV.png" alt="rqC9MV.png"></a></p><p><strong>2</strong>.<strong>输入chin，点击后，点安装。之后重启 vscode 你会发现界面变为中文</strong></p><p><a href="https://imgchr.com/i/rqCCrT"><img src="https://s3.ax1x.com/2020/12/29/rqCCrT.png" alt="rqCCrT.png"></a></p><p> <strong>再次搜索C/C++，安装</strong> </p><p><a href="https://imgchr.com/i/rqC1de"><img src="https://s3.ax1x.com/2020/12/29/rqC1de.png" alt="rqC1de.png"></a></p><p> <strong>再次搜索code runner，安装</strong> </p><p><a href="https://imgchr.com/i/rqCGid"><img src="https://s3.ax1x.com/2020/12/29/rqCGid.png" alt="rqCGid.png"></a></p><p><strong>3</strong>.<strong>新建一个文件夹，并新建文件</strong></p><p><a href="https://imgchr.com/i/rqCJJA"><img src="https://s3.ax1x.com/2020/12/29/rqCJJA.png" alt="rqCJJA.png" style="zoom:150%;" /></a></p><p><a href="https://imgchr.com/i/rqCUQP"><img src="https://s3.ax1x.com/2020/12/29/rqCUQP.png" alt="rqCUQP.png" style="zoom:150%;" /></a></p><p><strong>4</strong>.<strong>写一段测试代码，(复制下方即可)</strong></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br>      <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>5</strong>.<strong>运行在下方输出，输出正确即无误</strong></p><p><a href="https://imgchr.com/i/rqCdL8"><img src="https://s3.ax1x.com/2020/12/29/rqCdL8.png" alt="rqCdL8.png"></a></p><h3 id="0x06-重要问题解决"><a href="#0x06-重要问题解决" class="headerlink" title="0x06  重要问题解决"></a>0x06  重要问题解决</h3><p><strong>1.Vscode一开始只能在输出看结果，我们要调整到终端看结果这样就可以输入了</strong></p><p><a href="https://imgchr.com/i/rqCBdg"><img src="https://s3.ax1x.com/2020/12/29/rqCBdg.png" alt="rqCBdg.png"></a></p><p><strong>点击，然后下滑，直到找到下图这一项并点击</strong></p><p><a href="https://imgchr.com/i/rqCDoQ"><img src="https://s3.ax1x.com/2020/12/29/rqCDoQ.png" alt="rqCDoQ.png"></a></p><p><strong>2.先复制下方代码，然后粘贴到{ }内的合适位置</strong></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-string">&quot;code-runner.runInTerminal&quot;</span>: <span class="hljs-literal">true</span>,<br></code></pre></div></td></tr></table></figure><p><strong>（这里容易出错，因为可能你设置过的话内容会和下图不同，多试几次不同位置。）</strong></p><p><a href="https://imgchr.com/i/rqCsij"><img src="https://s3.ax1x.com/2020/12/29/rqCsij.png" alt="rqCsij.png"></a></p><p><strong>粘贴后关闭即可，下面运行刚才的代码，会发现程序在终端输出。</strong></p><p><strong>3.再写一个可以输入输出的代码如上法，测试一下</strong></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> d, h, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;d, &amp;h, &amp;m);<br>    m = d * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> + h * <span class="hljs-number">60</span> + m;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;这是中文%d&quot;</span>,m);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>你会发现中文部分输出的是乱码</strong></p><p><a href="https://imgchr.com/i/rqCyJs"><img src="https://s3.ax1x.com/2020/12/29/rqCyJs.png" alt="rqCyJs.png" style="zoom:150%;" /></a></p><p><strong>点击UTF-8</strong></p><p><a href="https://imgchr.com/i/rqCczq"><img src="https://s3.ax1x.com/2020/12/29/rqCczq.png" alt="rqCczq.png"></a></p><p>找到GBK （中文编码）</p><p><a href="https://imgchr.com/i/rqC2Q0"><img src="https://s3.ax1x.com/2020/12/29/rqC2Q0.png" alt="rqC2Q0.png"></a></p><p><strong>下滑找到点击</strong></p><p><strong>再次运行</strong></p><p><a href="https://imgchr.com/i/rqCWLT"><img src="https://s3.ax1x.com/2020/12/29/rqCWLT.png" alt="rqCWLT.png"></a></p><p><strong>4.设置完毕，但是你下次打开此文件，代码中的中文还是会显示乱码。</strong></p><p><a href="https://imgchr.com/i/rqC4wF"><img src="https://s3.ax1x.com/2020/12/29/rqC4wF.png" alt="rqC4wF.png" style="zoom:150%;" /></a></p><p><strong>将默认设置为GBK ，这样下次打开就是默认中文编码。</strong></p><p><strong>5.另外按 ctrl + shift + p 后，输入tasks，找到tasks.json文件</strong></p><p><strong>在下图位置，加划线那行代码，并且上一行尾要加逗号！！</strong></p><p><a href="https://imgchr.com/i/rqC7WR"><img src="https://s3.ax1x.com/2020/12/29/rqC7WR.jpg" alt="rqC7WR.jpg"></a></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-string">&quot;-fexec-charset=GBK&quot;</span> <span class="hljs-comment">//解决中文乱码 </span><br></code></pre></div></td></tr></table></figure><p><strong>修改代码后记得ctrl + S 保存后，重启即可。</strong></p><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><p>1.在调用函数库的时候可能会出现编辑器找不到的情况，需要尽可能多的定义</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span> </span><br></code></pre></div></td></tr></table></figure><p>例如在使用 <strong>time.h</strong> 时，需先写出<strong>stdlib.h</strong></p><p>2.另外对编译的语法也有不同的要求，修改语法可以排除一些编译报错。</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初学C编写的小游戏</title>
    <link href="/2021/10/03/C%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <url>/2021/10/03/C%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 20  <span class="hljs-comment">//定义一个时间以s为单位，要求时间至少够做5题</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  程序名：算数游戏 </span><br><span class="hljs-comment">  时间：2020.12.24 </span><br><span class="hljs-comment">  制作人：Bsheepcoder </span><br><span class="hljs-comment">  内容： 用户需在规定时间内尽可能多的做题，</span><br><span class="hljs-comment">         题目内容是完成两个10以内数相加和相减。           </span><br><span class="hljs-comment">*/</span> <br><span class="hljs-function">struct  tm  * <span class="hljs-title">GetTime</span><span class="hljs-params">( <span class="hljs-keyword">time_t</span>  *t)</span>    <span class="hljs-comment">//声明一个获取时间的结构指针 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">tm</span>  * <span class="hljs-title">loctm</span>;</span><br>time (t);                <span class="hljs-comment">//获取Unix时间戳。</span><br>loctm = localtime  (t);   <span class="hljs-comment">//转为时间结构。</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NewNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1, <span class="hljs-keyword">int</span> *p2)</span></span>;  <span class="hljs-comment">//生成两个10以内随机数 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a , <span class="hljs-keyword">int</span> b)</span></span>;            <span class="hljs-comment">//两数和 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Minus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a , <span class="hljs-keyword">int</span> b)</span></span>;          <span class="hljs-comment">//两数差的绝对值</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sum,<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> minus,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> *k)</span></span>;   <span class="hljs-comment">//判断用户输入的结果是否正确 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">TimeCnt</span><span class="hljs-params">( struct  tm  *localtime,struct  tm  begintime)</span></span>; <span class="hljs-comment">//返回剩余答题时间</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">InTime</span><span class="hljs-params">(struct  tm  *lt1 ,<span class="hljs-keyword">time_t</span>  t , <span class="hljs-keyword">int</span> *pn, <span class="hljs-keyword">int</span> *pk)</span></span>; <span class="hljs-comment">//答题时间内的操作，输入两个数。 </span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">AwardLangurage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *cnt,<span class="hljs-keyword">int</span> *k)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><br> <span class="hljs-keyword">time_t</span>  T;  <br> <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span> ;  <span class="hljs-comment">//</span><br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;  %ds时间，准备开始了吗?\n&quot;</span>,N);<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;  按enter 开始  ||  输任意值退出\n&quot;</span>,N);<br>     <span class="hljs-keyword">if</span>(getchar() == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>     &#123;<br>            <span class="hljs-comment">//定义一个时间变量 </span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">tm</span>  *<span class="hljs-title">lt1</span>;</span>   <span class="hljs-comment">//定义一个时间结构体指针 </span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">tm</span>  <span class="hljs-title">begin</span>;</span><br>        <span class="hljs-keyword">int</span> time;          <span class="hljs-comment">//定义一个时间差 </span><br>     lt1 =  GetTime(&amp;T);    <span class="hljs-comment">//指针指向此时时间 </span><br>     begin = * lt1;     <span class="hljs-comment">//记录开始的时间指针的时间 </span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>time =  TimeCnt(lt1,begin);   <span class="hljs-comment">//传入开始时间 ，返回剩余时间 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;—————剩余 %ds——————&lt;\t\n&quot;</span>,time);<br><span class="hljs-keyword">if</span>(time &gt;= <span class="hljs-number">0</span>)<br>&#123;<br>                InTime(lt1,T,&amp;cnt,&amp;k);    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;  停！时间到！\t\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;  共 %d 题， 答对 %d 题\t\n&quot;</span>,cnt,k);<br>   <span class="hljs-keyword">switch</span> (AwardLangurage(&amp;cnt,&amp;k))<br>   &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;完全正确！你太厉害了！&quot;</span>);<br>   <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;优秀！我看好你！&quot;</span>);<br>   <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;良好！你很有潜力！&quot;</span>);<br>   <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;一般，你需要多练习！&quot;</span>);<br>   <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加油，不要放弃！&quot;</span>);<br>   <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你完美的躲过了正确答案！&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">default</span>:<br>   <span class="hljs-keyword">break</span>;<br>   &#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;  按任意键退出\t\n&quot;</span>,N);<br><span class="hljs-keyword">break</span>; <br>&#125;<br>&#125; <br>getchar();<br>getchar(); <span class="hljs-comment">//防止程序闪退 </span><br> &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NewNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *p1, <span class="hljs-keyword">int</span> *p2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> born ;<br>srand((<span class="hljs-keyword">unsigned</span>)time(<span class="hljs-literal">NULL</span>));<br>*p1 = (rand()+<span class="hljs-number">2</span> * rand())%<span class="hljs-number">10</span>;   <span class="hljs-comment">//取一个随机数 p1 </span><br>*p2 = (rand() * rand()+rand())%<span class="hljs-number">10</span>;   <span class="hljs-comment">// 取一个随机数 p2 </span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a , <span class="hljs-keyword">int</span> b)</span>   <span class="hljs-comment">//两数和 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> sum;<br>sum = a + b;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Minus</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a , <span class="hljs-keyword">int</span> b)</span>   <span class="hljs-comment">//两数差的绝对值 </span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span> minus;<br><span class="hljs-keyword">if</span>(a &lt; b)&#123;<br>minus = b - a;<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>minus = a - b;<br>&#125;<br><span class="hljs-keyword">return</span> minus;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Judge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sum,<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> minus,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> *k)</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-keyword">if</span>(a == sum &amp;&amp; b == minus)<br>        &#123;<br>           <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; 正确！\n&quot;</span>);<br>           *k = *k + <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; 错误！\n&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   功能：判断时间差，以此为依据退出循环</span><br><span class="hljs-comment">   参数：时间结构指针、开始时间</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">TimeCnt</span><span class="hljs-params">( struct  tm  *localtime,struct  tm   begintime)</span> <span class="hljs-comment">//传入</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span>  minus;<br><span class="hljs-keyword">if</span>(localtime-&gt;tm_min &gt; begintime.tm_min)<br>&#123;<br>minus = localtime-&gt;tm_sec + <span class="hljs-number">60</span> - begintime.tm_sec ;<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>minus = localtime-&gt;tm_sec - begintime.tm_sec ;<br>&#125;<br><span class="hljs-keyword">return</span> (N - minus) ;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   功能：规定时间内的动作</span><br><span class="hljs-comment">   参数：时间结构指针、时间变量、计题数、计答对题数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">InTime</span><span class="hljs-params">(struct  tm  *lt1 ,<span class="hljs-keyword">time_t</span>  t , <span class="hljs-keyword">int</span> *pn, <span class="hljs-keyword">int</span> *pk)</span>  </span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-keyword">int</span> new1, new2, answer1, answer2;<br>        <span class="hljs-keyword">int</span> i,sum, begin , minus;<br>     NewNumber(&amp;new1,&amp;new2);<br> sum = Sum(new1,new2);<br> minus = Minus(new1,new2);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   &gt;&gt;  %d  +/- %d = ?\t\n&quot;</span>,new1 ,new2);<br> *pn = *pn + <span class="hljs-number">1</span>;<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;answer1, &amp;answer2);<br> Judge(sum,answer1,minus,answer2,pk);<br> lt1 =  GetTime(&amp;t);<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   功能：用答错的题数来判断评价</span><br><span class="hljs-comment">   参数：题数、答对的题数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">AwardLangurage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *cnt,<span class="hljs-keyword">int</span> *k)</span>    </span><br><span class="hljs-function"> </span>&#123;<br><span class="hljs-keyword">int</span> LangurageStand;<br><span class="hljs-keyword">int</span> error =  *cnt - *k ; <span class="hljs-comment">// 错误的题数</span><br><span class="hljs-keyword">if</span>(*cnt &gt; <span class="hljs-number">10</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (error == <span class="hljs-number">0</span> )     <span class="hljs-comment">//0%以内</span><br>&#123; <br>LangurageStand = <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(error &lt; (*cnt)/<span class="hljs-number">5</span>)  <span class="hljs-comment">//20%</span><br>&#123;<br>LangurageStand = <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(error &lt; <span class="hljs-number">2</span>*(*cnt)/<span class="hljs-number">5</span>)  <span class="hljs-comment">//40%</span><br>&#123;<br>LangurageStand = <span class="hljs-number">2</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(error &lt; <span class="hljs-number">4</span>*(*cnt)/<span class="hljs-number">5</span>)   <span class="hljs-comment">//80%</span><br>&#123;<br>LangurageStand = <span class="hljs-number">3</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(error &lt; *cnt)         <span class="hljs-comment">//100%</span><br>&#123;<br>LangurageStand = <span class="hljs-number">4</span>;<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>LangurageStand = <span class="hljs-number">5</span>;<br>&#125;<br><br>&#125;<span class="hljs-keyword">else</span>   <span class="hljs-comment">//  5个题以内</span><br>&#123;<br><span class="hljs-keyword">if</span> (error == <span class="hljs-number">0</span> )     <br>&#123; <br>              <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;完全正确！你太厉害了！&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(error &lt; *cnt)<br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;还需努力！&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你需要更多练习！&quot;</span>);<br>&#125;<br>LangurageStand = <span class="hljs-number">6</span>;<br>&#125;<br><span class="hljs-keyword">return</span> LangurageStand;<br>&#125;   <br></code></pre></div></td></tr></table></figure><p>不是很难，不过很适合小盆友来学习算数</p><p>还可以写成乘法算数类型</p><p>哈哈</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Fluid出现问题与解决</title>
    <link href="/2021/10/02/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/10/02/Hexo-Fluid%E4%B8%BB%E9%A2%98%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>更多详请查看<a href="https://hexo.io/docs/">Hexo文档</a>、<a href="https://hexo.fluid-dev.com/docs/start/">Fluid主题文档</a>、<a href="https://hexo.fluid-dev.com/">Fluid主题展示和功能介绍</a></p><h2 id="hexo页面代码块格式错误"><a href="#hexo页面代码块格式错误" class="headerlink" title="hexo页面代码块格式错误"></a>hexo页面代码块格式错误</h2><ul><li><p>问题：</p><p>我自己有一个习惯，当我要写代码块的时候，我习惯这样写:</p><p><img src="https://i.loli.net/2021/10/02/ItQT6e43dmnNHgv.png" alt="image-20211002211755043"></p><p>这样在Typora中是支持的，但是部署到Hexo上时就会出现错误，导致代码块错位。</p></li><li><p>方法：</p><p>方法就是在写代码块的时候，避免用 - ，各一行也不会出错，或者直接不使用 - 分级。</p></li></ul><h2 id="hexo-s时提示4000端口被占用"><a href="#hexo-s时提示4000端口被占用" class="headerlink" title="hexo s时提示4000端口被占用"></a>hexo s时提示4000端口被占用</h2><ul><li><p>问题</p><p>有的时候在执行‘hexo sever’的命令时,提示以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">FATAL Port 4000 has been used. Try other port instead.<br></code></pre></div></td></tr></table></figure></li><li><p>方法：</p><p>出现问题的原因是4000端口被占用，这个端口是可以随意设置的不是固定的，可以输入以指定端口开启服务：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo server -p 4001<br></code></pre></div></td></tr></table></figure><p>或者在可以在站点下的文件_config.yml内加上如下代码更改hexo-server运行时的端口号：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">4001</span> <span class="hljs-comment">#端口号随意，默认是4000,可以更改为其他</span><br>  <span class="hljs-attr">compress:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">header:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（五）Python程序设计方法</title>
    <link href="/2021/10/02/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2021/10/02/Python%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="程序设计方法"><a href="#程序设计方法" class="headerlink" title="程序设计方法"></a>程序设计方法</h2><p>理解掌握Python程序设计思维</p><p>编写更有设计感的程序</p><h3 id="0x1-实例-体育竞技分析"><a href="#0x1-实例-体育竞技分析" class="headerlink" title="0x1 实例 体育竞技分析"></a>0x1 实例 体育竞技分析</h3><p>需求：毫厘是多少，如何可选分析体育竞技比赛</p><p>模拟N场比赛</p><p>计算思维 ：抽象 + 自动化</p><p>模拟：抽象比赛过程+自动化执行N场比赛</p><p>N越大时，比赛结果分析会越科学</p><p>问题分析</p><p>比赛规则</p><p>双人击球比赛：A&amp;B，回合制，5局3胜</p><p>开始时一方先发球，直至判分，接下来胜者发球</p><p>球员只能在发球局得分，15分胜一局</p><p>自顶向下</p><p>将总问题表达为若干小问题的分析方法</p><p>是解决复杂问日的有效方法</p><p><a href="https://imgchr.com/i/sziYzd"><img src="https://s3.ax1x.com/2021/01/27/sziYzd.png" alt="sziYzd.png"></a></p><p>第一阶段</p><p>介绍内容，提高用户体验</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printIntro</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个程序模拟两个选手A和B的某种竞技比赛&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序运行需要A和B的能力值（以0到1之间的小数表示）&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getInputs</span>():</span><br>    a = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入选手A的能力值（0-1）：&quot;</span>))<br>    b = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入选手B的能力值（0-1）：&quot;</span>))<br>    n = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;模拟比赛场次：&quot;</span>))<br>    <span class="hljs-keyword">return</span> a,b,n<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printSummary</span>(<span class="hljs-params">winsA,winsB</span>):</span><br>    n = winsA + winsB<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;竞技开始分析，共模拟&#123;&#125;场比赛&quot;</span>.<span class="hljs-built_in">format</span>(n))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选手A获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(winsA,winsA/n))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选手B获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(winsB,winsB/n))<br></code></pre></div></td></tr></table></figure><p>第二阶段</p><p>N次比赛，</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">simNGames</span>(<span class="hljs-params">n,probA,probB</span>):</span><br>    winsA,winsB = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        scoreA,scoreB = simOneGame(probA,probB)<br>        <span class="hljs-keyword">if</span> scoreA &gt; scoreB:<br>            winsA += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            winsB += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> winsA, winsB<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sim0neGame</span>(<span class="hljs-params">probA,probB</span>):</span><br>    scoreA,scoreB = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    serving = <span class="hljs-string">&quot;A&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> gameOver(scoreA,scoreB):<br>        <span class="hljs-keyword">if</span> serving == <span class="hljs-string">&quot;A&quot;</span>:<br>            <span class="hljs-keyword">if</span> random() &lt; probA:<br>                  scoreA += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                  serving = <span class="hljs-string">&quot;B&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> random() &lt; probB:<br>                  scoreB += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                  serving = <span class="hljs-string">&quot;A&quot;</span><br>    <span class="hljs-keyword">return</span> scoreA,scoreB<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gameOver</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">return</span> a==<span class="hljs-number">15</span> <span class="hljs-keyword">or</span> b==<span class="hljs-number">15</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    printIntro()<br>    probA,probB, n = getInputs()<br>    winsA,winsB = simNGames(n,probA,probB)<br>    printSummary(winsA,winsB)<br></code></pre></div></td></tr></table></figure><p>最终代码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> random<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printIntro</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这个程序模拟两个选手A和B的某种竞技比赛&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序运行需要A和B的能力值（以0到1之间的小数表示）&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getInputs</span>():</span><br>    a = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入选手A的能力值（0-1）：&quot;</span>))<br>    b = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入选手B的能力值（0-1）：&quot;</span>))<br>    n = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;模拟比赛场次：&quot;</span>))<br>    <span class="hljs-keyword">return</span> a,b,n<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printSummary</span>(<span class="hljs-params">winsA,winsB</span>):</span><br>    n = winsA + winsB<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;竞技开始分析，共模拟&#123;&#125;场比赛&quot;</span>.<span class="hljs-built_in">format</span>(n))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选手A获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(winsA,winsA/n))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;选手B获胜&#123;&#125;场比赛，占比&#123;:0.1%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(winsB,winsB/n))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">simOneGame</span>(<span class="hljs-params">probA,probB</span>):</span><br>    scoreA,scoreB = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    serving = <span class="hljs-string">&quot;A&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> gameOver(scoreA,scoreB):<br>        <span class="hljs-keyword">if</span> serving == <span class="hljs-string">&quot;A&quot;</span>:<br>            <span class="hljs-keyword">if</span> random() &lt; probA:<br>                  scoreA += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                  serving = <span class="hljs-string">&quot;B&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> random() &lt; probB:<br>                  scoreB += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                  serving = <span class="hljs-string">&quot;A&quot;</span><br>    <span class="hljs-keyword">return</span> scoreA,scoreB<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gameOver</span>(<span class="hljs-params">a,b</span>):</span><br>    <span class="hljs-keyword">return</span> a==<span class="hljs-number">15</span> <span class="hljs-keyword">or</span> b==<span class="hljs-number">15</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">simNGames</span>(<span class="hljs-params">n,probA,probB</span>):</span><br>    winsA,winsB = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        scoreA,scoreB = simOneGame(probA,probB)<br>        <span class="hljs-keyword">if</span> scoreA &gt; scoreB:<br>            winsA += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            winsB += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> winsA, winsB<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    printIntro()<br>    probA,probB, n = getInputs()<br>    winsA,winsB = simNGames(n,probA,probB)<br>    printSummary(winsA,winsB)<br>main()<br><br><br>运行结果：<br><br>这个程序模拟两个选手A和B的某种竞技比赛<br>程序运行需要A和B的能力值（以<span class="hljs-number">0</span>到<span class="hljs-number">1</span>之间的小数表示）<br>请输入选手A的能力值（<span class="hljs-number">0</span>-<span class="hljs-number">1</span>）：<span class="hljs-number">0.45</span><br>请输入选手B的能力值（<span class="hljs-number">0</span>-<span class="hljs-number">1</span>）：<span class="hljs-number">0.5</span><br>模拟比赛场次：<span class="hljs-number">1000</span><br>竞技开始分析，共模拟<span class="hljs-number">1000</span>场比赛<br>选手A获胜<span class="hljs-number">381</span>场比赛，占比<span class="hljs-number">38.1</span>%<br>选手B获胜<span class="hljs-number">619</span>场比赛，占比<span class="hljs-number">61.9</span>%<br></code></pre></div></td></tr></table></figure><p>举一反三</p><p>理解自顶向下和自底向上</p><p>分而治之、模块化集成</p><p>自顶向下是系统思维</p><p>应用问题的扩展</p><p>增加其他能力值</p><p>通过胜率反推能力</p><h3 id="0x2-Python程序设计思维"><a href="#0x2-Python程序设计思维" class="headerlink" title="0x2 Python程序设计思维"></a>0x2 Python程序设计思维</h3><p>###计算思维与程序设计</p><p>计算思维</p><p>第三种人类思维特征</p><p>逻辑思维：推理演绎</p><p>实证思维：实验和验证</p><p>计算思维：设计和构造</p><p>特征</p><p>抽象问题和自动化求解</p><p>天气预报MM5模型，超算计算，进行预测天气</p><p>量化分析 股票</p><p>抽象计算过程，关注设计过程</p><h3 id="计算生态与python语言"><a href="#计算生态与python语言" class="headerlink" title="计算生态与python语言"></a>计算生态与python语言</h3><p>计算生态</p><p>先是科学装置</p><p>后来开源运动GUN</p><p>通用许可协议，自由软件时代到来</p><p>linux内核开源</p><p>网景浏览器开源，商业软件开源</p><p>开源思想深入演化和发展</p><p>没有顶层设计、以功能为单位</p><p>python语言</p><p>大量第三方库</p><p>库有竞争发展压力</p><p>爬虫requests库的简单易用，使过去的库被淘汰</p><p>库之间有广泛联系</p><p>Numpy库底层是C语言编写，接口是python</p><p>社区庞大</p><p>API 不等于 生态，API是由人设计的</p><p>计算生态价值</p><p>加速科技类应用创新的重要支撑</p><p>发展科技产品商业价值的重要模式</p><p>国家科技体系安全和稳固的基础</p><p>编程的起点</p><p>学会站在巨人的肩膀上</p><p>编程的起点不是算法而是系统</p><p>以计算生态为主要运用</p><p>优质计算生态 <a href="http://python123.io/">http://python123.io</a></p><h3 id="用户体验与软件产品"><a href="#用户体验与软件产品" class="headerlink" title="用户体验与软件产品"></a>用户体验与软件产品</h3><p>用户体验值用户对产品建立的主观感受和认识</p><p>提高用户体验的方法</p><p>增加进度展示  在程序需等待时，或者有若干步时、存在大量循环时</p><p>异常处理  判段输入合理性，当读写文件时，当需输入输出时</p><p>打印输出  输出程序过程，使用户了解自己的操作效果</p><h3 id="基本的程序设计模式"><a href="#基本的程序设计模式" class="headerlink" title="基本的程序设计模式"></a>基本的程序设计模式</h3><p>IPO</p><p>确定IPO:明确计算部分及功能边界</p><p>编写程序：将计算求解的计划变成现实</p><p>调试程序：确保程序按照正确逻辑能过正确运行</p><p>自顶向下设计</p><p>模块设计</p><p>主程序和子程序、分治</p><p>紧耦合、松耦合</p><p>配置化设计</p><p>程序引擎 + 数据配置文件</p><p>程序和参数分离，只改变参数，即可</p><p>应用开发</p><p>产品定义、系统架构、设计与实现、用户体验</p><p>定义产品 </p><p>应用需求充分理解和明确定义</p><p>产品定义，而不是功能定义，要考虑商业模式</p><p>系统架构</p><p>以系统方式思考产品的技术实现</p><p>系统架构，关注数据留、模块化、体系架构</p><p>设计与实现</p><p>结合架构完成关键设计及系统实现</p><p>结合可扩展性、灵活性等进行设计优化</p><p>用户体验</p><p>从用户角度思考，改善用户体验</p><h3 id="0x3-Python第三方库安装"><a href="#0x3-Python第三方库安装" class="headerlink" title="0x3 Python第三方库安装"></a>0x3 Python第三方库安装</h3><h4 id="python第三方库获得"><a href="#python第三方库获得" class="headerlink" title="python第三方库获得"></a>python第三方库获得</h4><p>全球第三方库社区 <a href="https://pypi.org/">https://pypi.org/</a></p><p>PyPI ： Python Package Index</p><p>PSF维护的展示全球的Python计算生态的主站</p><p>实例 开发与区块链相关</p><p>搜索 blockchain</p><p>挑选 适合开发目标的第三方库作为基础</p><p>完成 自己需要的功能</p><h4 id="第三方库的安装"><a href="#第三方库的安装" class="headerlink" title="第三方库的安装"></a>第三方库的安装</h4><h4 id="pip安装方法"><a href="#pip安装方法" class="headerlink" title="pip安装方法"></a>pip安装方法</h4><p>使用pip安装工具，最常用</p><p>需联网</p><p>三方平台均可</p><p>cmd 命令行</p><p>常用pip指令</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">pip install -U 第三方库名 <br><span class="hljs-comment">//-使用—U标签更新已安装的指定第三方库</span><br>pip uninstall &lt;第三方库名&gt;<br><span class="hljs-comment">//卸载指定第三方库</span><br>pip dounload &lt;第三方库名&gt;<br><span class="hljs-comment">//下载但不安装指定的第三方库</span><br>pip show &lt;第三方库名&gt;  <br><span class="hljs-comment">//列出某个指定第三方库的详细信息</span><br>pip search &lt;关键词&gt;<br><span class="hljs-comment">//根据关键词在名称和介绍中搜索第三方库</span><br>如 ：pip search blockchain    <br></code></pre></div></td></tr></table></figure><p>出现错误一般与网络环境有关们可以换个网络连接，或者换个时间</p><h4 id="集成安装方法"><a href="#集成安装方法" class="headerlink" title="集成安装方法"></a>集成安装方法</h4><p>Anaconda 开发环境</p><p> https：//<a href="http://www.continuum.io/">www.continuum.io</a></p><p>支持近800个第三方库</p><p>包含多个主流工具</p><p>适合数据计算领域开发</p><h4 id="文件安装方法"><a href="#文件安装方法" class="headerlink" title="文件安装方法"></a>文件安装方法</h4><p>有些第三方库pip下载后，需要编译再安装</p><p>如果没有编译环境则只能下载不能安装</p><p>UCI页面  <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p>编译过的安装包</p><p>下载在指定文件夹后，pip 安装</p><h3 id="0x4-模块-os库的基本使用"><a href="#0x4-模块-os库的基本使用" class="headerlink" title="0x4 模块 os库的基本使用"></a>0x4 模块 os库的基本使用</h3><p>os库的基本介绍</p><p>与操作系统相关</p><p>Python标准函数、几百个函数</p><p>基本功能</p><p>路径操作：os.path子库，处理文件路径及信息</p><p>进程管理：启动系统中其他信息</p><p>环境参数：获得系统软硬件信息等环境参数</p><p>路径操作</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os.path<br>或者<br><span class="hljs-keyword">import</span> os.path <span class="hljs-keyword">as</span> op <span class="hljs-comment">#op 子库设置别名</span><br></code></pre></div></td></tr></table></figure><p><a href="https://imgchr.com/i/yS2yJH"><img src="https://s3.ax1x.com/2021/01/28/yS2yJH.png" alt="yS2yJH.png" border="0" /></a></p><p><a href="https://imgchr.com/i/yS2TYQ"><img src="https://s3.ax1x.com/2021/01/28/yS2TYQ.png" alt="yS2TYQ.png" border="0" /></a></p><p><a href="https://imgchr.com/i/ySRilR"><img src="https://s3.ax1x.com/2021/01/28/ySRilR.png" alt="ySRilR.png" border="0" /></a></p><p><a href="https://imgchr.com/i/ySRJ78"><img src="https://s3.ax1x.com/2021/01/28/ySRJ78.png" alt="ySRJ78.png" border="0" /></a></p><p><a href="https://imgchr.com/i/ySRsBV"><img src="https://s3.ax1x.com/2021/01/28/ySRsBV.png" alt="ySRsBV.png" border="0" /></a></p><p>进程管理</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">os.system(command)<br></code></pre></div></td></tr></table></figure><p>执行程序或命令command</p><p>在windows系统中，返回值为cmd的调用返回信息</p><p>实例 打开计算器程序</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.system(<span class="hljs-string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>返回0，计算器被打开</p><p>环境参数</p><p>获取或改变操作系统中的环境信息</p><p><a href="https://imgchr.com/i/ySfAIO"><img src="https://s3.ax1x.com/2021/01/28/ySfAIO.png" alt="ySfAIO.png" border="0" /></a></p><p><a href="https://imgchr.com/i/ySfFZ6"><img src="https://s3.ax1x.com/2021/01/28/ySfFZ6.png" alt="ySfFZ6.png" border="0" /></a></p><p><a href="https://imgchr.com/i/ySfKsI"><img src="https://s3.ax1x.com/2021/01/28/ySfKsI.png" alt="ySfKsI.png" border="0" /></a></p><h3 id="0x5-实例第三方库安装脚本"><a href="#0x5-实例第三方库安装脚本" class="headerlink" title="0x5 实例第三方库安装脚本"></a>0x5 实例第三方库安装脚本</h3><p>第三方自动安装脚本</p><p>需求  自动执行pip，逐一安装第三方库</p><p>问题假设</p><p>将要安装20个第三方库</p><p><a href="https://imgchr.com/i/yShPpQ"><img src="https://s3.ax1x.com/2021/01/28/yShPpQ.png" alt="yShPpQ.png" border="0" /></a></p><p><a href="https://imgchr.com/i/yShmkT"><img src="https://s3.ax1x.com/2021/01/28/yShmkT.png" alt="yShmkT.png" border="0" /></a></p><p><a href="https://imgchr.com/i/yShMp4"><img src="https://s3.ax1x.com/2021/01/28/yShMp4.png" alt="yShMp4.png" border="0" /></a></p><p><a href="https://imgchr.com/i/yShw1H"><img src="https://s3.ax1x.com/2021/01/28/yShw1H.png" alt="yShw1H.png" border="0" /></a></p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>libs = &#123;<span class="hljs-string">&quot;numpy&quot;</span>,<span class="hljs-string">&quot;matplotlib&quot;</span>,<span class="hljs-string">&quot;pillow&quot;</span>,<span class="hljs-string">&quot;sklearn&quot;</span>,<span class="hljs-string">&quot;requests&quot;</span>,\<br>        <span class="hljs-string">&quot;jieba&quot;</span>,<span class="hljs-string">&quot;beautifulsoup4&quot;</span>,<span class="hljs-string">&quot;wheel&quot;</span>,<span class="hljs-string">&quot;networkx&quot;</span>,<span class="hljs-string">&quot;sympy&quot;</span>,\<br>        <span class="hljs-string">&quot;pyinstaller&quot;</span>,<span class="hljs-string">&quot;django&quot;</span>,<span class="hljs-string">&quot;flask&quot;</span>,<span class="hljs-string">&quot;werobot&quot;</span>,<span class="hljs-string">&quot;pyqt5&quot;</span>,<br>        <span class="hljs-string">&quot;pandas&quot;</span>,<span class="hljs-string">&quot;pypopengl&quot;</span>,<span class="hljs-string">&quot;pypdf2&quot;</span>,<span class="hljs-string">&quot;docopt&quot;</span>,<span class="hljs-string">&quot;pygame&quot;</span>&#125;<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">for</span> lib <span class="hljs-keyword">in</span> libs:<br>        os.system(<span class="hljs-string">&quot;pip install&quot;</span> +<span class="hljs-string">&quot; &quot;</span>+ lib)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Successful&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed Somehow&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>举一反三</p><p>自动化脚本 +</p><p>编写各类自动执行程序的脚本</p><p>扩展应用为引擎配置文件</p><p>识别失败信息</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（四）Python程序控制结构</title>
    <link href="/2021/10/02/Python%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%8C%96%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/10/02/Python%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%8C%96%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="程序控制结构"><a href="#程序控制结构" class="headerlink" title="程序控制结构"></a>程序控制结构</h2><h3 id="0x1-程序的分支结构"><a href="#0x1-程序的分支结构" class="headerlink" title="0x1 程序的分支结构"></a>0x1 程序的分支结构</h3><h4 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> &lt;条件&gt;:<br>    &lt;语句块&gt;<br></code></pre></div></td></tr></table></figure><h4 id="二分支结构"><a href="#二分支结构" class="headerlink" title="二分支结构"></a>二分支结构</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> &lt;条件&gt;:<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;<br>    <br><span class="hljs-comment">#示例：    </span><br>guess = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> guess == <span class="hljs-number">99</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜&#123;&#125;了&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;对&quot;</span>))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜&#123;&#125;了&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;错&quot;</span>))<br>    <br><span class="hljs-comment">#紧凑形式：</span><br>&lt;表达式<span class="hljs-number">1</span>&gt; <span class="hljs-keyword">if</span> &lt;条件&gt; <span class="hljs-keyword">else</span> &lt;表达式<span class="hljs-number">2</span>&gt;<br><br>guess = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;猜&#123;&#125;了&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;对&quot;</span> <span class="hljs-keyword">if</span> guess == <span class="hljs-number">99</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;错&quot;</span>))<br></code></pre></div></td></tr></table></figure><p>==紧凑形式中，if，else所对应的不是语句，而是表达式，不能赋值，只能放在类似上述的执行语句中==</p><h4 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> &lt;条件&gt; :<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">elif</span>:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;语句块<span class="hljs-number">3</span>&gt;<br></code></pre></div></td></tr></table></figure><p>条件判断操作符与C相同</p><h4 id="逻辑保留字"><a href="#逻辑保留字" class="headerlink" title="逻辑保留字"></a>逻辑保留字</h4><p> and（&amp;&amp;）、or（||）、not（！）</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> A &gt; B <span class="hljs-keyword">or</span> B &lt; A :<br>    &lt;执行语句&gt;<br></code></pre></div></td></tr></table></figure><h3 id="0x2-程序的异常处理"><a href="#0x2-程序的异常处理" class="headerlink" title="0x2 程序的异常处理"></a>0x2 程序的异常处理</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">abc = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入数字&quot;</span>))<br><span class="hljs-built_in">print</span>(num**<span class="hljs-number">2</span>)<br>请输入数字<span class="hljs-number">0.2</span><br><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;E:\python_item\text1.py&quot;</span>, line <span class="hljs-number">2</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-built_in">print</span>(num**<span class="hljs-number">2</span>)<br>NameError: name <span class="hljs-string">&#x27;num&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br></code></pre></div></td></tr></table></figure><p>NameError 是python内部预定义的错误名称，可以作为错误类型进行判断</p><p>类似的python内部有许多错误名称，都可以用来判断</p><h4 id="异常处理的基本使用"><a href="#异常处理的基本使用" class="headerlink" title="异常处理的基本使用"></a>异常处理的基本使用</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#执行出错执行下方操作</span><br><span class="hljs-keyword">try</span>:<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">except</span>:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;  <br>    <br><span class="hljs-comment">#判断是否属于某种错误，该错误再执行下方操作</span><br><span class="hljs-keyword">try</span>:<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">except</span> &lt;异常名称&gt;:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;<br>    <br><span class="hljs-comment">#异常处理的高级使用</span><br><span class="hljs-keyword">try</span>:<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">except</span>:          <span class="hljs-comment">#发生异常时执行</span><br>    &lt;语句块<span class="hljs-number">2</span>&gt;  <br><span class="hljs-keyword">else</span>:            <span class="hljs-comment">#不发生异常时执行</span><br>    &lt;语句块<span class="hljs-number">3</span>&gt;<br><span class="hljs-keyword">finally</span>:         <span class="hljs-comment">#finally对应语句块4一定执行</span><br>    &lt;语句块<span class="hljs-number">4</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="0x3-身体质量指数BMI"><a href="#0x3-身体质量指数BMI" class="headerlink" title="0x3 身体质量指数BMI"></a>0x3 身体质量指数BMI</h3><h4 id="问题分析：body-Mass-index"><a href="#问题分析：body-Mass-index" class="headerlink" title="问题分析：body Mass index"></a>问题分析：body Mass index</h4><p>定义：BMI = 体重(kg)/身高^2 (m^2)</p><p>国际标准：世界卫生组织  国内：国家卫生健康委员会</p><table><thead><tr><th align="center">分类</th><th align="center">国际BMI（kg/m^2）</th><th align="center">国内BMI值（kg/m^2）</th></tr></thead><tbody><tr><td align="center">偏瘦</td><td align="center">&lt; 18.5</td><td align="center">&lt; 18.5</td></tr><tr><td align="center">正常</td><td align="center">18.5~25</td><td align="center">18.5~24</td></tr><tr><td align="center">偏胖</td><td align="center">25~30</td><td align="center">24~28</td></tr><tr><td align="center">肥胖</td><td align="center">≥30</td><td align="center">≥28</td></tr></tbody></table><h4 id="问题需求：输入体重和身高值"><a href="#问题需求：输入体重和身高值" class="headerlink" title="问题需求：输入体重和身高值"></a>问题需求：输入体重和身高值</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#CalBMIv1.py</span><br>height,weight = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入身高(米)和体重\(公斤)[逗号隔开]&quot;</span>))<br>bmi = weight / <span class="hljs-built_in">pow</span>(height,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BMI 数值为:&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(bmi))<br>who = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> bmi &lt; <span class="hljs-number">18.5</span>:<br>    who = <span class="hljs-string">&quot;偏瘦&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">18.5</span> &lt;= bmi &lt;<span class="hljs-number">25</span> :<br>    who = <span class="hljs-string">&quot;正常&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">25</span> &lt;= bmi &lt; <span class="hljs-number">30</span>:<br>    who = <span class="hljs-string">&quot;偏胖&quot;</span><br><span class="hljs-keyword">else</span>:<br>    who = <span class="hljs-string">&quot;肥胖&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BMI 指标为：国际&#x27;&#123;0&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(who))<br><br><span class="hljs-comment">#输出：</span><br>请输入身高(米)和体重\(公斤)[逗号隔开]<span class="hljs-number">1.8</span>,<span class="hljs-number">73</span><br>BMI 数值为:<span class="hljs-number">22.53</span><br>BMI 指标为：国际<span class="hljs-string">&#x27;正常&#x27;</span><br><br><span class="hljs-comment">#CalBMIv2.py</span><br>height,weight = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入身高(米)和体重\(公斤)[逗号隔开]&quot;</span>))<br>bmi = weight / <span class="hljs-built_in">pow</span>(height,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BMI 数值为:&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(bmi))<br>who,nat = <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> bmi &lt; <span class="hljs-number">18.5</span>:<br>    who,nat = <span class="hljs-string">&quot;偏瘦&quot;</span>,<span class="hljs-string">&quot;偏瘦&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">18.5</span> &lt;= bmi &lt;<span class="hljs-number">24</span> :<br>    who,nat= <span class="hljs-string">&quot;正常&quot;</span>,<span class="hljs-string">&quot;正常&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">24</span> &lt;= bmi &lt; <span class="hljs-number">25</span>:<br>    who,nat= <span class="hljs-string">&quot;正常&quot;</span>,<span class="hljs-string">&quot;偏胖&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">25</span> &lt;= bmi &lt; <span class="hljs-number">28</span>:<br>    who,nat= <span class="hljs-string">&quot;偏胖&quot;</span>, <span class="hljs-string">&quot;偏胖&quot;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-number">28</span> &lt;= bmi &lt; <span class="hljs-number">30</span>:<br>    who,nat= <span class="hljs-string">&quot;偏胖&quot;</span>,<span class="hljs-string">&quot;肥胖&quot;</span><br><span class="hljs-keyword">else</span>:<br>    who,nat= <span class="hljs-string">&quot;肥胖&quot;</span>,<span class="hljs-string">&quot;肥胖&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BMI 指标为：国际&#x27;&#123;0&#125;&#x27;,国内&#x27;&#123;1&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(who,nat))<br><br><span class="hljs-comment">#输出：</span><br>请输入身高(米)和体重\(公斤)[逗号隔开]<span class="hljs-number">1.8</span>,<span class="hljs-number">73</span><br>BMI 数值为:<span class="hljs-number">22.53</span><br>BMI 指标为：国际<span class="hljs-string">&#x27;正常&#x27;</span>,国内<span class="hljs-string">&#x27;正常&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="多分支组合注意"><a href="#多分支组合注意" class="headerlink" title="多分支组合注意"></a>多分支组合注意</h4><p>多分支条件之间的覆盖要分析清除</p><p>程序可运行，但不正确要注意多分支</p><p>阅读代码时，先看分支</p><h3 id="0x4-程序的循环结构"><a href="#0x4-程序的循环结构" class="headerlink" title="0x4 程序的循环结构"></a>0x4 程序的循环结构</h3><h4 id="for遍历"><a href="#for遍历" class="headerlink" title="for遍历"></a>for遍历</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> &lt;循环变量&gt; <span class="hljs-keyword">in</span> &lt;遍历结构&gt;:<br>    &lt;语句块&gt;<br>    <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):  <span class="hljs-comment"># range(N)产生数字序列，包含N个元素 0 到 N-1.</span><br>    &lt;语句块&gt;<br>    <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(M,N,K):  <span class="hljs-comment">#产生以M开始不到N的以K为步长取数的序列</span><br>    <br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s :  <span class="hljs-comment">#字符串遍历，s是字符串，取出s中每个字符到循环变量中，执行语句</span><br>    <br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ls :  <span class="hljs-comment">#对列表进行遍历，取出每个列表元素遍历  [123,&quot;PY&quot;,456]</span><br>    <br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fi :  <span class="hljs-comment">#文件遍历循环，fi文件标识符，遍历文件每一行，</span><br>    <span class="hljs-built_in">print</span>(line)   <span class="hljs-comment">#打印每行</span><br></code></pre></div></td></tr></table></figure><p>还可以对元组等遍历循环，只要是多个元素组成的数据结构，都可以用for in 遍历</p><p>逐一从遍历结构中提取元素到循环变量中，然后执行语句块</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">while</span> &lt;条件判断&gt; :<br>    &lt;语句块&gt;<br></code></pre></div></td></tr></table></figure><h4 id="循环控制保留字"><a href="#循环控制保留字" class="headerlink" title="循环控制保留字"></a>循环控制保留字</h4><p>break 和 continue 与 C 含义相同</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;PYTHON&quot;</span> :<br>    <span class="hljs-keyword">if</span> c ==<span class="hljs-string">&quot;T&quot;</span>:<br>        <span class="hljs-keyword">break</span>  <span class="hljs-comment">#或者写continue</span><br>    <span class="hljs-built_in">print</span>(c , end =<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="循环高级用法"><a href="#循环高级用法" class="headerlink" title="循环高级用法"></a>循环高级用法</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#else没有被break退出时，循环正常完成，则执行else语句</span><br><span class="hljs-comment">#for循环加else</span><br><span class="hljs-keyword">for</span> &lt;循环变量&gt; <span class="hljs-keyword">in</span> &lt;遍历结构&gt; :<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;<br>    <br><span class="hljs-comment">#while循环加else</span><br><span class="hljs-keyword">while</span> &lt;条件&gt; ：<br>    &lt;语句块<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">else</span>:<br>    &lt;语句块<span class="hljs-number">2</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="0x5-random库使用"><a href="#0x5-random库使用" class="headerlink" title="0x5 random库使用"></a>0x5 random库使用</h3><h4 id="random库介绍"><a href="#random库介绍" class="headerlink" title="random库介绍"></a>random库介绍</h4><p>random库时使用随机数的python标准库，主要用于生成随机数</p><p>伪随机数：采用==梅森旋转算法==生成的伪随机序列中元素</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>基本随机数函数：seed(),random()<br>扩展随机数函数:randint(),getrandbits(),uniform(),randrange(),choice(),shuffle()<br></code></pre></div></td></tr></table></figure><h4 id="基本随机数函数"><a href="#基本随机数函数" class="headerlink" title="基本随机数函数"></a>基本随机数函数</h4><p>随机数种子：用来通过==梅森旋转算法==产生随机序列，随机序列中的数就是随机数</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">seed(a = None)</td><td align="center">初始化给定的随机数种子，默认为当前系统时间(精确到微妙)</td></tr><tr><td align="center">random()</td><td align="center">生成一个[0.0 ,1.0)之间的随机小数</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> random<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.seed(<span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.random()<br><span class="hljs-number">0.13436424411240122</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.random()<br><span class="hljs-number">0.8474337369372327</span><br><span class="hljs-comment">#设定seed(10),在不同设备上产生的随机数时一致的，为了再现随机程序，再次设定后调用产生的随机数结果也是一样的</span><br></code></pre></div></td></tr></table></figure><h4 id="扩展随机数函数"><a href="#扩展随机数函数" class="headerlink" title="扩展随机数函数"></a>扩展随机数函数</h4><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>randint(a,b)</td><td>生成一个[a,b]之间的随机整数</td></tr><tr><td>randrange(m,n[,k])</td><td>生成一个[m,n]之间以k为步长的随机整数</td></tr><tr><td>getrandbits(k)</td><td>生成一个k比特长度随机整数</td></tr><tr><td>uniform(a,b)</td><td>生成一个[a,b]之间的随机小数，16位精度</td></tr><tr><td>choice(seq)</td><td>从序列seq中随机选择一个元素</td></tr><tr><td>shuffle(seq)</td><td>将序列seq中元素随机排列，返回打乱后的序列</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)<br><span class="hljs-number">98</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.randrange(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>,<span class="hljs-number">10</span>)<br><span class="hljs-number">40</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.getrandbits(<span class="hljs-number">8</span>)<br><span class="hljs-number">126</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.getrandbits(<span class="hljs-number">32</span>)<br><span class="hljs-number">3268308804</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.uniform(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br><span class="hljs-number">5.045419583098643</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.choice(s)<br><span class="hljs-number">7</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.shuffle(s)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s)<br>[<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.shuffle(s)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(s)<br>[<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> random;s=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];random.shuffle(s);<span class="hljs-built_in">print</span>(s)  <span class="hljs-comment">#可以用分号；将语句放到一行</span><br>[<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br></code></pre></div></td></tr></table></figure><h3 id="0x6-实例-圆周率计算"><a href="#0x6-实例-圆周率计算" class="headerlink" title="0x6 实例 圆周率计算"></a>0x6 实例 圆周率计算</h3><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>圆周率的近似计算公式</p><p> 无限求和公式</p><p>$\pi = \sum_{k = 0}^{\infty }[\frac{1}{16^{k}}\left ( \frac{4}{8k+1} -\frac{2}{8k+4}-\frac{1}{8k+5}-\frac{1}{8k+6}\right )]$</p><p>蒙特卡罗方法</p><p>对正方形随机撒点，撒点数量的比值</p><p><a href="https://imgchr.com/i/s3tylj"><img src="https://s3.ax1x.com/2021/01/11/s3tylj.png" alt="s3tylj.png"></a></p><h4 id="公式法"><a href="#公式法" class="headerlink" title="公式法"></a>公式法</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#CalPiv1.py</span><br>pi = <span class="hljs-number">0</span><br>N = <span class="hljs-number">100</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    pi += <span class="hljs-number">1</span>/<span class="hljs-built_in">pow</span>(<span class="hljs-number">16</span>,k)*( \         <span class="hljs-comment">#  \ 可用于换行，不影响程序运行可以多次使用，提高可读性</span><br>       <span class="hljs-number">4</span>/(<span class="hljs-number">8</span>*k +<span class="hljs-number">1</span>) - <span class="hljs-number">2</span>/(<span class="hljs-number">8</span>*k +<span class="hljs-number">4</span>) - \<br>       <span class="hljs-number">1</span>/(<span class="hljs-number">8</span>*k +<span class="hljs-number">5</span>) - <span class="hljs-number">1</span>/(<span class="hljs-number">8</span>*k+<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆周率值是：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(pi))<br><br>输出：<br>圆周率值是：<span class="hljs-number">3.141592653589793</span><br></code></pre></div></td></tr></table></figure><h4 id="蒙特卡罗法"><a href="#蒙特卡罗法" class="headerlink" title="蒙特卡罗法"></a>蒙特卡罗法</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#CalPiv1.py</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> perf_counter<br>DARTS = <span class="hljs-number">10000</span>*<span class="hljs-number">10000</span><br>hits = <span class="hljs-number">0.0</span><br>start = perf_counter()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,DARTS+<span class="hljs-number">1</span>):<br>    x,y = random(),random()<br>    dist = <span class="hljs-built_in">pow</span>(x**<span class="hljs-number">2</span>+y**<span class="hljs-number">2</span>,<span class="hljs-number">0.5</span>)<br>    <span class="hljs-keyword">if</span> dist &lt;= <span class="hljs-number">1.0</span>:<br>        hits = hits + <span class="hljs-number">1</span><br>pi = <span class="hljs-number">4</span> *(hits/DARTS)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆周率值是：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(pi))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;运行时间是：&#123;:.5f&#125;s&quot;</span>.<span class="hljs-built_in">format</span>(perf_counter()-start))<br><br>圆周率值是：<span class="hljs-number">3.143908</span><br>运行时间是：<span class="hljs-number">0.71663</span>s<br><br>圆周率值是：<span class="hljs-number">3.14156908</span><br>运行时间是：<span class="hljs-number">59.99088</span>s<br></code></pre></div></td></tr></table></figure><h4 id="理解方法思维"><a href="#理解方法思维" class="headerlink" title="理解方法思维"></a>理解方法思维</h4><p>数学思维</p><p>计算思维</p><p>四色定理</p><ul><li><p>程序运行时间分析</p><p>程序运行80%的时间消耗在不到10%的循环代码上</p><p>用于求解某个特定图形的面积</p></li></ul><h2 id="函数和代码复用"><a href="#函数和代码复用" class="headerlink" title="函数和代码复用"></a>函数和代码复用</h2><h3 id="0x1-函数的定义及使用"><a href="#0x1-函数的定义及使用" class="headerlink" title="0x1 函数的定义及使用"></a>0x1 函数的定义及使用</h3><h4 id="函数的理解与定义"><a href="#函数的理解与定义" class="headerlink" title="函数的理解与定义"></a>函数的理解与定义</h4><p>是一种抽象</p><p>定义的时候可以没有参数，但必须有括号</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> &lt;函数名&gt;(<span class="hljs-params">参数</span>)：</span><br><span class="hljs-function">    &lt;函数体&gt;</span><br><span class="hljs-function">    <span class="hljs-title">return</span> &lt;返回值&gt;</span><br><span class="hljs-function"></span><br><span class="hljs-function">示例：</span><br><span class="hljs-function"><span class="hljs-title">def</span> <span class="hljs-title">dayUP</span>(<span class="hljs-params">df</span>):</span>      <span class="hljs-comment">#函数dayUP</span><br>    dayup = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">365</span>):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">7</span> <span class="hljs-keyword">in</span>[<span class="hljs-number">6</span>,<span class="hljs-number">0</span>]:<br>            dayup = dayup*(<span class="hljs-number">1</span> - <span class="hljs-number">0.01</span>)<br>        <span class="hljs-keyword">else</span>:<br>            dayup = dayup * (<span class="hljs-number">1</span> + df)<br>    <span class="hljs-keyword">return</span> dayup<br></code></pre></div></td></tr></table></figure><h4 id="函数的使用及调用过程"><a href="#函数的使用及调用过程" class="headerlink" title="函数的使用及调用过程"></a>函数的使用及调用过程</h4><p>函数调用是，用实际值替换函数中参数</p><h4 id="函数的参数传递"><a href="#函数的参数传递" class="headerlink" title="函数的参数传递"></a>函数的参数传递</h4><p>可选参数传递</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#调用参数时，必须有必选参数。可选参数可以没有，如果没有，则使用定义的默认值</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> &lt;函数体&gt;(<span class="hljs-params">&lt;必选参数&gt;，&lt;可选参数&gt;</span>):</span><br>    &lt;函数体&gt;<br>    <span class="hljs-keyword">return</span> &lt;返回值&gt;<br><br>示例：<br><span class="hljs-comment">#1</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n,m=<span class="hljs-number">1</span></span>):</span><br>    s = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">return</span> s//m<br><span class="hljs-built_in">print</span>(fact(<span class="hljs-number">10</span>))<br><span class="hljs-number">3628800</span><br><br><span class="hljs-comment">#2计算n的阶乘，m = 1是默认的参数，不给指定参数则默认为1</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n,m=<span class="hljs-number">1</span></span>):</span>  <br>    s = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">return</span> s//m<br><span class="hljs-built_in">print</span>(fact(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>))<br><span class="hljs-number">725760</span><br></code></pre></div></td></tr></table></figure><p>可变参数传递</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#多个可变参数调用</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n,*b</span>):</span>  <span class="hljs-comment"># *b表示可变参数</span><br>    s = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> b :    <span class="hljs-comment">#如果b是一个列表， in b 将依次调用 b 中的值赋给item</span><br>        s *= item<br>    <span class="hljs-keyword">return</span> s<br><br>示例：n！乘数<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n,*b</span>):</span>  <span class="hljs-comment"># *b表示可变参数</span><br>    s = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> b :    <span class="hljs-comment">#如果b是一个列表， in b 将依次调用 b 中的值赋给item</span><br>        s *= item<br>    <span class="hljs-keyword">return</span> s<br>    <br><span class="hljs-built_in">print</span>(fact(<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>))<br><span class="hljs-built_in">print</span>(fact(<span class="hljs-number">13</span>))<br><br><span class="hljs-number">6227020800</span><br><span class="hljs-number">6227020800</span><br></code></pre></div></td></tr></table></figure><p>函数调用时，参数可以按照位置或名称方式传递(代表地址)</p><p>位置传递</p><p>名称传递</p><p><a href="https://imgchr.com/i/sgnAs0"><img src="https://s3.ax1x.com/2021/01/19/sgnAs0.png" alt="sgnAs0.png"></a></p><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><p>return，和c类似，不一定有返回值，或者传多个</p><p>但是返回的语法不同</p><p><a href="https://imgchr.com/i/sgntoD"><img src="https://s3.ax1x.com/2021/01/19/sgntoD.png" alt="sgntoD.png"></a></p><p>多个返回的是 元组数据类型</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n,m=<span class="hljs-number">1</span></span>) :</span><br>s = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>s *= i<br><span class="hljs-keyword">return</span> s//m,n,m<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a,b,c = fact(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment">#元组类型赋值，输出</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a,b,c)<br><span class="hljs-number">725760</span> <span class="hljs-number">10</span> <span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></div></td></tr></table></figure><h4 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h4><p>函数定义，就属于全局变量</p><h5 id="规则1-局部变量与全局变量不同"><a href="#规则1-局部变量与全局变量不同" class="headerlink" title="规则1 局部变量与全局变量不同"></a>规则1 局部变量与全局变量不同</h5><p>函数定义的函数体中的是局部变量</p><p>函数运算结束后，局部变量会释放</p><p>函数内部的局部变量可以可以和外部的变量重名，但不同</p><p> ==全局变量的函数调用==</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#使用 global 保留字在函数内部使用全局变量</span><br>n,s = <span class="hljs-number">10</span> , <span class="hljs-number">100</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n</span>):</span><br>    s = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">return</span> s<br><span class="hljs-built_in">print</span>(fact(n),s)   <span class="hljs-comment">#此处s 是全局变量s</span><br><br>——————————————————————————————————————————<br><br>n,s = <span class="hljs-number">10</span> , <span class="hljs-number">100</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">global</span> s  <span class="hljs-comment">#此处表示使用的是全局变量S </span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        s *= i<br>    <span class="hljs-keyword">return</span> s  <span class="hljs-comment">#此处是指全局变量s的运算结果</span><br><span class="hljs-built_in">print</span>(fact(n),s)   <span class="hljs-comment">#此处s 是全局变量s，但是被函数运算修改了</span><br></code></pre></div></td></tr></table></figure><h5 id="规则2"><a href="#规则2" class="headerlink" title="规则2"></a>规则2</h5><p>局部变量为组合数据类型且在函数内部未创建时，且它的名字和全局变量同名，则该函数内部的变量等同于全局变量，即全局变量会发生改变</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#ls在函数内部为全局变量</span><br><br>ls = [<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>]  <span class="hljs-comment">#通过使用[]“真实&quot;创建了一个全局变量列表ls</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">a</span>) :</span><br>    ls.append(a)   <span class="hljs-comment">#此处ls是列表类型，未真实创建则等同于全局变量</span><br>    <span class="hljs-keyword">return</span><br>fun(<span class="hljs-string">&quot;C&quot;</span>)     <span class="hljs-comment">#全局变量ls被修改</span><br><span class="hljs-built_in">print</span>(ls)<br><br>运行结果<br>[<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>]<br><br>-------------------------------<br><span class="hljs-comment">#ls在函数内部为局部变量</span><br><br>ls = [<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>]  <span class="hljs-comment">#通过使用[]“真实&quot;创建了一个全局变量列表ls</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">a</span>) :</span><br>    ls = []        <span class="hljs-comment">#此处在函数内部被真实创建，此时则为局部变量</span><br>    ls.append(a)   <span class="hljs-comment">#此处ls是列表类型</span><br>    <span class="hljs-keyword">return</span><br>fun(<span class="hljs-string">&quot;C&quot;</span>) <br><span class="hljs-built_in">print</span>(ls)<br><br>运行结果<br>[<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>]<br><br></code></pre></div></td></tr></table></figure><p>此处组合数据类型与C语言中的指针相对应，如果在函数内部没有创建，则以指针的方式调用外部变量</p><p>规则总结</p><p>基本数据类型，无论是否重名，局部变量与全局变量不同，可以通过global保留字在函数内部声明全局变量</p><p>组合数据类型，如果局部百年来未真实创建，则是全局变量</p><h4 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h4><p>返回一个函数名，是一种匿名函数</p><p>用于定义简单的、能够在一行内表示的函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&lt;函数名&gt; = <span class="hljs-keyword">lambda</span> &lt;参数&gt;:&lt;表达式&gt;<br></code></pre></div></td></tr></table></figure><p>等价于def，区别是，内容只能是表达式，不能是函数体</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>f = <span class="hljs-keyword">lambda</span> x,y: x+y<br><span class="hljs-meta">&gt;&gt;&gt; </span>f(<span class="hljs-number">10</span>,<span class="hljs-number">15</span>)<br><span class="hljs-number">25</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>f = <span class="hljs-keyword">lambda</span> : <span class="hljs-string">&quot;lambda函数&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(f())<br><span class="hljs-keyword">lambda</span>函数<br></code></pre></div></td></tr></table></figure><p>建议使用def定义函数，特殊情况使用lambda</p><h3 id="0x2-实例七段数码管绘制"><a href="#0x2-实例七段数码管绘制" class="headerlink" title="0x2 实例七段数码管绘制"></a>0x2 实例七段数码管绘制</h3><h4 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h4><p>七段不同的数码管的亮暗，可以显示数字，字母</p><p>用程序绘制七段数码管</p><p>效果</p><p><a href="https://imgchr.com/i/s2pROJ"><img src="https://s3.ax1x.com/2021/01/19/s2pROJ.png" alt="s2pROJ.png"></a></p><h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><p>绘制单个数字，对应数码管</p><p>获得一串数字，一一表示</p><p>获得系统时间，表示出来</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>第一步，绘制单个数字，对应数码管</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawLine</span>(<span class="hljs-params">draw</span>):</span>  <span class="hljs-comment">#单段数码管，函数绘制一条线，并且判断该线是越过还是画</span><br>    turtle.pendown()<span class="hljs-keyword">if</span> draw <span class="hljs-keyword">else</span> turtle.penup()<br>    turtle.fd(<span class="hljs-number">40</span>)<br>    turtle.right(<span class="hljs-number">90</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDight</span>(<span class="hljs-params">digit</span>):</span> <span class="hljs-comment">#根据数字绘制七段数码管</span><br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">90</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">180</span>)<br>    turtle.penup()  <span class="hljs-comment">#为绘制后续数字确定位置</span><br>    turtle.fd(<span class="hljs-number">20</span>)   <span class="hljs-comment">#为绘制后续数字确定位置</span><br></code></pre></div></td></tr></table></figure><p>第二步，获得一串数字，一一表示</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDate</span>(<span class="hljs-params">date</span>):</span>  <span class="hljs-comment">#获得要输出的数字</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> date: <br>        drawDight(<span class="hljs-built_in">eval</span>(i))  <span class="hljs-comment">#通过eval()函数将数字变成整数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>    turtle.penup()<br>    turtle.fd(-<span class="hljs-number">300</span>)<br>    turtle.pensize(<span class="hljs-number">5</span>)<br>    drawDate(<span class="hljs-string">&#x27;20181010&#x27;</span>)<br>    turtle.hideturtle()<br>    turtle.done()<br>main()<br></code></pre></div></td></tr></table></figure><p>第三步，获得系统时间，表示出来</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><span class="hljs-keyword">import</span> time<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawLine</span>(<span class="hljs-params">draw</span>):</span>  <span class="hljs-comment">#单段数码管，函数绘制一条线，并且判断该线是越过还是画</span><br>    turtle.pendown()<span class="hljs-keyword">if</span> draw <span class="hljs-keyword">else</span> turtle.penup()<br>    turtle.fd(<span class="hljs-number">40</span>)<br>    turtle.right(<span class="hljs-number">90</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDight</span>(<span class="hljs-params">digit</span>):</span> <span class="hljs-comment">#根据数字绘制七段数码管</span><br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">90</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">180</span>)<br>    turtle.penup()  <span class="hljs-comment">#为绘制后续数字确定位置</span><br>    turtle.fd(<span class="hljs-number">20</span>)   <span class="hljs-comment">#为绘制后续数字确定位置</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDate</span>(<span class="hljs-params">date</span>):</span>  <span class="hljs-comment">#获得要输出的数字</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> date: <br>        drawDight(<span class="hljs-built_in">eval</span>(i))  <span class="hljs-comment">#通过eval()函数将数字变成整数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>    turtle.penup()<br>    turtle.fd(-<span class="hljs-number">300</span>)<br>    turtle.pensize(<span class="hljs-number">5</span>)<br>    drawDate(time.strftime(<span class="hljs-string">&quot;%H%M%S&quot;</span>))<br>    turtle.hideturtle()<br>    turtle.done()<br>main()<br></code></pre></div></td></tr></table></figure><h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p>增加绘制间的距离</p><p>增加绘制年月日</p><p>获取时间</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><span class="hljs-keyword">import</span> time<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawGap</span>():</span><br>    turtle.penup()<br>    turtle.fd(<span class="hljs-number">5</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawLine</span>(<span class="hljs-params">draw</span>):</span>  <span class="hljs-comment">#单段数码管，函数绘制一条线，并且判断该线是越过还是画</span><br>    drawGap()<br>    turtle.pendown()<span class="hljs-keyword">if</span> draw <span class="hljs-keyword">else</span> turtle.penup()<br>    turtle.fd(<span class="hljs-number">40</span>)<br>    drawGap()<br>    turtle.right(<span class="hljs-number">90</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDight</span>(<span class="hljs-params">digit</span>):</span> <span class="hljs-comment">#根据数字绘制七段数码管</span><br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">90</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    drawLine(<span class="hljs-literal">True</span>) <span class="hljs-keyword">if</span> digit <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>] <span class="hljs-keyword">else</span> drawLine(<span class="hljs-literal">False</span>)<br>    turtle.left(<span class="hljs-number">180</span>)<br>    turtle.penup()  <span class="hljs-comment">#为绘制后续数字确定位置</span><br>    turtle.fd(<span class="hljs-number">20</span>)   <span class="hljs-comment">#为绘制后续数字确定位置</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drawDate</span>(<span class="hljs-params">date</span>):</span>  <span class="hljs-comment">#改获得日期格式为，&#x27;%Y-%m=%d+&#x27;,判断符号进行替换</span><br>    turtle.pencolor(<span class="hljs-string">&quot;red&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> date: <br>        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;-&#x27;</span>:<br>            turtle.write(<span class="hljs-string">&#x27;年&#x27;</span>,font=(<span class="hljs-string">&quot;Arial&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-string">&quot;normal&quot;</span>))<br>            turtle.pencolor(<span class="hljs-string">&quot;green&quot;</span>)<br>            turtle.fd(<span class="hljs-number">40</span>)<br>        <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;=&#x27;</span> :<br>            turtle.write(<span class="hljs-string">&#x27;月&#x27;</span>,font=(<span class="hljs-string">&quot;Arial&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-string">&quot;normal&quot;</span>))<br>            turtle.pencolor(<span class="hljs-string">&quot;blue&quot;</span>)<br>            turtle.fd(<span class="hljs-number">40</span>)<br>        <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;+&#x27;</span> :<br>            turtle.write(<span class="hljs-string">&#x27;日&#x27;</span>,font=(<span class="hljs-string">&quot;Arial&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-string">&quot;normal&quot;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            drawDight(<span class="hljs-built_in">eval</span>(i))  <span class="hljs-comment">#通过eval()函数将数字变成整数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>    turtle.penup()<br>    turtle.fd(-<span class="hljs-number">300</span>)<br>    turtle.pensize(<span class="hljs-number">5</span>)<br>    drawDate(time.strftime(<span class="hljs-string">&#x27;%Y-%m=%d+&#x27;</span>,time.gmtime()))<br>    turtle.hideturtle()<br>    turtle.done()<br>main()    <br></code></pre></div></td></tr></table></figure><h4 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h4><p>理解模块化方法思维：确定模块接口，封装功能</p><p>规则化思维：抽象过程为规则，</p><p>化繁为简：分治</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>到小数点</p><p>倒计时时刷新</p><p>14段的数码管</p><p>数码管有更多段</p><h3 id="0x3-代码复用与函数递归"><a href="#0x3-代码复用与函数递归" class="headerlink" title="0x3 代码复用与函数递归"></a>0x3 代码复用与函数递归</h3><h4 id="代码复用与模块化设计"><a href="#代码复用与模块化设计" class="headerlink" title="代码复用与模块化设计"></a>代码复用与模块化设计</h4><p>代码资源化：程序代码是一种用来表达计算的”资源“</p><p>代码抽象化：使用函数等方法对代码赋予更高级别的定义</p><p>代码复用：函数和对象</p><p>函数：将代码命名，在代码层面建立了初步抽象</p><p>对象：属性和方法，在函数之上再次组织进行抽象</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&lt;a&gt;.&lt;b&gt; 和 &lt;a&gt;.&lt;b&gt;()<br></code></pre></div></td></tr></table></figure><h4 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h4><p>通过函数或对象分装将程序划分为模块及模块间的表达</p><p>具体包括：主程序、子程序、和子程序的关系</p><p>紧耦合 交流多无法独立</p><p>松耦合 交流少可以独立</p><p>函数内部要紧耦合，模块之间要松耦合</p><p>函数递归的理解</p><p>函数中调用自身</p><h4 id="函数递归的调用过程"><a href="#函数递归的调用过程" class="headerlink" title="函数递归的调用过程"></a>函数递归的调用过程</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-keyword">return</span> n*fact(n-<span class="hljs-number">1</span>)<br>fact(<span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><h4 id="函数递归实例解析"><a href="#函数递归实例解析" class="headerlink" title="函数递归实例解析"></a>函数递归实例解析</h4><h5 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h5><p>将字符串s反转后输出</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">s[::-<span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><p>函数 +分支结构</p><p>递归链条</p><p>递归基例</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rvs</span>(<span class="hljs-params">s</span>):</span><br><span class="hljs-keyword">if</span> s == <span class="hljs-string">&quot;&quot;</span> :<br><span class="hljs-keyword">return</span> s<br><span class="hljs-keyword">else</span> :<br><span class="hljs-keyword">return</span> rvs(s[<span class="hljs-number">1</span>:])+s[<span class="hljs-number">0</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&#x27;这是一个字符串&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>rvs(<span class="hljs-string">&#x27;这是一个字符串&#x27;</span>)<br><span class="hljs-string">&#x27;串符字个一是这&#x27;</span><br></code></pre></div></td></tr></table></figure><h5 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h5><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> n==<span class="hljs-number">2</span> :<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-keyword">return</span> f(n-<span class="hljs-number">1</span>) + f(n-<span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><h5 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h5><p>思考n-1和n的关系</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">count = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hanoi</span>(<span class="hljs-params">n,src,dst,mid</span>):</span><br>    <span class="hljs-keyword">global</span> count<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;-&gt;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>,src,dst))<br>        count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span> :<br>        hanoi(n-<span class="hljs-number">1</span>,src,mid,dst)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;-&gt;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(n,src,dst))<br>        count += <span class="hljs-number">1</span><br>        hanoi(n-<span class="hljs-number">1</span>,mid,dst,src)<br>hanoi(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>)<br><span class="hljs-built_in">print</span>(count)<br><br>输出<br><span class="hljs-number">1</span>:A-&gt;C<br><span class="hljs-number">2</span>:A-&gt;B<br><span class="hljs-number">1</span>:C-&gt;B<br><span class="hljs-number">3</span>:A-&gt;C<br><span class="hljs-number">1</span>:B-&gt;A<br><span class="hljs-number">2</span>:B-&gt;C<br><span class="hljs-number">1</span>:A-&gt;C<br><span class="hljs-number">7</span><br></code></pre></div></td></tr></table></figure><h3 id="0x4-PyInstaller库的使用"><a href="#0x4-PyInstaller库的使用" class="headerlink" title="0x4  PyInstaller库的使用"></a>0x4  PyInstaller库的使用</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>将.py源代码转换为无需源代码的可执行程序文件</p><p>windows（exe）、linux、macos均可</p><p>它是一个第三方库</p><p>需要额外安装</p><p>使用pip工具安装</p><p>在cmd中输入</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">pip install pyinstaller<br></code></pre></div></td></tr></table></figure><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">(<span class="hljs-built_in">cmd</span>命令执行) pyinstaller -F &lt;文件名.py&gt;<br></code></pre></div></td></tr></table></figure><p><a href="https://imgchr.com/i/sR5VBD"><img src="https://s3.ax1x.com/2021/01/20/sR5VBD.png" alt="sR5VBD.png"></a></p><p>帮助显示命令</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">(<span class="hljs-built_in">cmd</span>命令执行) pyistaller -h <br></code></pre></div></td></tr></table></figure><p>更多常用参数</p><p><a href="https://imgchr.com/i/sRopS1"><img src="https://s3.ax1x.com/2021/01/20/sRopS1.png" alt="sRopS1.png"></a></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>产生有图标的文件</p><p><a href="https://imgchr.com/i/sRIcsf"><img src="https://s3.ax1x.com/2021/01/20/sRIcsf.png" alt="sRIcsf.png"></a></p><h3 id="0x5-实例-科赫雪花小包裹"><a href="#0x5-实例-科赫雪花小包裹" class="headerlink" title="0x5 实例 科赫雪花小包裹"></a>0x5 实例 科赫雪花小包裹</h3><h4 id="科赫曲线"><a href="#科赫曲线" class="headerlink" title="科赫曲线"></a>科赫曲线</h4><p>分形几何</p><p>有迭代关系的几何图形</p><p>用python绘制科赫曲线</p><p><a href="https://imgchr.com/i/sRTFcq"><img src="https://s3.ax1x.com/2021/01/20/sRTFcq.png" alt="sRTFcq.png"></a></p><p>绘制不同阶数的科赫曲线</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">koch</span>(<span class="hljs-params">size,n</span>) :</span>  <span class="hljs-comment">#确定大小和阶数</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:         <span class="hljs-comment">#当n=0时，画直线</span><br>        turtle.fd(size)  <br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> angle <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,-<span class="hljs-number">120</span>,<span class="hljs-number">60</span>]:   <span class="hljs-comment">#一阶曲线</span><br>            turtle.left(angle)<br>            koch(size/<span class="hljs-number">3</span>,n-<span class="hljs-number">1</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">400</span>)<br>    turtle.penup()<br>    turtle.goto(-<span class="hljs-number">300</span>,-<span class="hljs-number">50</span>)<br>    turtle.pendown()<br>    turtle.pensize(<span class="hljs-number">2</span>)<br>    koch(<span class="hljs-number">600</span>,<span class="hljs-number">3</span>)       <span class="hljs-comment">#3阶科赫曲线，阶数</span><br>    turtlw.hideturtle<br></code></pre></div></td></tr></table></figure><p>连成雪花</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">koch</span>(<span class="hljs-params">size,n</span>) :</span>  <span class="hljs-comment">#确定大小和阶数</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:         <span class="hljs-comment">#当n=0时，画直线</span><br>        turtle.fd(size)  <br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> angle <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,-<span class="hljs-number">120</span>,<span class="hljs-number">60</span>]:   <span class="hljs-comment">#一阶曲线</span><br>            turtle.left(angle)<br>            koch(size/<span class="hljs-number">3</span>,n-<span class="hljs-number">1</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    turtle.setup(<span class="hljs-number">600</span>,<span class="hljs-number">600</span>)<br>    turtle.penup()<br>    turtle.goto(-<span class="hljs-number">200</span>,<span class="hljs-number">100</span>)<br>    turtle.pendown()<br>    turtle.pensize(<span class="hljs-number">2</span>)<br>    level = <span class="hljs-number">4</span><br>    koch(<span class="hljs-number">400</span>,level)       <span class="hljs-comment">#3阶科赫曲线，阶数</span><br>    turtle.right(<span class="hljs-number">120</span>)<br>    koch(<span class="hljs-number">400</span>,level)<br>    turtle.right(<span class="hljs-number">120</span>)<br>    koch(<span class="hljs-number">400</span>,level)<br>    turtlw.hideturtle()<br>main()<br></code></pre></div></td></tr></table></figure><h4 id="科赫雪花小包裹"><a href="#科赫雪花小包裹" class="headerlink" title="科赫雪花小包裹"></a>科赫雪花小包裹</h4><p>用pylnstaller打包</p><h4 id="绘制条件的扩展"><a href="#绘制条件的扩展" class="headerlink" title="绘制条件的扩展"></a>绘制条件的扩展</h4><p>修改阶数</p><p>修改科赫曲线的基本定义及旋转角度</p><p>修改绘制科赫雪花的基础框架图形</p><p>分形几何很多</p><p>康托尔集</p><p>谢尔宾斯基三角形</p><p>门格海绵，龙形曲线，空间填充曲线</p><h2 id="组织数据类型"><a href="#组织数据类型" class="headerlink" title="组织数据类型"></a>组织数据类型</h2><p>一个数据表达一个含义</p><p>一组数据表达多个含义</p><p>类型结构：</p><p>集合类型、序列类型、字典类型</p><h3 id="0x1-集合类型及操作"><a href="#0x1-集合类型及操作" class="headerlink" title="0x1 集合类型及操作"></a>0x1 集合类型及操作</h3><h4 id="集合类型定义"><a href="#集合类型定义" class="headerlink" title="集合类型定义"></a>集合类型定义</h4><p>多个元素的无需组合</p><p>与数学概念一致</p><p>集合元素之间无序，每个元素唯一，不存在相同元素</p><p>集合元素不可更改，不能是可变数据类型</p><h4 id="建立集合"><a href="#建立集合" class="headerlink" title="建立集合"></a>建立集合</h4><p>集合用{ } 建立或set(),元素用逗号分隔</p><p>建立空集合必须用set(),相同元素合并</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>A = &#123;<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-number">123</span>,(<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-number">123</span>)&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(A)<br>&#123;<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;python&#x27;</span>, (<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-number">123</span>)&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>B = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;pupu123&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(B)<br>&#123;<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>&#125;<br></code></pre></div></td></tr></table></figure><p>==元素唯一，无序，{}表示逗号分隔==</p><h4 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h4><p><a href="https://imgchr.com/i/sWYJ91"><img src="https://s3.ax1x.com/2021/01/20/sWYJ91.png" alt="sWYJ91.png"></a></p><p><a href="https://imgchr.com/i/sWY8hR"><img src="https://s3.ax1x.com/2021/01/20/sWY8hR.png" alt="sWY8hR.png"></a></p><p>关系操作符返回true或false</p><h4 id="增强操作符"><a href="#增强操作符" class="headerlink" title="增强操作符"></a>增强操作符</h4><p><img src="https://s3.ax1x.com/2021/01/20/sW38QU.png" alt="sW38QU.png"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>A = &#123;<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>B = <span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;pypy123&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(B)<br>&#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(A)<br>&#123;<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-number">123</span>, <span class="hljs-string">&#x27;y&#x27;</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>A - B<br>&#123;<span class="hljs-number">123</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>A | B<br>&#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-number">123</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>A &amp; B<br>&#123;<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>A ^ B<br>&#123;<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">123</span>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="集合处理方法"><a href="#集合处理方法" class="headerlink" title="集合处理方法"></a>集合处理方法</h4><p><a href="https://imgchr.com/i/sWtqJA"><img src="https://s3.ax1x.com/2021/01/20/sWtqJA.png" alt="sWtqJA.png"></a></p><p><a href="https://imgchr.com/i/sWU5Ue"><img src="https://s3.ax1x.com/2021/01/20/sWU5Ue.png" alt="sWU5Ue.png"></a></p><p>输出全部元素实例</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#方法1 遍历</span><br>A = &#123;<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>&#125;<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> A:<br>    <span class="hljs-built_in">print</span>(item,end=<span class="hljs-string">&quot;&quot;</span>)<br><br>y123p<br><br><span class="hljs-comment">#方法2 使用pop函数</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(A.pop(),end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">pass</span><br><br>y123p<br></code></pre></div></td></tr></table></figure><p>==python存储元素与实际计算机存储的元素顺序不相符，固输出顺序不同==</p><h4 id="集合类型应用场景"><a href="#集合类型应用场景" class="headerlink" title="集合类型应用场景"></a>集合类型应用场景</h4><p>包含关系比较</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;p&quot;</span> <span class="hljs-keyword">in</span> &#123;<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>&#125;<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>&#123;<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>&#125; &gt;= &#123;<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>&#125;<br><span class="hljs-literal">False</span><br></code></pre></div></td></tr></table></figure><h4 id="数据去重"><a href="#数据去重" class="headerlink" title="数据去重"></a>数据去重</h4><p>利用集合元素无序且唯一的特点对数据去重</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ls = [<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>]<br>s =<span class="hljs-built_in">set</span>(ls)   <span class="hljs-comment">#此处将列表类型转换为集合类型</span><br>&#123;<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-number">123</span>&#125;  <br>lt = <span class="hljs-built_in">list</span>(s)   <span class="hljs-comment">#此处为集合类型转换为列表类型</span><br>[<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-number">123</span>]<br><br><span class="hljs-comment">#程序运行</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>ls = [<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-number">123</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s =<span class="hljs-built_in">set</span>(ls)<br><span class="hljs-meta">&gt;&gt;&gt; </span>lt = <span class="hljs-built_in">list</span>(s)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(lt)<br>[<span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-number">123</span>, <span class="hljs-string">&#x27;p&#x27;</span>]<br></code></pre></div></td></tr></table></figure><h3 id="0x2-序列类型及操作"><a href="#0x2-序列类型及操作" class="headerlink" title="0x2 序列类型及操作"></a>0x2 序列类型及操作</h3><p>序列类型定义</p><p>序列具有先后关系的一组元素</p><p>序列是一维元素向量，元素类型可以不同</p><p>类似数学元素序列：S0,S1,…,Sn-1</p><p>元素间由序号引导，通过下标访问序列的特定元素</p><p>序列是一个基类类型</p><p>序列类型，衍生出字符串类型、元组类型、列表类型</p><h4 id="序号的定义"><a href="#序号的定义" class="headerlink" title="序号的定义"></a>序号的定义</h4><p><a href="https://imgchr.com/i/sWr5LR"><img src="https://s3.ax1x.com/2021/01/20/sWr5LR.png" alt="sWr5LR.png"></a></p><h4 id="序列处理函数及方法"><a href="#序列处理函数及方法" class="headerlink" title="序列处理函数及方法"></a>序列处理函数及方法</h4><p>6个操作符</p><p><a href="https://imgchr.com/i/sWO1yj"><img src="https://s3.ax1x.com/2021/01/20/sWO1yj.png" alt="sWO1yj.png"></a></p><p>实例</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>ls = [<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-number">123</span>,<span class="hljs-string">&quot;.io&quot;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>ls[::-<span class="hljs-number">1</span>]<br>[<span class="hljs-string">&#x27;.io&#x27;</span>, <span class="hljs-number">123</span>, <span class="hljs-string">&#x27;python&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&quot;python123.io&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s[::-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;oi.321nohtyp&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="五个函数和方法"><a href="#五个函数和方法" class="headerlink" title="五个函数和方法"></a>五个函数和方法</h4><p><a href="https://imgchr.com/i/sfSTBQ"><img src="https://s3.ax1x.com/2021/01/20/sfSTBQ.png" alt="sfSTBQ.png"></a></p><p>例子</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>ls = [<span class="hljs-string">&quot;python&quot;</span>,<span class="hljs-number">123</span>,<span class="hljs-string">&quot;.io&quot;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(ls)<br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>s = <span class="hljs-string">&quot;python123.io&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span>(s)<br><span class="hljs-string">&#x27;y&#x27;</span>               <span class="hljs-comment">#根据字母排序得出</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t = <span class="hljs-string">&quot;a987b&quot;</span>   <span class="hljs-comment">#字母大于数字</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span>(t)<br><span class="hljs-string">&#x27;b&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>t = <span class="hljs-string">&quot;0987341&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span>(t)<br><span class="hljs-string">&#x27;9&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="元组类型及操作"><a href="#元组类型及操作" class="headerlink" title="元组类型及操作"></a>元组类型及操作</h4><p>序列类型的扩展</p><p>一旦创建不能被修改</p><p>使用小括号()或者tuple创建，元素间用逗号分隔</p><p>可以不适用或使用小括号</p><p>==返回的实际上是一个值，返回的数据类型是元组类型==</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h5 id="元组类型定义"><a href="#元组类型定义" class="headerlink" title="元组类型定义"></a>元组类型定义</h5><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>create = <span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;tiger&quot;</span>,<span class="hljs-string">&quot;human&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>create<br>(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>color = (<span class="hljs-number">0x001100</span>,<span class="hljs-string">&quot;blue&quot;</span>,create)<br><span class="hljs-meta">&gt;&gt;&gt; </span>color<br>(<span class="hljs-number">4352</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, (<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>))<br></code></pre></div></td></tr></table></figure><p>==继承序列的全部通用操作==</p><h4 id="列表类型及操作"><a href="#列表类型及操作" class="headerlink" title="列表类型及操作"></a>列表类型及操作</h4><p>列表是一种序列类型，创建后可以随意被修改</p><p>使用方括号[]或list()创建，元素间用逗号，分隔</p><p>列表中类型可以不同，没有长度限制</p><h5 id="列表类型定义"><a href="#列表类型定义" class="headerlink" title="列表类型定义"></a>列表类型定义</h5><p>==此处并没有真正的将ls列表内的值赋给lt，而是将该列表新定义了一个名字==</p><p>这里使用了内存和指针的概念</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>, <span class="hljs-number">1024</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>lt = ls<br><span class="hljs-meta">&gt;&gt;&gt; </span>lt<br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>, <span class="hljs-number">1024</span>]<br></code></pre></div></td></tr></table></figure><h4 id="列表类型的操作函数和方法"><a href="#列表类型的操作函数和方法" class="headerlink" title="列表类型的操作函数和方法"></a>列表类型的操作函数和方法</h4><p><a href="https://imgchr.com/i/sfe7Hx"><img src="https://s3.ax1x.com/2021/01/20/sfe7Hx.png" alt="sfe7Hx.png"></a></p><p>实例</p><p>切片替换</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>ls = [<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>,<span class="hljs-number">1024</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>ls[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]<br>[<span class="hljs-string">&#x27;dog&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>ls[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>ls<br>[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>, <span class="hljs-number">1024</span>]<br></code></pre></div></td></tr></table></figure><p>删除</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">[<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-string">&#x27;human&#x27;</span>, <span class="hljs-number">1024</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">del</span> ls[::<span class="hljs-number">3</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>ls<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-number">1024</span>]<br></code></pre></div></td></tr></table></figure><h5 id="更多方法"><a href="#更多方法" class="headerlink" title="更多方法"></a>更多方法</h5><p><a href="https://imgchr.com/i/sfmHMj"><img src="https://s3.ax1x.com/2021/01/20/sfmHMj.png" alt="sfmHMj.png"></a></p><h4 id="序列类型应用场景"><a href="#序列类型应用场景" class="headerlink" title="序列类型应用场景"></a>序列类型应用场景</h4><p>用于数据表示</p><p>元组用于元素不改变的应用场景，更多用于固定搭配场景</p><p>列表更灵活，是最常用的序列类型</p><p>表示一组有序数据，进而操作它们</p><p>元素遍历</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ls :<br>    &lt;语句块&gt;<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> tp :<br>    &lt;语句块&gt;<br></code></pre></div></td></tr></table></figure><p>数据保护</p><p>将列表类型转换为元组类型，从而达到保护数据的目的</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>ls = [<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;tiger&quot;</span>,<span class="hljs-number">1024</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>lt = <span class="hljs-built_in">tuple</span>(ls)   <span class="hljs-comment">#用于将列表类型转换为元组类型</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>lt<br>(<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;tiger&#x27;</span>, <span class="hljs-number">1024</span>)<br></code></pre></div></td></tr></table></figure><p>元组类型数据不会修改数据，在多人写程序的情况，接口的传递</p><h4 id="实例-基本统计值计算"><a href="#实例-基本统计值计算" class="headerlink" title="实例 基本统计值计算"></a>实例 基本统计值计算</h4><p> 基本统计值</p><p>总个数、求和、平均值、方差、中位数</p><p>总个数：len()</p><p>求和：for …in</p><p>平均值：求和/总个数</p><p>方差：各数据与平均数差的平方的和的平均数</p><p>中位数：排序，然后…奇数找最中间的1个，偶数找中间2个取平均</p><p>通过函数，完成不同的功能</p><p>假定数据是用户输入，数量不确定</p><p>用户输入和输入结束函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getNum</span>():</span><br>    nums =[]<br>    iNumStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入数字(回车退出):&quot;</span>)<br>    <span class="hljs-keyword">while</span> iNumStr != <span class="hljs-string">&quot;&quot;</span>:                   <span class="hljs-comment">#当输入为空是退出</span><br>        nums.append(<span class="hljs-built_in">eval</span>(iNumStr))<br>        iNumStr =<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入数字(回车退出):&quot;</span>)<br>    <span class="hljs-keyword">return</span> nums<br></code></pre></div></td></tr></table></figure><p>求和</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mean</span>(<span class="hljs-params">numbers</span>):</span>  <span class="hljs-comment">#计算平均值</span><br>    s = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers:<br>        s = s + num<br>    <span class="hljs-keyword">return</span> s / <span class="hljs-built_in">len</span>(numbers)<br></code></pre></div></td></tr></table></figure><p>计算方差</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dev</span>(<span class="hljs-params">numbers,mean</span>):</span>   <span class="hljs-comment">#输入numbers列表，mean是平均值</span><br>    sdev = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers :<br>        sdev = sdev + (num - mean)**<span class="hljs-number">2</span>  <span class="hljs-comment">#取出每个数与平均值做差求平方，累加</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(sdev/(<span class="hljs-built_in">len</span>(numbers)-<span class="hljs-number">1</span>),<span class="hljs-number">0.5</span>) <span class="hljs-comment">#对中位数开方返回</span><br></code></pre></div></td></tr></table></figure><p>计算中位数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">median</span>(<span class="hljs-params">numbers</span>):</span><br>    <span class="hljs-built_in">sorted</span>(numbers)<br>    size = <span class="hljs-built_in">len</span>(numbers)<br>    <span class="hljs-keyword">if</span> size % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        med = (numbers[size//<span class="hljs-number">2</span>-<span class="hljs-number">1</span>] + numbers[size//<span class="hljs-number">2</span>])/<span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        med = numbers[size//<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">return</span> med<br></code></pre></div></td></tr></table></figure><p>调用</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">n = getNum()<br>m = mean(n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;平均值：&#123;&#125;,方差:&#123;:.2&#125;,中位数:&#123;&#125;.&quot;</span>.<span class="hljs-built_in">format</span>(m,dev(n,m),median(n)))<br></code></pre></div></td></tr></table></figure><p>举一反三</p><p>获取多个用户输入的方法</p><p>分隔多个函数，模块化</p><h4 id="字典类型及操作"><a href="#字典类型及操作" class="headerlink" title="字典类型及操作"></a>字典类型及操作</h4><p>字典类型定义</p><p>映射</p><p>索引和数据的对应关系，键和值</p><p>属性和值，一种属性对应一个值</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&quot;streetAddr&quot;</span>:<span class="hljs-string">&quot;中关村南大街5号&quot;</span><br><span class="hljs-string">&quot;zipcode&quot;</span>: <span class="hljs-string">&quot;100081&quot;</span><br></code></pre></div></td></tr></table></figure><p>比较序列类型和映射类型</p><p><a href="https://imgchr.com/i/shi7Cj"><img src="https://s3.ax1x.com/2021/01/21/shi7Cj.png" alt="shi7Cj.png"></a></p><p>字典类型是映射的体现</p><p>键相当于值的标签，找到标签就可获得值</p><p>键值对：键是数据索引的扩展</p><p>字典是键值对的集合，键值对之间无序</p><p>采用大括号{}和dict创建，键值对用冒号：表示</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;&lt;键<span class="hljs-number">1</span>&gt;:&lt;值<span class="hljs-number">1</span>&gt;,&lt;键<span class="hljs-number">2</span>&gt;:&lt;值<span class="hljs-number">2</span>&gt;,...,&lt;键n&gt;:&lt;值n&gt;&#125;<br></code></pre></div></td></tr></table></figure><p>字典变量作用</p><p>在字典变量中，通过键获得值</p> <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&lt;字典变量&gt; = &#123;&lt;键<span class="hljs-number">1</span>&gt;:&lt;值<span class="hljs-number">1</span>&gt;,&lt;键<span class="hljs-number">2</span>&gt;:&lt;值<span class="hljs-number">2</span>&gt;,...,&lt;键n&gt;:&lt;值n&gt;&#125;<br><br>&lt;值<span class="hljs-number">1</span>&gt; = &lt;字典变量&gt;[&lt;键<span class="hljs-number">1</span>&gt;]<br><br>&lt;字典变量&gt;[&lt;键<span class="hljs-number">1</span>&gt;] = &lt;值<span class="hljs-number">1</span>&gt;<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d = &#123;<span class="hljs-string">&quot;first&quot;</span> : <span class="hljs-number">1</span> ,<span class="hljs-string">&quot;second&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;third&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>d[<span class="hljs-string">&quot;first&quot;</span>]<br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>生成空字典</p><p>空的集合类型定义不用{}，将 {} 留给字典类型</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>de = &#123;&#125; ; <span class="hljs-built_in">type</span>(de)  <span class="hljs-comment">#检测变量类型</span><br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">dict</span>&#x27;&gt;</span><br></code></pre></div></td></tr></table></figure><p>字典处理函数及方法</p><p><a href="https://imgchr.com/i/shLYzF"><img src="https://s3.ax1x.com/2021/01/21/shLYzF.png" alt="shLYzF.png"></a></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d = &#123;<span class="hljs-string">&quot;first&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;second&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;third&quot;</span>:<span class="hljs-number">3</span>&#125;<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>d.keys()<br>dict_keys([<span class="hljs-string">&#x27;first&#x27;</span>, <span class="hljs-string">&#x27;second&#x27;</span>, <span class="hljs-string">&#x27;third&#x27;</span>])<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>d.values()<br>dict_values([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></div></td></tr></table></figure><p>返回字典的key类型,可以用for in 遍历，不能像列表一样操作</p><p><a href="https://imgchr.com/i/shOQ6e"><img src="https://s3.ax1x.com/2021/01/21/shOQ6e.png" alt="shOQ6e.png"></a></p><p>示例</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>d.get(<span class="hljs-string">&quot;first&quot;</span>,<span class="hljs-string">&quot;forth&quot;</span>)  <br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>d.get(<span class="hljs-string">&quot;fifth&quot;</span>,<span class="hljs-string">&quot;forth&quot;</span>)  <span class="hljs-comment">#此时forth是错误时返回的值</span><br><span class="hljs-string">&#x27;forth&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>d.popitem()<br>(<span class="hljs-string">&#x27;third&#x27;</span>, <span class="hljs-number">3</span>)<br></code></pre></div></td></tr></table></figure><p>字典类型应用场景</p><p>对映射的表达</p><p>表达键值对数据，进而操作它们</p><p>元素遍历</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> d :<br>    &lt;语句块&gt;<br></code></pre></div></td></tr></table></figure><h3 id="0x3-模块-jieba库的使用"><a href="#0x3-模块-jieba库的使用" class="headerlink" title="0x3 模块 jieba库的使用"></a>0x3 模块 jieba库的使用</h3><p>中文分词第三方库，需额外安装</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">(<span class="hljs-built_in">cmd</span>命令行) pip install jieba<br></code></pre></div></td></tr></table></figure><p>jieba提供三种分词模式</p><p>一般掌握一种足以</p><p>jieba通过中文词库方式识别分词</p><p>利用一个中文词库，确定汉字之间的关联概率</p><p>汉字间概率大的组成自促，形成分词结果</p><p>除了分词，用户还可以添加自定义的词组</p><h4 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h4><p>精确模式、全模式、搜索引擎模式</p><p>精确模式 ： 把文本精确的切分开，不存在冗余单词</p><p>全模式： 把文本中所有可能的词语都扫描出来，由冗余</p><p>搜索引擎模式： 在精确模式基础上，对长词再次切分</p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p><a href="https://imgchr.com/i/s4pP4s"><img src="https://s3.ax1x.com/2021/01/21/s4pP4s.png" alt="s4pP4s.png"></a></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> jieba<br><span class="hljs-meta">&gt;&gt;&gt; </span>jieba.lcut(<span class="hljs-string">&quot;我今天去美国找了特朗普总统谈话&quot;</span>)<br>[<span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;今天&#x27;</span>, <span class="hljs-string">&#x27;去&#x27;</span>, <span class="hljs-string">&#x27;美国&#x27;</span>, <span class="hljs-string">&#x27;找&#x27;</span>, <span class="hljs-string">&#x27;了&#x27;</span>, <span class="hljs-string">&#x27;特朗普&#x27;</span>, <span class="hljs-string">&#x27;总统&#x27;</span>, <span class="hljs-string">&#x27;谈话&#x27;</span>]<br></code></pre></div></td></tr></table></figure><p><a href="https://imgchr.com/i/s4pUVe"><img src="https://s3.ax1x.com/2021/01/21/s4pUVe.png" alt="s4pUVe.png"></a></p><h3 id="0x4-实例-文本词频统计"><a href="#0x4-实例-文本词频统计" class="headerlink" title="0x4 实例 文本词频统计"></a>0x4 实例 文本词频统计</h3><p>英文文本：<a href="http://python123.io/resources/pye/hamlet.txt">Hamlet</a></p><p>中文文本：<a href="http://python123.io/resources/pye/threekingdoms.txt">三国演义</a></p><h4 id="Hamet英文词频统计实例讲解"><a href="#Hamet英文词频统计实例讲解" class="headerlink" title="Hamet英文词频统计实例讲解"></a>Hamet英文词频统计实例讲解</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#CalHamletV1.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getText</span>():</span><br>    txt = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hamlet.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>).read()             <span class="hljs-comment">#打开文件</span><br>    txt = txt.lower()                               <span class="hljs-comment">#将英文变成小写</span><br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;!&quot;#$%&amp;()*+,-./:;&lt;=&gt;?@[\\]^_‘&#123;|&#125;~&#x27;</span>:   <span class="hljs-comment">#逐一选取特殊符号</span><br>        txt = txt.replace(ch,<span class="hljs-string">&quot; &quot;</span>)                   <span class="hljs-comment">#将特殊符号替换为空格</span><br>    <span class="hljs-keyword">return</span> txt                               <span class="hljs-comment">#返回替换后的文本</span><br>hamletTxt = getText()                        <span class="hljs-comment">#将返回的文本赋给hamlettxt</span><br>words = hamletTxt.split()                    <span class="hljs-comment">#文本分隔方法，以空格分隔       </span><br>counts = &#123;&#125;                                  <span class="hljs-comment">#根据映射关系，定义一个空字典</span><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>    counts[word] = counts.get(word,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span>   <br>    <span class="hljs-comment">#形成键值对，get得到该词键对应的值+1，然后将新+1的值映射给该词键</span><br>    <span class="hljs-comment">#遍历了文本字符串内的所有元素</span><br>items = <span class="hljs-built_in">list</span>(counts.items())     <span class="hljs-comment">#将字典类型转换为列表类型              </span><br>items.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>) <span class="hljs-comment">#将一个列表按照键值对的两个元素中的第二个元素进行排序，从大到小</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):     <span class="hljs-comment">#打印前十个，词和对应出现的次数</span><br>    word,count = items[i]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="hljs-built_in">format</span>(word,count))<br><br></code></pre></div></td></tr></table></figure><h4 id="三国演义"><a href="#三国演义" class="headerlink" title="三国演义"></a>三国演义</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br>txt = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;threekingdoms.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br>words = jieba.lcut(txt)<br>counts = &#123;&#125; <br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(word) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        counts[word] = counts.get(word,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>items = <span class="hljs-built_in">list</span>(counts.items())<br>items.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>    word,count = items[i]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="hljs-built_in">format</span>(word,count))<br><br>    <br>    <br>    <br>曹操          <span class="hljs-number">953</span><br>孔明          <span class="hljs-number">836</span><br>将军          <span class="hljs-number">772</span><br>却说          <span class="hljs-number">656</span><br>玄德          <span class="hljs-number">585</span><br>关公          <span class="hljs-number">510</span><br>丞相          <span class="hljs-number">491</span><br>二人          <span class="hljs-number">469</span><br>不可          <span class="hljs-number">440</span><br>荆州          <span class="hljs-number">425</span><br>玄德曰         <span class="hljs-number">390</span><br>孔明曰         <span class="hljs-number">390</span><br>不能          <span class="hljs-number">384</span><br>如此          <span class="hljs-number">378</span><br>张飞          <span class="hljs-number">358</span><br>    <br>    <br></code></pre></div></td></tr></table></figure><h4 id="深入讲解"><a href="#深入讲解" class="headerlink" title="深入讲解"></a>深入讲解</h4><p>将词频与人物相关联，面向问题</p><p>词频统计 人物统计</p><p>去除排名靠前但不是人物的词语</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br>txt = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;threekingdoms.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>).read()<br>excludes = &#123;<span class="hljs-string">&quot;将军&quot;</span>,<span class="hljs-string">&quot;却说&quot;</span>,<span class="hljs-string">&quot;荆州&quot;</span>,<span class="hljs-string">&quot;二人&quot;</span>,<span class="hljs-string">&quot;不可&quot;</span>,<span class="hljs-string">&quot;不能&quot;</span>,<span class="hljs-string">&quot;如此&quot;</span>,<span class="hljs-string">&quot;如何&quot;</span>,<span class="hljs-string">&quot;商议&quot;</span>,<span class="hljs-string">&quot;军士&quot;</span>,<span class="hljs-string">&quot;左右&quot;</span>,<span class="hljs-string">&quot;军马&quot;</span>,<span class="hljs-string">&quot;引兵&quot;</span>,<span class="hljs-string">&quot;次日&quot;</span>,<span class="hljs-string">&quot;大喜&quot;</span>,<span class="hljs-string">&quot;天下&quot;</span>,<span class="hljs-string">&quot;东吴&quot;</span>,<span class="hljs-string">&quot;于是&quot;</span>,<span class="hljs-string">&quot;今日&quot;</span>,<span class="hljs-string">&quot;不敢&quot;</span>,<span class="hljs-string">&quot;魏兵&quot;</span>&#125;<br>words = jieba.lcut(txt)<br>counts = &#123;&#125; <br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(word) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">elif</span> word == <span class="hljs-string">&quot;诸葛亮&quot;</span> <span class="hljs-keyword">or</span> word == <span class="hljs-string">&quot;孔明曰&quot;</span>:<br>        rword = <span class="hljs-string">&quot;孔明&quot;</span><br>    <span class="hljs-keyword">elif</span> word == <span class="hljs-string">&quot;关公&quot;</span> <span class="hljs-keyword">or</span> word == <span class="hljs-string">&quot;云长&quot;</span>:<br>        rword = <span class="hljs-string">&quot;关羽&quot;</span><br>    <span class="hljs-keyword">elif</span> word == <span class="hljs-string">&quot;玄德&quot;</span> <span class="hljs-keyword">or</span> word == <span class="hljs-string">&quot;玄德曰&quot;</span>:<br>        rword = <span class="hljs-string">&quot;刘备&quot;</span><br>    <span class="hljs-keyword">elif</span> word == <span class="hljs-string">&quot;孟德&quot;</span> <span class="hljs-keyword">or</span> word == <span class="hljs-string">&quot;丞相&quot;</span>:<br>        rword = <span class="hljs-string">&quot;曹操&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        rword = word<br>    counts[rword] = counts.get(rword,<span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> excludes:<br>    <span class="hljs-keyword">del</span> counts[word]<br>items = <span class="hljs-built_in">list</span>(counts.items())<br>items.sort(key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    word,count = items[i]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="hljs-built_in">format</span>(word,count))<br><br></code></pre></div></td></tr></table></figure><h4 id="应用问题的扩展"><a href="#应用问题的扩展" class="headerlink" title="应用问题的扩展"></a>应用问题的扩展</h4><p>绘制词云</p><p>对红楼梦、西游记、水浒传分析</p><p>政府工作报告、科研论文、新闻报道等</p><h2 id="文件和数据格式化"><a href="#文件和数据格式化" class="headerlink" title="文件和数据格式化"></a>文件和数据格式化</h2><p>格式化</p><p>将字符串按照样式规范</p><p>数据格式化</p><p>将一组数据按照一定规格和样式进行规范：表示、存储、运算等</p><p>方法论 从python角度理解文件和数据表示</p><h3 id="0x1-文件的使用"><a href="#0x1-文件的使用" class="headerlink" title="0x1 文件的使用"></a>0x1 文件的使用</h3><h4 id="文件的类型"><a href="#文件的类型" class="headerlink" title="文件的类型"></a>文件的类型</h4><p>文件   文件时数据的抽象和集合</p><p>文件时存储在辅助存储器上的数据序列</p><p>文件时数据存储的一种形式</p><p>文件展现形态：文本文件和二进制文件</p><p>所有文件都是二进制形式存储的，只是表现形式不同</p><p>文本文件</p><p>由单一特定编码组成的文件</p><p>也可以理解为字符串</p><p>二进制文件</p><p>直接由0和1组成，没有编码</p><p>两种形式都可以二进制形式打开</p><p>文本形式打开文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">tf = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f,txt&quot;</span>,<span class="hljs-string">&quot;rt&quot;</span>)<br><span class="hljs-built_in">print</span>(tf.readline())<br>tf.close()<br><br>this <span class="hljs-keyword">is</span> a word 123abc<br><br><span class="hljs-comment">#当文件中有中文时，读取文件内容会报如下错误</span><br>UnicodeDecodeError: <span class="hljs-string">&#x27;gbk&#x27;</span> codec can<span class="hljs-string">&#x27;t decode byte 0xb9 in position 35: illegal multibyte sequence</span><br></code></pre></div></td></tr></table></figure><p>二进制形式打开文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">bf = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;f.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br><span class="hljs-built_in">print</span>(bf.readline())<br>bf.close()<br><br><span class="hljs-string">b&#x27;this is a word 123abc\xef\xbc\x8c\xe4\xb8\xad\xe6\x96\x87\xe5\x86\x85\xe5\xae\xb9\r\n&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h4><p>打开-操作-关闭</p><p>存储状态、占用状态</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a = <span class="hljs-built_in">open</span>(,)<br>a.close()<br></code></pre></div></td></tr></table></figure><p>读写文件方法</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#读文件</span><br>a.read(size)<br>a.readline(size)<br>a.realines(hint)<br><br><span class="hljs-comment">#写文件</span><br>a.write(s)<br>a.writelines(lines)<br>a.seek(offset)<br></code></pre></div></td></tr></table></figure><p>文件打开</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&lt;变量名&gt; = <span class="hljs-built_in">open</span>(&lt;文件名&gt;,&lt;打开模式&gt;)<br></code></pre></div></td></tr></table></figure><p><a href="https://imgchr.com/i/sTpBMn"><img src="https://s3.ax1x.com/2021/01/23/sTpBMn.png" alt="sTpBMn.png"></a></p><p>文件路径：</p><p>绝对路径</p><p>\ 表示转义符，所以路径要写成</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">D:/PYE/f.txt<br>    或<br>D:\\PYE\\f.txt <br></code></pre></div></td></tr></table></figure><p>相对路径</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">./PYE/f.txt<br><br>在同一文件夹下直接用文件名<br><span class="hljs-string">&quot;f.txt&quot;</span><br></code></pre></div></td></tr></table></figure><p>文件打开模式</p><p><a href="https://imgchr.com/i/sT9htS"><img src="https://s3.ax1x.com/2021/01/23/sT9htS.png" alt="sT9htS.png"></a></p><p>默认时文本形式，只读模式</p><p>文件关闭</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&lt;变量名&gt;.close()<br></code></pre></div></td></tr></table></figure><p>程序结束后自动关闭</p><h4 id="文件的内容的读取"><a href="#文件的内容的读取" class="headerlink" title="文件的内容的读取"></a>文件的内容的读取</h4><p><a href="https://imgchr.com/i/sTZs1K"><img src="https://s3.ax1x.com/2021/01/23/sTZs1K.png" alt="sTZs1K.png"></a></p><p><a href="https://imgchr.com/i/sTZ4ht"><img src="https://s3.ax1x.com/2021/01/23/sTZ4ht.png" alt="sTZ4ht.png"></a></p><p>一次读入，统一处理</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">fname = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要打开的文件名称：&quot;</span>)<br>fo = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&quot;r&quot;</span>)<br>txt = fo.read()<br><span class="hljs-comment">#对全文txt进行处理</span><br>fo.close()<br><br><span class="hljs-comment">#采用一次读入，统一处理，文件过大不适用</span><br></code></pre></div></td></tr></table></figure><p>按数量读入，逐步处理</p><p>适合大文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">fname = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要打开的文件名称：&quot;</span>)<br>fo = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&quot;r&quot;</span>)<br>txt = fo.read(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">while</span> txt !=<span class="hljs-string">&quot;&quot;</span>:<br>    <span class="hljs-comment">#对txt进行处理</span><br>    txt = fo.read(<span class="hljs-number">2</span>)<br>fo.close()<br></code></pre></div></td></tr></table></figure><p>逐行遍历</p><p>一次读入，分行处理</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">fname = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要打开的文件名称：&quot;</span>)<br>fo = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fo.readlines():<br>    <span class="hljs-built_in">print</span>(line)<br>fo.close()<br></code></pre></div></td></tr></table></figure><p>分行读入、逐行处理</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">fname = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要打开的文件名称：&quot;</span>)<br>fo = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fo:<br>    <span class="hljs-built_in">print</span>(line)<br>fo.close()<br></code></pre></div></td></tr></table></figure><h4 id="数据的文件写入"><a href="#数据的文件写入" class="headerlink" title="数据的文件写入"></a>数据的文件写入</h4><p><a href="https://imgchr.com/i/sTmKGq"><img src="https://s3.ax1x.com/2021/01/23/sTmKGq.png" alt="sTmKGq.png"></a></p><p>writelines直接将文字拼接写入文件，没有空格换行</p><p><a href="https://imgchr.com/i/sTmrLD"><img src="https://s3.ax1x.com/2021/01/23/sTmrLD.png" alt="sTmrLD.png"></a></p><p>输入位置指针，描述了当前在文件内写入的具体内存位置</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">fo = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;w+&quot;</span>)<br>ls = [<span class="hljs-string">&quot;中国&quot;</span>，<span class="hljs-string">&quot;法国&quot;</span>，<span class="hljs-string">&quot;美国&quot;</span>]<br>fo.writelines(ls)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fo:<br>    <span class="hljs-built_in">print</span>(line)<br>fo.close()<br><br><span class="hljs-comment">#此时输入指针在输入的末尾，之后是没有内容的，固没有输出</span><br><span class="hljs-comment">#修改如下，使用seek方法</span><br><br>fo = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;w+&quot;</span>)<br>ls = [<span class="hljs-string">&quot;中国&quot;</span>，<span class="hljs-string">&quot;法国&quot;</span>，<span class="hljs-string">&quot;美国&quot;</span>]<br>fo.writelines(ls)<br>fo.seek(<span class="hljs-number">0</span>)         <span class="hljs-comment">#将输入指针返回到最开始</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fo:<br>    <span class="hljs-built_in">print</span>(line)<br>fo.close()<br></code></pre></div></td></tr></table></figure><h3 id="0x2-实例：自动轨迹绘制"><a href="#0x2-实例：自动轨迹绘制" class="headerlink" title="0x2 实例：自动轨迹绘制"></a>0x2 实例：自动轨迹绘制</h3><p>自动轨迹绘制</p><p>根据脚本来绘制图形</p><p>写数据绘制图形</p><p>是自动化程序的重要内容</p><h4 id="基本思路-1"><a href="#基本思路-1" class="headerlink" title="基本思路"></a>基本思路</h4><p>定义数据文件格式(接口）</p><p>根据文件接口解析参数绘制图形</p><p>编制数据文件</p><h4 id="数据接口定义"><a href="#数据接口定义" class="headerlink" title="数据接口定义"></a>数据接口定义</h4><p>根据个人需求</p><p><a href="https://imgchr.com/i/sTu3E4"><img src="https://s3.ax1x.com/2021/01/23/sTu3E4.png" alt="sTu3E4.png"></a></p><h4 id="编写对应程序"><a href="#编写对应程序" class="headerlink" title="编写对应程序"></a>编写对应程序</h4><p>map函数，将第一个参数对应的函数作用于一个列表或集合的每个元素</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle <span class="hljs-keyword">as</span> t<br>t.title(<span class="hljs-string">&#x27;自动轨迹绘制&#x27;</span>)<br>t.setup(<span class="hljs-number">800</span>,<span class="hljs-number">600</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>t.pencolor(<span class="hljs-string">&quot;red&quot;</span>)<br>t.pensize(<span class="hljs-number">5</span>)<br><span class="hljs-comment">#数据读取</span><br>datals = []<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.txt&quot;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>    line = line.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>    datals.append(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">eval</span>,line.split(<span class="hljs-string">&quot;,&quot;</span>))))<br>f.close()<br><span class="hljs-comment">#自动绘制</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(datals)):<br>    t.pencolor(datals[i][<span class="hljs-number">3</span>],datals[i][<span class="hljs-number">4</span>],datals[i][<span class="hljs-number">5</span>]) <br>    <span class="hljs-comment">#找到第i个参数，获取第3个值、第4个值，第5个值，即RGB参数</span><br>    t.fd(datals[i][<span class="hljs-number">0</span>])  <span class="hljs-comment">#读取0位数据，获得绘制长度</span><br>    <span class="hljs-keyword">if</span> datals[i][<span class="hljs-number">1</span>]:    <span class="hljs-comment">#根据判断是否转向，选择左右转的角度</span><br>        t.right(datals[i][<span class="hljs-number">2</span>])<br>    <span class="hljs-keyword">else</span>:<br>        t.left(datals[i][<span class="hljs-number">2</span>])<br></code></pre></div></td></tr></table></figure><h4 id="理解方法思维-1"><a href="#理解方法思维-1" class="headerlink" title="理解方法思维"></a>理解方法思维</h4><p>自动化思维</p><p>接口化设计</p><p>二维数据应用</p><p>拓展</p><p>增加更多接口</p><p>增加功能</p><p>增加应用动画绘制</p><h3 id="0x3-一维数据的格式化和处理"><a href="#0x3-一维数据的格式化和处理" class="headerlink" title="0x3 一维数据的格式化和处理"></a>0x3 一维数据的格式化和处理</h3><h4 id="数据组织的维度"><a href="#数据组织的维度" class="headerlink" title="数据组织的维度"></a>数据组织的维度</h4><p>线性方式组织</p><p>二维方式组织</p><p>多维、高维</p><p>一维数据</p><p>由对等关系的有序或无序数据构成，采用线性方式组织</p><p>对应列表数组和集合等概念</p><p>二维数据</p><p>由多个一维数据构成，是一维数据的组合形式</p><p>仅利用最基本的二元关系展示数据间的复杂结构</p><p>例如 键值对定义</p><p><a href="https://imgchr.com/i/sThLpF"><img src="https://s3.ax1x.com/2021/01/23/sThLpF.png" alt="sThLpF.png"></a></p><p>数据的操作周期</p><p>存储、表示、操作</p><p>存储格式、数据类型、操作方式</p><h4 id="一维数据的表示"><a href="#一维数据的表示" class="headerlink" title="一维数据的表示"></a>一维数据的表示</h4><p>如何用程序类型表达一维数据</p><p>如果数据间有序：使用列表类型</p><p>可以用for循环遍历</p><p>数据无序：使用集合类型</p><p>可以使用for循环遍历</p><h4 id="一维数据的存储"><a href="#一维数据的存储" class="headerlink" title="一维数据的存储"></a>一维数据的存储</h4><p>存储方式</p><p>空格分隔  即存储的数据之间需要空格</p><p>但数据中不能由空格</p><p>逗号分隔 也如空格存在缺点</p><p>一般用特殊符号分隔</p><h4 id="一维数据的处理"><a href="#一维数据的处理" class="headerlink" title="一维数据的处理"></a>一维数据的处理</h4><p>读入</p><p>从空格分隔的文件中读入数据</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">txt = <span class="hljs-built_in">open</span>(fname).read()<br>ls = txt.split()<br>f.close()<br></code></pre></div></td></tr></table></figure><p>从特殊分隔的文件中读入数据</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">txt = <span class="hljs-built_in">open</span>(fname).read()<br>ls = txt.split(<span class="hljs-string">&quot;$&quot;</span>)<br>f.close()<br></code></pre></div></td></tr></table></figure><p>写入</p><p>采用空格方式写入数据文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ls = [<span class="hljs-string">&#x27;中国&#x27;</span>,<span class="hljs-string">&#x27;美国&#x27;</span>,<span class="hljs-string">&#x27;日本&#x27;</span>]<br>f = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;&#x27;</span>.join(ls))   <span class="hljs-comment">#将&#x27; &#x27;作为分隔放到ls数据之间</span><br>f.close()<br></code></pre></div></td></tr></table></figure><p>特殊分隔的方式写入数据文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ls = [<span class="hljs-string">&#x27;中国&#x27;</span>,<span class="hljs-string">&#x27;美国&#x27;</span>,<span class="hljs-string">&#x27;日本&#x27;</span>]<br>f = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;$&#x27;</span>.join(ls))   <span class="hljs-comment">#将&#x27;$&#x27;作为分隔放到ls数据之间</span><br>f.close()<br></code></pre></div></td></tr></table></figure><h3 id="0x4-二维数据的格式化和处理"><a href="#0x4-二维数据的格式化和处理" class="headerlink" title="0x4 二维数据的格式化和处理"></a>0x4 二维数据的格式化和处理</h3><h4 id="二维数据的表示"><a href="#二维数据的表示" class="headerlink" title="二维数据的表示"></a>二维数据的表示</h4><p>使用表格形式，使用二维列表</p><p>类似于C语言中的二维数组</p><p>使用列表类型</p><p>遍历需要两层for循环</p><p>数据维度是数据的组织形式</p><p>一维数据：列表和集合类型</p><p>有序用列表，无序用集合</p><h4 id="CSV数据存储格式"><a href="#CSV数据存储格式" class="headerlink" title="CSV数据存储格式"></a>CSV数据存储格式</h4><p>CSV Comma-Separated Values</p><p>用逗号来分隔值的一种存储方式</p><p>是国际通用的一二维数据存储格式，一般.CSV扩展名</p><p>每行一个一维数据，采用逗号分隔，无空行</p><p>Excel和一般编辑软件都可以读入或另存为CSV文件</p><h4 id="二维数据的存储"><a href="#二维数据的存储" class="headerlink" title="二维数据的存储"></a>二维数据的存储</h4><p>如果某个元素缺失，逗号仍要保留</p><p>二维数据的表头可以作为数据存储，也可以另行存储</p><p>逗号为英文半角逗号，逗号与数据至今无额外空格</p><p>数据中的逗号可以用引号标识，也可加转义符</p><p>数据如何存的，按行存或者按列存都可以，具体由程序决定</p><p>一般索引习惯：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ls [row][column]<br></code></pre></div></td></tr></table></figure><h4 id="二维数据的处理"><a href="#二维数据的处理" class="headerlink" title="二维数据的处理"></a>二维数据的处理</h4><p>二维数据的读入处理</p><p>从CSV格式的文件读入数据</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">fo = <span class="hljs-built_in">open</span>(fname)<br>ls = []<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fo:<br>    line = line.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>    ls.append(line.split(<span class="hljs-string">&quot;,&quot;</span>))<br>fo.close()<br></code></pre></div></td></tr></table></figure><p>将数据写入CSV格式的文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ls = [[],[],[]] <span class="hljs-comment">#二维列表</span><br>f = <span class="hljs-built_in">open</span>(fname,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> ls:<br>    f.write(<span class="hljs-string">&#x27;,&#x27;</span>.join(item) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>f.close()<br></code></pre></div></td></tr></table></figure><p>遍历</p><p>采用二层循环</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ls = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]] <span class="hljs-comment">#二维列表</span><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> ls:<br>    <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> row:<br>        <span class="hljs-built_in">print</span>(column)<br></code></pre></div></td></tr></table></figure><h3 id="0x5-模块：wordcloud库的使用"><a href="#0x5-模块：wordcloud库的使用" class="headerlink" title="0x5 模块：wordcloud库的使用"></a>0x5 模块：wordcloud库的使用</h3><p>wordcloud是优秀的词云展示第三方库</p><p>将词语用可视化的方式，艺术的展示的文本</p><p>安装</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">(cmd命令行) pip install wordcloud<br></code></pre></div></td></tr></table></figure><p>如果安装失败，报错查阅 <a href="https://www.jb51.net/article/198751.htm">https://www.jb51.net/article/198751.htm</a></p><p>使用说明</p><p>wordcloud库把词云当作一个WordClloud对象</p><p>wordcloud.WordCloud()代理一个文本对应的词云</p><p>绘制词云的形状、尺寸和颜色都可以设定</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">w = wordcloud.WordCloud()<br></code></pre></div></td></tr></table></figure><p>以WordCloud对象为基础</p><p>配置参数、加载文本、输出文件</p><p><a href="https://imgchr.com/i/s7kttx"><img src="https://s3.ax1x.com/2021/01/23/s7kttx.png" alt="s7kttx.png"></a></p><p>常规方法</p><p>配置对象参数</p><p>加载词云文本</p><p>输出词云文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wordcloud<br>c = wordcloud.WordCloud()<br>c.generate(<span class="hljs-string">&quot;Wordcloud by Python&quot;</span>)<br>c.to_file(<span class="hljs-string">&quot;pyworcloud.png&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>最后生成图片宽400高200像素</p><p>操作过程</p><p>以空格分隔单词</p><p>单词出现次数并过滤</p><p>根据统计配置字号</p><p>颜色环境尺寸</p><p><a href="https://imgchr.com/i/s74oLj"><img src="https://s3.ax1x.com/2021/01/23/s74oLj.png" alt="s74oLj.png"></a></p><p><a href="https://imgchr.com/i/s7o7eH"><img src="https://s3.ax1x.com/2021/01/23/s7o7eH.png" alt="s7o7eH.png"></a></p><p><a href="https://imgchr.com/i/s77fKO"><img src="https://s3.ax1x.com/2021/01/23/s77fKO.png" alt="s77fKO.png"></a></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wordcloud<br>txt = <span class="hljs-string">&quot;life is short,you need python&quot;</span><br>w = wordcloud.WordCloud(\<br>       background_color = <span class="hljs-string">&quot;white&quot;</span>)<br>w.generate(txt)<br>w.to_file(<span class="hljs-string">&quot;pywcloud.png&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>中文构成词云</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> wordcloud<br>txt = <span class="hljs-string">&quot;程序设计语言是计算机能够理解和\</span><br><span class="hljs-string">失败用户操作意图的一种交互体系，它按照\</span><br><span class="hljs-string">特定规则组织计算机指令，使计算机能够自\</span><br><span class="hljs-string">动进行各种运算处理。&quot;</span><br>w = wordcloud.WordCloud(width=<span class="hljs-number">1000</span>,\<br>     font_path=<span class="hljs-string">&quot;msyh.ttc&quot;</span>,height=<span class="hljs-number">700</span>) <span class="hljs-comment">#此处msyh为字体微软雅黑文件路径</span><br>w.generate(<span class="hljs-string">&quot; &quot;</span>.join(jieba.lcut(txt)))  <span class="hljs-comment">#先变成列表，然后用join方法加空格</span><br>w.to_file(<span class="hljs-string">&quot;pywcloud.png&quot;</span>)  <span class="hljs-comment">#输出为图片</span><br></code></pre></div></td></tr></table></figure><h3 id="0x6-实例：政府工作报告词云"><a href="#0x6-实例：政府工作报告词云" class="headerlink" title="0x6 实例：政府工作报告词云"></a>0x6 实例：政府工作报告词云</h3><p>直观理解政策文件</p><p>《决胜全面建成小康社会 夺取新时代中国特色社会主义伟大胜利》</p><p>《中共中央关于乡村振兴的战略》</p><p>基本思路</p><p>读取文件</p><p>输出词云</p><p>观察结果、迭代</p><p>第一本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> wordcloud <br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xjp.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)  <span class="hljs-comment">#打开文本</span><br>t = f.read()  <span class="hljs-comment">#将文本内容一次性读入t</span><br>f.close()<br>ls = jieba.lcut(t)  <span class="hljs-comment">#对文本进行分词，将分词结果保存为列表类型</span><br>txt = <span class="hljs-string">&quot; &quot;</span>.join(ls)  <span class="hljs-comment">#词云需要长文本输入，用空格将列表元素链接起来</span><br>w = wordcloud.WordCloud(font_path = <span class="hljs-string">&quot;msyh.ttc&quot;</span>,\<br>    width = <span class="hljs-number">1000</span>,height = <span class="hljs-number">700</span>,background_color = <span class="hljs-string">&quot;white&quot;</span>)<br>w.generate(txt)<br>w.to_file(<span class="hljs-string">&quot;grwordcloud.png&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>限制文字输出量</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> wordcloud<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xjp.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>t = f.read()<br>f.close()<br>ls = jieba.lcut(t)<br>txt = <span class="hljs-string">&quot; &quot;</span>.join(ls)<br>w = wordcloud.WordCloud(font_path = <span class="hljs-string">&quot;msyh.ttc&quot;</span>,\<br>    width = <span class="hljs-number">1000</span>,height = <span class="hljs-number">700</span>,background_color = <span class="hljs-string">&quot;white&quot;</span>,\<br>                       max_words = <span class="hljs-number">15</span>) <span class="hljs-comment">#限制显示的词</span><br>w.generate(txt)<br>w.to_file(<span class="hljs-string">&quot;grwordcloud.png&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>词云形状</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">import</span> wordcloud<br><span class="hljs-keyword">from</span> scipy.misc <span class="hljs-keyword">import</span> imread  <span class="hljs-comment">#引入库，用来读取图片文件，形成图片变量</span><br>mask = imread(<span class="hljs-string">&quot; &quot;</span>)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xjp.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>t = f.read()<br>f.close()<br>ls = jieba.lcut(t)<br>txt = <span class="hljs-string">&quot; &quot;</span>.join(ls)<br>w = wordcloud.WordCloud(font_path = <span class="hljs-string">&quot;msyh.ttc&quot;</span>,mask = mask\ <span class="hljs-comment">#将mask赋给mask参数</span><br>    width = <span class="hljs-number">1000</span>,height = <span class="hljs-number">700</span>,background_color = <span class="hljs-string">&quot;white&quot;</span>,\<br>                       max_words = <span class="hljs-number">15</span>) <span class="hljs-comment">#限制显示的词</span><br>w.generate(txt)<br>w.to_file(<span class="hljs-string">&quot;grwordcloud.png&quot;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（三）Python函数库与数据类型</title>
    <link href="/2021/10/02/Python%E5%87%BD%E6%95%B0%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/10/02/Python%E5%87%BD%E6%95%B0%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="Python基本图形绘制"><a href="#Python基本图形绘制" class="headerlink" title="Python基本图形绘制"></a>Python基本图形绘制</h2><h3 id="0x1-深入理解Python语言"><a href="#0x1-深入理解Python语言" class="headerlink" title="0x1 深入理解Python语言"></a>0x1 深入理解Python语言</h3><ul><li><p>计算机技术演进</p><p>1946 - 1981 计算机系统结构时代    计算能力</p><p>1981 - 2008 个人pc计算机时代        交互问题  视窗、网络</p><p>2008 - 2016 复杂信息系统时代         数据问题</p><p>2017 -              人工智能时代             人类的问题</p><p>新计算时代</p></li><li><p>不同编程语言的初心和适用对象</p><p>C   理解计算机系统结构   关注性能   底层</p><p>JAVA  理解主客体关系    跨平台    软件类</p><p>C++   理解主客体关系   大规模程序     核心软件</p><p>VB   理解交互逻辑    桌面应用   </p><p>Python     理解问题求解    各类问题</p><p>python  是一个通用语言</p></li></ul><h3 id="0x2-python特点与优势"><a href="#0x2-python特点与优势" class="headerlink" title="0x2 python特点与优势"></a>0x2 python特点与优势</h3><ul><li><p>C的10%的代码量</p><p>强制可读性</p><p>较少的底层语法元素</p><p>多种编程方式</p><p>支持中文字符</p></li><li><p>强大的第三方库</p><p>快速增长的计算生态</p><p>避免重复造轮子</p><p>开放共享</p><p>跨操作系统平台</p></li><li><p>各语言的面向对象</p><p>C/C++： Python归Python ，C归C</p><p>Java ： 针对待定开发和岗位需求</p><p>HTML/CSS/JS：不可替代的前端技术，全栈能力</p></li><li><p>超级语言的诞生</p><p>粘性整合已有程序，形成庞大的生态</p><p>具有庞大的计算生态，可以很容易利用已有代码功能</p><p>编程思维是集成开发</p><p>完成2+3功能的高级语言</p><p>Python是唯一的超级语言</p></li></ul><h3 id="0x3-【实例】python绘制蟒蛇"><a href="#0x3-【实例】python绘制蟒蛇" class="headerlink" title="0x3 【实例】python绘制蟒蛇"></a>0x3 【实例】python绘制蟒蛇</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">import</span> turtle            <span class="hljs-comment">#引入了一个turtle绘图库</span><br>turtle.setup(<span class="hljs-number">650</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>turtle.penup()<br>turtle.fd(-<span class="hljs-number">250</span>)<br>turtle.pendown()<br>turtle.pensize(<span class="hljs-number">25</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;purple&quot;</span>)<br>turtle.seth(-<span class="hljs-number">40</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    turtle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)<br>    turtle.circle(-<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)<br>turrle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>/<span class="hljs-number">2</span>)<br>turtle.fd(<span class="hljs-number">40</span>)<br>turtle.circle(<span class="hljs-number">16</span>,<span class="hljs-number">180</span>)<br>turtle.fd(<span class="hljs-number">40</span>*<span class="hljs-number">2</span>/<span class="hljs-number">3</span>)<br>turtle.done()<br></code></pre></div></td></tr></table></figure><ul><li><p>举一反三</p><p>Python语法元素理解</p><p>程序参数的改变  颜色  长度 方向</p></li></ul><h3 id="0x4-模块一-turtle"><a href="#0x4-模块一-turtle" class="headerlink" title="0x4 模块一 turtle"></a>0x4 模块一 turtle</h3><ul><li><p>Python函数库之一</p><p>turtle库是入门级图形绘制函数库</p></li></ul><ul><li><p>python计算生态  = 标准库 + 第三方库</p><p>标准库 ：随解释器直接安装到操作系统中的功能模块</p><p>第三方库：需要经过安装才能使用的功能模块</p><p>库Library、包Package、模块Module ，统称模块</p></li></ul><ul><li><p>turtle的原理</p><p>有一直海龟，其实在窗体的正中心</p><p>在画布上游走，走过的轨迹形成了绘制的图形</p><p>海龟由程序控制，可以变换颜色、改变宽度等</p></li></ul><ul><li><p>模块1 turtle库的使用</p><p>turtle的绘图窗体</p><p>最小单位是像素</p><p><img src="https://s3.ax1x.com/2021/01/07/smQs6s.png" alt="屏幕截图 2021-01-07 183749"></p></li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#设置启动窗体的位置和大小</span><br>turtle.setup(width,height,startx,starty)<br>示例：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> turtle<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">400</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)  <span class="hljs-comment">#在左上角显示</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> turtle<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.setup(<span class="hljs-number">800</span>,<span class="hljs-number">400</span>)   <span class="hljs-comment">#默认在屏幕中央显示</span><br></code></pre></div></td></tr></table></figure><ul><li><p>turtle空间坐标体系</p><p>绝对坐标  以海龟在中心为原点，做平面坐标系</p></li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#示例1：</span><br><span class="hljs-keyword">import</span> turtle<br>turtle.goto(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)<br>turtle.goto(<span class="hljs-number">100</span>,-<span class="hljs-number">100</span>)<br>turtle.goto(-<span class="hljs-number">100</span>,-<span class="hljs-number">100</span>)<br>turtle.goto(-<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)<br>turtle.goto(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>    海龟坐标  </code></pre></div><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">turtle.fd(d) <span class="hljs-comment">#向海龟的正前方向运行</span><br>turtle.bk(d) <span class="hljs-comment">#向海龟的反方向运行</span><br>turtle.circle(r,angle)  <span class="hljs-comment">#以海龟左侧某一点为圆心，做曲线运行</span><br>r 半径  angle 角度<br></code></pre></div></td></tr></table></figure><p><img src="https://s3.ax1x.com/2021/01/07/smaGee.png" alt="屏幕截图 2021-01-07 183749"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle<br>turtle.circle(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br>turtle.circle(<span class="hljs-number">250</span>,<span class="hljs-number">80</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">45</span>)<br>turtle.circle(<span class="hljs-number">120</span>,<span class="hljs-number">45</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">30</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">30</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">10</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">5</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">5</span>)<br>turtle.circle(<span class="hljs-number">15</span>,<span class="hljs-number">50</span>)<br>turtle.circle(<span class="hljs-number">15</span>,<span class="hljs-number">170</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">5</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">5</span>)<br>turtle.circle(<span class="hljs-number">130</span>,<span class="hljs-number">10</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">30</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">30</span>)<br>turtle.circle(<span class="hljs-number">120</span>,<span class="hljs-number">45</span>)<br>turtle.circle(<span class="hljs-number">150</span>,<span class="hljs-number">45</span>)<br>turtle.circle(<span class="hljs-number">250</span>,<span class="hljs-number">80</span>)<br>turtle.circle(<span class="hljs-number">100</span>,<span class="hljs-number">10</span>)<br>turtle.circle(<span class="hljs-number">100</span>,<span class="hljs-number">1</span>)<br><span class="hljs-comment">#心形</span><br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>    绝对角度坐标体系，x轴为0度</code></pre></div><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">turtle.seth(angle)   <span class="hljs-comment">#-seth()改变海龟行进方向，但不行进,angle为绝对度数</span><br>turtle.left(angle)   <span class="hljs-comment">#改变运行方向</span><br>turtle.right(angle)  <span class="hljs-comment">#改变运行方向</span><br></code></pre></div></td></tr></table></figure><ul><li><p>RGB色彩体系</p><p>红黄蓝三通道</p><p>RGB小数值、整数值</p></li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">turtle.colormode(mode) <span class="hljs-comment">#确定是用小数值还是整数值</span><br><span class="hljs-number">1.0</span>  表示小数值模式<br><span class="hljs-number">255</span>  表示整数值模式<br></code></pre></div></td></tr></table></figure><h3 id="0x5-turtle-程序语法元素分析"><a href="#0x5-turtle-程序语法元素分析" class="headerlink" title="0x5 turtle 程序语法元素分析"></a>0x5 turtle 程序语法元素分析</h3><h4 id="库引用与impot"><a href="#库引用与impot" class="headerlink" title="库引用与impot"></a>库引用与impot</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">import</span> turtle            <span class="hljs-comment">#引入了一个turtle绘图库</span><br>turtle.setup(<span class="hljs-number">650</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>turtle.penup()<br>turtle.fd(-<span class="hljs-number">250</span>)<br>turtle.pendown()<br>turtle.pensize(<span class="hljs-number">25</span>)<br>turtle.pencolor(<span class="hljs-string">&quot;purple&quot;</span>)<br>turtle.seth(-<span class="hljs-number">40</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    turtle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)<br>    turtle.circle(-<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)<br>turrle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>/<span class="hljs-number">2</span>)<br>turtle.fd(<span class="hljs-number">40</span>)<br>turtle.circle(<span class="hljs-number">16</span>,<span class="hljs-number">180</span>)<br>turtle.fd(<span class="hljs-number">40</span>*<span class="hljs-number">2</span>/<span class="hljs-number">3</span>)<br>turtle.done()<br></code></pre></div></td></tr></table></figure><p>turtle.的编程风格</p><h4 id="库引用"><a href="#库引用" class="headerlink" title="库引用"></a>库引用</h4><p>扩充Python程序功能的方式</p><p>使用import保留字完成，采用.()编码风格   </p><p>import &lt;库名&gt;</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">import</span>&lt;库名&gt; <br>&lt;库名&gt; . &lt;函数名&gt;(&lt;函数参数&gt;)<br></code></pre></div></td></tr></table></figure><h4 id="import用法"><a href="#import用法" class="headerlink" title="import用法"></a>import用法</h4><p>使用from和import保留字共同完成</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">from</span> &lt;库名&gt; <span class="hljs-keyword">import</span> &lt;函数名&gt;<br><span class="hljs-keyword">from</span> &lt;库名&gt; <span class="hljs-keyword">import</span>*<br>&lt;函数名&gt;（函数参数）<br></code></pre></div></td></tr></table></figure><p>使用上述方式可以不用turtle. 直接函数名加函数参数，如下</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span>*           <span class="hljs-comment">#引入了一个turtle绘图库</span><br>setup(<span class="hljs-number">650</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)<br>penup()<br>fd(-<span class="hljs-number">250</span>)<br>pendown()<br>pensize(<span class="hljs-number">25</span>)<br>pencolor(<span class="hljs-string">&quot;purple&quot;</span>)<br>seth(-<span class="hljs-number">40</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)<br>    circle(-<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)    <span class="hljs-comment">#注意缩进，缩进不统一也会报错</span><br>circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>/<span class="hljs-number">2</span>)<br>fd(<span class="hljs-number">40</span>)<br>circle(<span class="hljs-number">16</span>,<span class="hljs-number">180</span>)<br>fd(<span class="hljs-number">40</span>*<span class="hljs-number">2</span>/<span class="hljs-number">3</span>)<br>done()<br></code></pre></div></td></tr></table></figure><ul><li>两种方法比较</li></ul><p>&lt;库名&gt; . &lt;函数名&gt;(&lt;函数参数&gt;) </p><p>&lt;函数名&gt;（函数参数）</p><p> 第一种方法不会出现函数重名问题</p><p> 第二种方法会出现</p><h4 id="import更多用法"><a href="#import更多用法" class="headerlink" title="import更多用法"></a>import更多用法</h4><p>使用import和as保留字共同完成</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">import</span> &lt;库名&gt; <span class="hljs-keyword">as</span> &lt;库别名&gt;   <span class="hljs-comment"># 相当于自定义了一个简便的名字</span><br>&lt;库别名&gt; . &lt;函数名&gt;(&lt;函数参数&gt;) <br></code></pre></div></td></tr></table></figure><ul><li>turtle画笔控制函数</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">turtle.penup()      <span class="hljs-comment">#抬起画笔，海龟在飞行</span><br>turtle.pendown()    <span class="hljs-comment">#落下画笔，海龟在爬行</span><br>turtle.pensize(<span class="hljs-number">25</span>)  <span class="hljs-comment"># 设置画笔宽度 别名  turtle.width(width)</span><br>turtle.pencolor(<span class="hljs-string">&quot;purple&quot;</span>)  <span class="hljs-comment">#修改画笔颜色，参数字符串小写</span><br><br><span class="hljs-comment">#pencolor(color)的参数可以有三种形式</span><br>颜色字符串   turtle.pencolor(<span class="hljs-string">&quot;purple&quot;</span>)<br>RGB的小数值  turtle.pencolor(<span class="hljs-number">0.62</span>,<span class="hljs-number">0.42</span>,<span class="hljs-number">0.13</span>)<br>RGB的元组值  turtle.pencolor((<span class="hljs-number">0.62</span>,<span class="hljs-number">0.42</span>,<span class="hljs-number">0.13</span>))<br></code></pre></div></td></tr></table></figure><p>将海龟想象为画笔</p><p>画笔操作后一直有效，一般成对出现</p><p>turtle运动控制函数</p><p>控制海龟行进方向：走直线或者曲线</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#向前进，走直线</span><br>turtle.forward(d)  别名  turtle.fd(d)<br>d ：行进距离，可以为负数，倒退行进<br><br><span class="hljs-comment">#根据半径r绘制extent角度的弧形</span><br>turtle.circle(r,extent=<span class="hljs-literal">None</span>)  <br>r：默认圆心在海龟左侧r距离的位置<br>extent ：绘制角度，默认是<span class="hljs-number">360</span>度整圆<br></code></pre></div></td></tr></table></figure><p>turtle方向控制函数</p><p>控制海龟面对方向：绝对角度和海龟角度</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#当前海龟方向，改变为某一角度方向</span><br>turtle.setheading(angle)   别名  turtle.seth(angle)<br>angle：改变行进绝对方向，海龟走角度<br><br><span class="hljs-comment">#控制海龟向左转或向右转</span><br>turtle.left(angle)<br>turtle.right(angle)<br>angle： 在海归当前行进方向上旋转的角度<br></code></pre></div></td></tr></table></figure><h4 id="基本循环语句与range函数"><a href="#基本循环语句与range函数" class="headerlink" title="基本循环语句与range函数"></a>基本循环语句与range函数</h4><p>循环语句</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span>&lt;执行次数&gt; <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(&lt;要执行多少次&gt;):<br>   &lt;被循环执行的语句&gt;<br>    <br><span class="hljs-comment">#range的参数是循环的次数</span><br><span class="hljs-comment">#for in  之间的变量是每次执行的计数，0到&lt;执行次数&gt; - 1</span><br><br>示例：<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i)<br>输出：<br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-comment">#输出print(&quot;Hello:&quot;,i) 中的逗号在输出时显示为空格</span><br></code></pre></div></td></tr></table></figure><p>range函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#产生循环计数序列</span><br><span class="hljs-built_in">range</span>(N)  即产生<span class="hljs-number">0</span>到N-<span class="hljs-number">1</span>的整数序列，共N个<br>如：<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>),则产生<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span><br><br><span class="hljs-built_in">range</span>(M,N) 即产生M到N-<span class="hljs-number">1</span>的整数序列，共N-M个<br>如：<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>，<span class="hljs-number">5</span>),则产生<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><ul><li>python蟒蛇绘制代码分析</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#PythonDraw.py</span><br><span class="hljs-keyword">import</span> turtle                   <span class="hljs-comment">#引入了一个turtle绘图库</span><br>turtle.setup(<span class="hljs-number">650</span>,<span class="hljs-number">350</span>,<span class="hljs-number">200</span>,<span class="hljs-number">200</span>)   <span class="hljs-comment">#设立了一个窗体</span><br>turtle.penup()       <span class="hljs-comment">#将画笔抬起</span><br>turtle.fd(-<span class="hljs-number">250</span>)<span class="hljs-comment">#海龟倒退250</span><br>turtle.pendown()<span class="hljs-comment">#放下画笔</span><br>turtle.pensize(<span class="hljs-number">25</span>)<span class="hljs-comment">#设置画笔宽度</span><br>turtle.pencolor(<span class="hljs-string">&quot;purple&quot;</span>)       <span class="hljs-comment">#设置画笔颜色</span><br>turtle.seth(-<span class="hljs-number">40</span>)                <span class="hljs-comment">#设置画笔起始角度为-40度</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):              <span class="hljs-comment">#利用循环绘制路径，循环4次</span><br>    turtle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)        <span class="hljs-comment">#先以半径为40像素，绘制80度</span><br>    turtle.circle(-<span class="hljs-number">40</span>,<span class="hljs-number">80</span>)       <span class="hljs-comment">#再以反向40像素为半径，绘制80度</span><br>turrle.circle(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>/<span class="hljs-number">2</span>)          <span class="hljs-comment">#最后以40像素为半径，绘制40度</span><br>turtle.fd(<span class="hljs-number">40</span>)                   <span class="hljs-comment">#再向前走40像素</span><br>turtle.circle(<span class="hljs-number">16</span>,<span class="hljs-number">180</span>)           <span class="hljs-comment">#以16像素为半径，画180度</span><br>turtle.fd(<span class="hljs-number">40</span>*<span class="hljs-number">2</span>/<span class="hljs-number">3</span>)               <span class="hljs-comment">#当前方向向前走80/3像素</span><br>turtle.done()                   <span class="hljs-comment">#手动退出，删掉即自动退出</span><br></code></pre></div></td></tr></table></figure><h2 id="python基本数据类型"><a href="#python基本数据类型" class="headerlink" title="python基本数据类型"></a>python基本数据类型</h2><h3 id="0x1数字类型及操作"><a href="#0x1数字类型及操作" class="headerlink" title="0x1数字类型及操作"></a>0x1数字类型及操作</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><p>与数学整数概念一致</p><p>pow(x,y)  计算x的y次方，==想算多大算多大==</p><p>四种进制表示：</p><p>十进制：1010、99、-217</p><p>二进制：0b或0B开头  ：  0b0101，-0B1010</p><p>八进制：以0o或0O开头： 0o123，0O456</p><p>十六进制：以0x或0X开头：0x9a，- 0X89</p><h4 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h4><p>与数学实数概念一致</p><p>浮点数取值范围和小鼠精度都存在限制</p><p>取值范围数量级约±10的308次方，精度数量约10的-16</p><p>浮点数之间的运算存在不确定尾数，不是bug</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.1</span> +<span class="hljs-number">0.2</span><br><span class="hljs-number">0.30000000000000004</span><br></code></pre></div></td></tr></table></figure><ul><li><p>存在不确定尾数的原因</p><p>计算机中是二进制存储的，二进制表示小数可以无限接近0.1，但永远不完全相同</p><p>所以十进制表示的0.1加0.2结果无限接近0.3，但可能存在尾数</p></li></ul><h4 id="round函数"><a href="#round函数" class="headerlink" title="round函数"></a>round函数</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">round</span>(x,d): 对x四舍五入，d是小数截取位数<br>    <br>示例：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>,<span class="hljs-number">1</span>) == <span class="hljs-number">0.3</span><br><span class="hljs-literal">True</span><br><span class="hljs-comment">#浮点数间运算及比较用round()函数辅助</span><br><span class="hljs-comment">#不确定位数一般在10的-16次方左右，固该函数有效</span><br></code></pre></div></td></tr></table></figure><h4 id="科学计数法表示浮点数"><a href="#科学计数法表示浮点数" class="headerlink" title="科学计数法表示浮点数"></a>科学计数法表示浮点数</h4><p>格式e表示 a*10的b次方</p><p>例如：4.3e-3  值为0.0043</p><h4 id="复数类型"><a href="#复数类型" class="headerlink" title="==复数类型=="></a>==复数类型==</h4><p>x的平方 = -1 ，那么x的值是？</p><p>定义 ：$j=\sqrt{(-1)}$  </p><p>a + bj 被称为复数，其中a为实部，b是虚部</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>z = <span class="hljs-number">10</span> + <span class="hljs-number">10j</span>   <span class="hljs-comment">#复数类型</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(z)<br>(<span class="hljs-number">10</span>+<span class="hljs-number">10j</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(a)<br><span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h4 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="数值运算操作符"></a>数值运算操作符</h4><ul><li>加减乘除与C相同</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#特别注意</span><br>x / y      <span class="hljs-comment">#结果是浮点数除法</span><br>x // y     <span class="hljs-comment">#结果是整数无小数除法，直接约去小数，不四舍五入</span><br>示例：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span> // <span class="hljs-number">4</span><br><span class="hljs-number">0</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span>/<span class="hljs-number">2</span><br><span class="hljs-number">3.5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">7</span>//<span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">19</span> / <span class="hljs-number">5</span><br><span class="hljs-number">3.8</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">19</span>//<span class="hljs-number">5</span><br><span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure><ul><li>模运算(取余运算)与C相同</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">x % y  <br></code></pre></div></td></tr></table></figure><ul><li>幂运算</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">x ** y  <span class="hljs-comment">#表示x的y次幂，当y是小数时，做开方运算</span><br>示例：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">2</span> ** <span class="hljs-number">10</span><br><span class="hljs-number">1024</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">49</span> ** <span class="hljs-number">0.5</span><br><span class="hljs-number">7.0</span><br></code></pre></div></td></tr></table></figure><ul><li>二元操作符对应的增强赋值操作</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">x op=y  相当于  x = x op y<br><span class="hljs-comment">#op 表示二元操作符，如 +、 -、 *、 /、 //、%、**</span><br><span class="hljs-comment">#与C中的  += 意思相同</span><br></code></pre></div></td></tr></table></figure><p>不同数据类型间可以混合运算，生成结果为“最宽”类型</p><p>注意可能会产生不确定的尾数</p><h4 id="数值运算函数"><a href="#数值运算函数" class="headerlink" title="数值运算函数"></a>数值运算函数</h4><table><thead><tr><th>函数及使用</th><th>描述</th></tr></thead><tbody><tr><td>abs(x)</td><td>绝对值，x的绝对值</td></tr><tr><td>divmod(x,y)</td><td>商余,(x//y,x%y),同时输出商和余数</td></tr><tr><td>pow(x,y,z)</td><td>幂余运算，(x**y)%z，参数z可省略</td></tr><tr><td>round(x,d)</td><td>四舍五入，d是保留小数位数，默认为零</td></tr><tr><td>max(a,b,c,…)</td><td>返回数字序列中最大值</td></tr><tr><td>min(a,b,c,…)</td><td>返回数字序列最小值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">abs</span>(-<span class="hljs-number">1</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">divmod</span>(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>)<br>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)<br><span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>)<br><span class="hljs-number">1024</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(<span class="hljs-number">10.12345</span>,<span class="hljs-number">4</span>)<br><span class="hljs-number">10.1235</span> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>)<br><span class="hljs-number">9</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">min</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">23</span>)<br><span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h4 id="数字类型转换函数"><a href="#数字类型转换函数" class="headerlink" title="数字类型转换函数"></a>数字类型转换函数</h4><table><thead><tr><th>函数及使用</th><th>描述</th></tr></thead><tbody><tr><td>int(x)</td><td>转变为整型，取整数部分</td></tr><tr><td>float(x)</td><td>转变为浮点数，增加小数部分</td></tr><tr><td>complex(x)</td><td>将x变成复数，增加虚数部分</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-number">4.35</span>)<br><span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-number">1.23</span>)<br><span class="hljs-number">1.23</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">float</span>(<span class="hljs-number">1</span>)<br><span class="hljs-number">1.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">complex</span>(<span class="hljs-number">5</span>)<br>(<span class="hljs-number">5</span>+<span class="hljs-number">0j</span>)<br></code></pre></div></td></tr></table></figure><h3 id="0x2-【实例】-天天向上的力量"><a href="#0x2-【实例】-天天向上的力量" class="headerlink" title="0x2 【实例】 天天向上的力量"></a>0x2 【实例】 天天向上的力量</h3><p>基本问题，持续价值</p><p>1.01的365次方</p><p>0.99的365次方</p><h4 id="问题1-千分之一的力量"><a href="#问题1-千分之一的力量" class="headerlink" title="问题1  千分之一的力量"></a>问题1  千分之一的力量</h4><p>1.001的365次方</p><p>0.999的365次方</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#DaydayupQ1.py</span><br>x = <span class="hljs-built_in">pow</span>(<span class="hljs-number">1.001</span>,<span class="hljs-number">365</span>)<br>y = <span class="hljs-built_in">pow</span>(<span class="hljs-number">0.999</span>,<span class="hljs-number">365</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;向上：&#123;:.2f&#125;,向下：&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(x,y))<br><br>输出：<br>向上：<span class="hljs-number">1.44</span>,向下：<span class="hljs-number">0.69</span><br></code></pre></div></td></tr></table></figure><h4 id="问题2-千分之五和1"><a href="#问题2-千分之五和1" class="headerlink" title="问题2 千分之五和1%"></a>问题2 千分之五和1%</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#DaydayupQ1.py</span><br>dayfactor = <span class="hljs-number">0.005</span>  <br>dayup = <span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span> + dayfactor,<span class="hljs-number">365</span>)<br>daydown = <span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span> - dayfactor,<span class="hljs-number">365</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;向上：&#123;:.2f&#125;,向下：&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dayup,daydown))<br><br>输出：<br>向上：<span class="hljs-number">6.17</span>,向下：<span class="hljs-number">0.16</span><br><br><span class="hljs-comment">#DaydayupQ1.py</span><br>dayfactor = <span class="hljs-number">0.01</span><br>dayup = <span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span> + dayfactor,<span class="hljs-number">365</span>)<br>daydown = <span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span> - dayfactor,<span class="hljs-number">365</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;向上：&#123;:.2f&#125;,向下：&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dayup,daydown))<br><br>输出：<br>向上：<span class="hljs-number">37.78</span>,向下：<span class="hljs-number">0.03</span><br></code></pre></div></td></tr></table></figure><h4 id="问题3-工作日力量"><a href="#问题3-工作日力量" class="headerlink" title="问题3 工作日力量"></a>问题3 工作日力量</h4><p>一周  5天工作日每天提升1%，休息日2天每天退步1%</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#DaydayupQ3.py</span><br>dayup = <span class="hljs-number">1.0</span><br>dayfactor = <span class="hljs-number">0.01</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">365</span>):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">7</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">6</span>,<span class="hljs-number">0</span>]:<br>        dayup = dayup *(<span class="hljs-number">1</span>-dayfactor)<br>    <span class="hljs-keyword">else</span>:<br>        dayup = dayup *(<span class="hljs-number">1</span>+dayfactor)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一年后的成长：&#123;:.2f&#125;倍&quot;</span>.<span class="hljs-built_in">format</span>(dayup))<br>输出：<br>一年后的成长：<span class="hljs-number">4.63</span>倍<br></code></pre></div></td></tr></table></figure><p>结论：问题3的结果4.63倍介于，问题1的365天每天千分之一的1.44倍和问题2的365每天千分之五6.17倍之间。</p><h4 id="问题4-工作日的努力"><a href="#问题4-工作日的努力" class="headerlink" title="问题4 工作日的努力"></a>问题4 工作日的努力</h4><p>A  每天1% </p><p>B  工作日提升x，休息日下降1%</p><p>问当x为多少时，A与B的提升相等？</p><p><a href="https://imgchr.com/i/sM0kwV"><img src="https://s3.ax1x.com/2021/01/09/sM0kwV.png" alt="sM0kwV.png"></a></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#DaydayupQ4.py</span><br><span class="hljs-comment">#def用来定义函数，占位符df是dayfactor的简写。</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dayUP</span>(<span class="hljs-params">df</span>):</span>      <span class="hljs-comment">#函数dayUP</span><br>    dayup = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">365</span>):<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">7</span> <span class="hljs-keyword">in</span>[<span class="hljs-number">6</span>,<span class="hljs-number">0</span>]:<br>            dayup = dayup*(<span class="hljs-number">1</span> - <span class="hljs-number">0.01</span>)<br>        <span class="hljs-keyword">else</span>:<br>            dayup = dayup * (<span class="hljs-number">1</span> + df)<br>    <span class="hljs-keyword">return</span> dayup<br><span class="hljs-comment">#根据df参数不同，函数内部会返回对应的结果，返回dayup</span><br><br>dayfactor = <span class="hljs-number">0.01</span><br><span class="hljs-keyword">while</span> dayUP(dayfactor) &lt; <span class="hljs-number">37.78</span>:  <span class="hljs-comment">#调用了上述函数</span><br>    dayfactor += <span class="hljs-number">0.001</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;工作日的努力参数是：&#123;:.3f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(dayfactor)) <span class="hljs-comment">#输出比上的结果</span><br><br>输出：<br>工作日的努力参数是：<span class="hljs-number">0.019</span><br></code></pre></div></td></tr></table></figure><p>结论：工作日要努力约2%，才能跟不休息每天学1%的人相同</p><h3 id="0x3-字符串类型及操作"><a href="#0x3-字符串类型及操作" class="headerlink" title="0x3 字符串类型及操作"></a>0x3 字符串类型及操作</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>由一对 ‘  ’ 或 ” “ 包含的一连串字符</p><p>可以索引”  “[ ]</p><h4 id="字符串有四种表示方法"><a href="#字符串有四种表示方法" class="headerlink" title="字符串有四种表示方法"></a>字符串有四种表示方法</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">前两种<br><span class="hljs-string">&quot;请输如带有符号的温度值&quot;</span>  或者   <span class="hljs-string">&#x27;C&#x27;</span><br><br>后两种<br><span class="hljs-string">&#x27;&#x27;&#x27; Python</span><br><span class="hljs-string">             语言 &#x27;&#x27;&#x27;</span>  <br>或者<br><span class="hljs-string">&quot;&quot;&quot; Python</span><br><span class="hljs-string">             语言  &quot;&quot;&quot;</span><br><br><span class="hljs-comment">#注释也是&#x27;&#x27;&#x27; &#x27;&#x27;&#x27;，是因为没有被作用的字符串则被认为是注释</span><br></code></pre></div></td></tr></table></figure><p>如果要在字符串内部表示 “ 则用 ‘ 构成字符串</p><p>如果要在字符串内部表示 ’ 则用 “ 构成字符串</p><p>如果 ‘ 和 ” 都要在字符串内部表示，则用  ’‘’  构成字符串  </p><p><img src="https://s3.ax1x.com/2021/01/06/sVUaSU.png" alt="image-20210106182910519"></p><h4 id="索引-、-切片"><a href="#索引-、-切片" class="headerlink" title="索引 、 切片"></a>索引 、 切片</h4><p>切片高级用法</p><p>&lt;字符串&gt;[M:N] ，M缺失变送至开头，缺失表示至结尾</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;这是一个字符串&quot;</span>[:<span class="hljs-number">3</span>]<br><span class="hljs-string">&#x27;这是一&#x27;</span><br></code></pre></div></td></tr></table></figure><p>&lt;字符串&gt;[M:N:K]，使用[M:N:K]根据步长对字符串切片，k表示每移几位进行切片</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;123456789&quot;</span>[<span class="hljs-number">1</span>:<span class="hljs-number">7</span>:<span class="hljs-number">2</span>]   <br><span class="hljs-string">&#x27;246&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;123456789&quot;</span>[::-<span class="hljs-number">1</span>]  <span class="hljs-comment">#可实现逆序的效果</span><br><span class="hljs-string">&#x27;987654321&#x27;</span><br><br>更多测试<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;123456789&quot;</span>[<span class="hljs-number">2</span>::-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;321&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;123456789&quot;</span>[<span class="hljs-number">0</span>::-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;123456789&quot;</span>[:<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;987&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="转义符"><a href="#转义符" class="headerlink" title="转义符 \"></a>转义符 \</h4><p>转义符表达特定字符的本意</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-string">&quot;这里有个双引号\&quot;  &quot;</span><br><span class="hljs-string">&#x27;这里有个双引号&quot;  &#x27;</span><br><br>\b 回退  \n换行  \r回车<br></code></pre></div></td></tr></table></figure><h4 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h4><table><thead><tr><th>操作符及使用</th><th align="left">描述</th></tr></thead><tbody><tr><td>x + y</td><td align="left">连接两个字符串x和y</td></tr><tr><td>n *x</td><td align="left">复制n次字符串x</td></tr><tr><td>x in s</td><td align="left">如果x是s的子串，返回true，否则返回False</td></tr></tbody></table><h4 id="获取星期字符串"><a href="#获取星期字符串" class="headerlink" title="获取星期字符串"></a>获取星期字符串</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#WeekNamePrintV1.py</span><br>weekStr = <span class="hljs-string">&quot;星期一星期二星期三星期四星期五星期六星期日&quot;</span><br>weekID = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入星期数字(1-7):&quot;</span>))<br>pos = (weekId - <span class="hljs-number">1</span>) * <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(weekStr[pos:pos+<span class="hljs-number">3</span>])<br><br>改进版<br><span class="hljs-comment">#WeekNamePrintV1.py</span><br>weekStr = <span class="hljs-string">&quot;一二三四五六日&quot;</span><br>weekID = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入星期数字(1-7):&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;星期&quot;</span>+weekStr[weekID])<br></code></pre></div></td></tr></table></figure><h4 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h4><table><thead><tr><th>函数及使用</th><th>描述</th></tr></thead><tbody><tr><td>len(x)</td><td>返回字符串的长度</td></tr><tr><td>str(x)</td><td>返回任意类型x对应的字符串形式,与eval()相对应</td></tr><tr><td>hen(x) 或oct(x)</td><td>整数x的十六进制或八进制小写形式字符串</td></tr><tr><td>chr(u)</td><td>u为Unicode编码，返回其对应的字符</td></tr><tr><td>ord(x)</td><td>x为字符，返回其对应的Unicode编码</td></tr></tbody></table><h4 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h4><p>python字符串的编码方式，适用于各国语言</p><p>从0到1114111(0x10FFFF)空间，每个编码对应一个字符</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#示例1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;1 + 1 = 2 &quot;</span> + <span class="hljs-built_in">chr</span>(<span class="hljs-number">10004</span>)<br><span class="hljs-string">&#x27;1 + 1 = 2 ✔&#x27;</span><br><br><span class="hljs-comment">#示例2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">chr</span>(<span class="hljs-number">9801</span>)<br><span class="hljs-string">&#x27;♉&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;♉&quot;</span>))<br><span class="hljs-string">&#x27;9801&#x27;</span><br></code></pre></div></td></tr></table></figure><h4 id="十二星座"><a href="#十二星座" class="headerlink" title="十二星座"></a>十二星座</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">9800</span> +i))   <span class="hljs-comment">#无end参数时换行</span><br><br><br>♈<br>♉<br>♊<br>♋<br>♌<br>♍<br>♎<br>♏<br>♐<br>♑<br>♒<br>♓<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">9800</span> +i), end = <span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-comment">#end参数 = 空时，不换行</span><br><br><br>♈♉♊♋♌♍♎♏♐♑♒♓<br></code></pre></div></td></tr></table></figure><h4 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h4><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>“方法”在编程中是专有名词</p><p>方法特指  a . b( ) 风格中的函数b( )</p><p>方法本身也是函数，但与a有关，b是a提供的函数</p><ul><li><p>面向对象中</p><p>a为对象，b为对象能够提供的功能</p><p>方法必用 . 的方式执行</p></li></ul><h5 id="一些以方法形式提供的字符串处理功能"><a href="#一些以方法形式提供的字符串处理功能" class="headerlink" title="一些以方法形式提供的字符串处理功能"></a>一些以方法形式提供的字符串处理功能</h5><table><thead><tr><th>方法及使用</th><th>描述</th></tr></thead><tbody><tr><td>str . lower()或str.upper()</td><td>返回字符串的副本，全部字符小写/大写</td></tr><tr><td>str . split(sep）</td><td>返回一个列表，由str根据sep被分隔的部分组成</td></tr><tr><td>str . count(sub)</td><td>返回子串sub在str中出现的次数</td></tr><tr><td>str.replace(old,new)</td><td>返回字符串str副本，所有old子串被替换为new</td></tr><tr><td>str.center(width[,fillchar])</td><td>字符串str根据宽度with居中，fillchar可选,宽度是新的整个字符串的宽度</td></tr><tr><td>str.strip(chars)</td><td>从str中去掉在其左侧和右侧chars中列出的字符</td></tr><tr><td>str.join(iter)</td><td>在iter变量除最后元素外每个元素后增加一个str</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;abcdefg&quot;</span>.upper()<br><span class="hljs-string">&#x27;ABCDEFG&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;a,b,c,d,e,f,g&quot;</span>.split(<span class="hljs-string">&quot;,&quot;</span>)     <span class="hljs-comment">#默认是空格</span><br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;an apple is bad&quot;</span>.count(<span class="hljs-string">&quot;a&quot;</span>)<br><span class="hljs-number">3</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;abcdefg&quot;</span>.split(<span class="hljs-string">&quot;c&quot;</span>)  <br>[<span class="hljs-string">&#x27;ab&#x27;</span>, <span class="hljs-string">&#x27;defg&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;python&quot;</span>.replace(<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;n123.io&quot;</span>)<br><span class="hljs-string">&#x27;python123.io&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;an&quot;</span>.center(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;=&quot;</span>)<br><span class="hljs-string">&#x27;====an====&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;=python =&quot;</span>.strip(<span class="hljs-string">&quot; =np&quot;</span>)<br><span class="hljs-string">&#x27;ytho&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;,&quot;</span>.join(<span class="hljs-string">&quot;12345&quot;</span>)<br><span class="hljs-string">&#x27;1,2,3,4,5&#x27;</span><br></code></pre></div></td></tr></table></figure><h5 id="字符串类型的格式化"><a href="#字符串类型的格式化" class="headerlink" title="字符串类型的格式化"></a>字符串类型的格式化</h5><p>格式化是对字符串进行格式表达的方式</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&lt;模板字符串&gt;.<span class="hljs-built_in">format</span>(&lt;逗号分隔的参数&gt;)<br></code></pre></div></td></tr></table></figure><h5 id="槽"><a href="#槽" class="headerlink" title="槽"></a>槽</h5><p>一对 { } 表示槽</p><p>不同的对应位置有不同的输出</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">示例：<br>“&#123;&#125;:计算机&#123;&#125;的CPU占用率为&#123;&#125;%”.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;2018-10-10&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">10</span>)  <span class="hljs-comment">#其中有三个槽，与C中输出的位置对应相同，默认按顺序一一对应</span><br><br>“&#123;<span class="hljs-number">0</span>&#125;:计算机&#123;<span class="hljs-number">1</span>&#125;的CPU占用率为&#123;<span class="hljs-number">2</span>&#125;%”.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;2018-10-10&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">10</span>)  <span class="hljs-comment">#对应位置</span><br>    <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;0&#125;:计算机&#123;1&#125;的CPU占用率为&#123;2&#125;%&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;2018-10-10&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">10</span>))<br><span class="hljs-number">2018</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>:计算机C的CPU占用率为<span class="hljs-number">10</span>%<br>    <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;1&#125;:计算机&#123;0&#125;的CPU占用率为&#123;2&#125;%&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;2018-10-10&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">10</span>)) <span class="hljs-comment">#交换后，输出也交换</span><br>C:计算机<span class="hljs-number">2018</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>的CPU占用率为<span class="hljs-number">10</span>%<br>    <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:计算机&#123;&#125;的CPU占用率为&#123;&#125;%&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;2018-10-10&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">10</span>))  <span class="hljs-comment">#默认按顺序对应</span><br><span class="hljs-number">2018</span>-<span class="hljs-number">10</span>-<span class="hljs-number">10</span>:计算机C的CPU占用率为<span class="hljs-number">10</span>%<br></code></pre></div></td></tr></table></figure><h5 id="format-方法的格式控制"><a href="#format-方法的格式控制" class="headerlink" title="format()方法的格式控制"></a>format()方法的格式控制</h5><p>类似于C输出的格式控制</p><table><thead><tr><th align="center">：</th><th align="center">&lt;填充&gt;</th><th align="center">&lt;对齐&gt;</th><th align="center">&lt;宽度&gt;</th><th align="center">&lt;,&gt;</th><th>&lt; . 精度&gt;</th><th>&lt;类型&gt;</th></tr></thead><tbody><tr><td align="center">引导符号</td><td align="center">用于填充的单个字符</td><td align="center">&lt; 左对齐 ，&gt; 右对齐，^ 居中对齐</td><td align="center">槽设定的输出宽度</td><td align="center">数字的千位分隔符</td><td>浮点数小数精度或字符串最大输出长度</td><td>整数类型b,c,d,o,x,X浮点数类型e，E，f，%</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">示例：<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;0:=^20&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;PYTHON&quot;</span>)<br><span class="hljs-string">&#x27;=======PYTHON=======&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;1:=^20&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;PYTHON&quot;</span>,<span class="hljs-string">&quot;ABC&quot;</span>)<br><span class="hljs-string">&#x27;========ABC=========&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;1:=&lt;20&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;PYTHON&quot;</span>,<span class="hljs-string">&quot;ABC&quot;</span>)<br><span class="hljs-string">&#x27;ABC=================&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;1:20&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;PYTHON&quot;</span>,<span class="hljs-string">&quot;ABC&quot;</span>)<br><span class="hljs-string">&#x27;ABC                 &#x27;</span>             <span class="hljs-comment">#默认填充空格</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;0:,.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">1234567.8910</span>)<br><span class="hljs-string">&#x27;1,234,567.89&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;0:b&#125;,&#123;0:c&#125;,&#123;0:d&#125;,&#123;0:o&#125;,&#123;0:x&#125;,&#123;0:X&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">425</span>)   <span class="hljs-comment">#不同进制表示</span><br><span class="hljs-string">&#x27;110101001,Ʃ,425,651,1a9,1A9&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;0:e&#125;,&#123;0:E&#125;,&#123;0:f&#125;,&#123;0:%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3.14</span>)<br><span class="hljs-string">&#x27;3.140000e+00,3.140000E+00,3.140000,314.000000%&#x27;</span><br></code></pre></div></td></tr></table></figure><p>==中文可以放到字符串中，不能在语法中出现==</p><h3 id="0x4-time库的使用"><a href="#0x4-time库的使用" class="headerlink" title="0x4 time库的使用"></a>0x4 time库的使用</h3><h4 id="time库基本介绍"><a href="#time库基本介绍" class="headerlink" title="time库基本介绍"></a>time库基本介绍</h4><p>python中的标准库</p><p>计算机时间的表达</p><p>提供获取系统时间并格式化输出功能</p><p>提供系统级精确计时功能没用于程序性能分析</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>time.&lt;b&gt;()<br><span class="hljs-comment">#包括三类函数</span><br><span class="hljs-comment">#时间获取： time()  ctime()  gmtime()</span><br><span class="hljs-comment">#时间格式化：  strftime()  strtime()</span><br><span class="hljs-comment">#程序计时：  sleep(), perf_counter()</span><br></code></pre></div></td></tr></table></figure><h4 id="时间获取"><a href="#时间获取" class="headerlink" title="时间获取"></a>时间获取</h4><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">time()</td><td align="center">获取当前时间戳，即计算机内部时间值</td></tr><tr><td align="center">ctime()</td><td align="center">获取当前时间，格式是，星期、‘月、日、时间、年份’</td></tr><tr><td align="center">gmtime()</td><td align="center">获取当前时间，表示为计算机程序可编程利用的时间格式</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>time.time()<br><span class="hljs-number">1610244498.6032174</span>   <span class="hljs-comment">#表示从1970年1月1日0：00 开始至现在时刻的以秒为单位的数值</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>time.ctime()<br><span class="hljs-string">&#x27;Sun Jan 10 10:11:36 2021&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>time.gmtime()<br>time.struct_time(tm_year=<span class="hljs-number">2021</span>, tm_mon=<span class="hljs-number">1</span>, tm_mday=<span class="hljs-number">10</span>, tm_hour=<span class="hljs-number">2</span>, tm_min=<span class="hljs-number">29</span>, tm_sec=<span class="hljs-number">12</span>, tm_wday=<span class="hljs-number">6</span>, tm_yday=<span class="hljs-number">10</span>, tm_isdst=<span class="hljs-number">0</span>)<br></code></pre></div></td></tr></table></figure><h4 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h4><p>类似字符串格式化，需要展示模板</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">strftime(tpl,ts)</td><td align="center">tpl是格式化模板字符串，用来定义输出效果，ts是计算机内部时间类型变量</td></tr><tr><td align="center">%Y</td><td align="center">年份 0000~9999</td></tr><tr><td align="center">%m</td><td align="center">月份 01~12</td></tr><tr><td align="center">%B</td><td align="center">月份名称 January ~December</td></tr><tr><td align="center">%b</td><td align="center">月份名称缩写 Jan ~ Dec</td></tr><tr><td align="center">%d</td><td align="center">日期 01~31</td></tr><tr><td align="center">%A</td><td align="center">星期 Monday ~ Sunday</td></tr><tr><td align="center">%a</td><td align="center">星期缩写 Mon ~ Sun</td></tr><tr><td align="center">%H</td><td align="center">小时  00 ~ 23</td></tr><tr><td align="center">%I</td><td align="center">小时  01 ~ 12</td></tr><tr><td align="center">%p</td><td align="center">上下午  AM，PM</td></tr><tr><td align="center">%M</td><td align="center">分钟  00 ~ 59</td></tr><tr><td align="center">%S</td><td align="center">秒钟  00 ~ 59</td></tr><tr><td align="center">strptime(str,tpl)</td><td align="center">str是字符串形式的时间值，tpl是格式化模板字符串，用来定义输入效果</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,t)<br><span class="hljs-string">&#x27;2021-01-10 02:37:19&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>time.strptime(<span class="hljs-string">&#x27;2021-01-10 02:37:19&#x27;</span>,<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>time.struct_time(tm_year=<span class="hljs-number">2021</span>, tm_mon=<span class="hljs-number">1</span>, tm_mday=<span class="hljs-number">10</span>, tm_hour=<span class="hljs-number">2</span>, tm_min=<span class="hljs-number">37</span>, tm_sec=<span class="hljs-number">19</span>, tm_wday=<span class="hljs-number">6</span>, tm_yday=<span class="hljs-number">10</span>, tm_isdst=-<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><h4 id="程序计时运用"><a href="#程序计时运用" class="headerlink" title="程序计时运用"></a>程序计时运用</h4><p>测量起止动作所经历的时间</p><p>测量时间函数：perf_counter()</p><p>产生时间函数：sleep()</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">perf_counter()</td><td align="center">返回一个CPU级别的精确时间计数值，单位为秒。由于这个计数值起点不确定，连续调用差值才有意义</td></tr><tr><td align="center">sleep(s)</td><td align="center">s 拟休眠时间，单位是秒，可以是浮点数</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-meta">&gt;&gt;&gt; </span>start = time.perf_counter()<br><span class="hljs-meta">&gt;&gt;&gt; </span>end = time.perf_counter()<br><span class="hljs-meta">&gt;&gt;&gt; </span>end - start<br><span class="hljs-number">21.654742400000032</span><br><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wait</span>():</span><br>    time.sleep(<span class="hljs-number">3.3</span>)<br><br>    <br><span class="hljs-meta">&gt;&gt;&gt; </span>wait()   <span class="hljs-comment"># 这里则表示调用函数wait，使程序等待3.3秒再结束</span><br>    <br>    <br></code></pre></div></td></tr></table></figure><h3 id="0x5-【实列】-文本进度条"><a href="#0x5-【实列】-文本进度条" class="headerlink" title="0x5 【实列】 文本进度条"></a>0x5 【实列】 文本进度条</h3><h4 id="文本进度条问题要求："><a href="#文本进度条问题要求：" class="headerlink" title="文本进度条问题要求："></a>文本进度条问题要求：</h4><p>采用字符串方式打印可以动态变化的文本进度条</p><p>进度条需要能在一行中逐渐变化</p><p>采用sleep()模拟一个持续进度</p><p>####初步结构</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#TExtPorBarV1.py</span><br><span class="hljs-keyword">import</span> time<br>scale = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;------执行开始------&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(scale +<span class="hljs-number">1</span>):<br>    a = <span class="hljs-string">&#x27;*&#x27;</span> * i<br>    b = <span class="hljs-string">&#x27;.&#x27;</span> * (scale - i)<br>    c = (i/scale)*<span class="hljs-number">100</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&quot;</span>.<span class="hljs-built_in">format</span>(c,a,b))<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;------执行结束------&quot;</span>)    <br><br>输出<br></code></pre></div></td></tr></table></figure><h4 id="文本进度条的单行动态刷新"><a href="#文本进度条的单行动态刷新" class="headerlink" title="文本进度条的单行动态刷新"></a>文本进度条的单行动态刷新</h4><p>刷新的本质是：用后打印的字符覆盖之前的字符</p><p>不能换行：print()需要被控制</p><p>要能回退：打印后光标退回到之前的位置\r</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#TextProBarV1.py</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">101</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;:3&#125;%&quot;</span>.<span class="hljs-built_in">format</span>(i),end=<span class="hljs-string">&quot;&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <br>输出：<br>IDLE输出会将每一个结果输出，用cmd命令提示符运行即可看到效果<br></code></pre></div></td></tr></table></figure><h4 id="完整文本进度代码"><a href="#完整文本进度代码" class="headerlink" title="完整文本进度代码"></a>完整文本进度代码</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#TExtPorBarV1.py</span><br><span class="hljs-keyword">import</span> time<br>scale = <span class="hljs-number">50</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行开始&quot;</span>.center(scale//<span class="hljs-number">2</span>))<br>start = time.perf_counter()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(scale +<span class="hljs-number">1</span>):<br>    a = <span class="hljs-string">&#x27;*&#x27;</span> * i<br>    b = <span class="hljs-string">&#x27;.&#x27;</span> * (scale - i)<br>    c = (i/scale)*<span class="hljs-number">100</span><br>    dur = time.perf_counter() - start<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\r&#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.2f&#125;s&quot;</span>.<span class="hljs-built_in">format</span>(c,a,b,dur),end=<span class="hljs-string">&quot;&quot;</span>)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>+<span class="hljs-string">&quot;执行结束&quot;</span>.center(scale//<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;-&#x27;</span>))    <br>time.sleep(<span class="hljs-number">1</span>)<br><br>输出：<br>cmd输出<br></code></pre></div></td></tr></table></figure><h4 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h4><p>比较不同排序方法的时间</p><p>进图条扩展</p><p>在任何运行时间需要较长的程序中增加进度条</p><p>在任何希望提高用户体验的应用中增加进度条</p><p>进度条是人机交互的纽带之一</p><h4 id="文本进度条的不同设计函数"><a href="#文本进度条的不同设计函数" class="headerlink" title="文本进度条的不同设计函数"></a>文本进度条的不同设计函数</h4><p><a href="https://imgchr.com/i/slD9at"><img src="https://s3.ax1x.com/2021/01/10/slD9at.png" alt="slD9at.png"></a></p><p>结论：开始慢，后来速度随着进度增加的函数更符合人的心理期望</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（二）Python基本语法</title>
    <link href="/2021/10/02/Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/10/02/Python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="python基本语法"><a href="#python基本语法" class="headerlink" title="python基本语法"></a>python基本语法</h2><ul><li><p>实例1温度转换</p><ul><li><p>理解1  直接将温度值进行转换</p></li><li><p>理解2 将温度信息发布的声音或图像形式进行理解和转换</p></li><li><p>理解3 监控温度信息发布渠道，实时获取并转换温度值</p></li></ul></li><li><p>华氏摄氏温度定义，转换公式：</p><ul><li><p>摄氏度  以1标准大气压下睡的结冰点为0度，沸点为100度</p></li><li><p>华氏度 以1标准大气压下的水的结冰点为32度，沸点为212度，将温度进行等分刻画</p></li><li><p>C = （F - 32）/1.8</p></li><li><p>F = C*1.8 +32</p></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#TempConvert.py   </span><br>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)<br><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:   <br>    C = (<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) - <span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;：.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))<br><span class="hljs-keyword">elif</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:<br>    F = <span class="hljs-number">1.8</span> *<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) + <span class="hljs-number">32</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="hljs-built_in">format</span>(F))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入格式错误&quot;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="实列：温度转换包含的语法："><a href="#实列：温度转换包含的语法：" class="headerlink" title="实列：温度转换包含的语法："></a>实列：温度转换包含的语法：</h3><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>缩进表达程序的格式框架</p><p>严格明确 ：缩进是语法的一部分，缩进不正确程序会运行错误</p><p>所属关系：  表达大门键保护和层次关系的唯一手段</p><p>长度一致 一般4个空格或一个TAB</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>不被程序执行的说明</p><p>单行注释 以#开头，其后为注释</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#TempConvert.py   单行注释</span><br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>    多行注释 以‘“ 开头和结尾</code></pre></div><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;&quot; 这里是多行注释的第一行</span><br><span class="hljs-string">   这里是多行注释的第二行 &quot;&#x27;</span><br></code></pre></div></td></tr></table></figure><h3 id="变量命名与保留字"><a href="#变量命名与保留字" class="headerlink" title="变量命名与保留字"></a>变量命名与保留字</h3><p>TempStr 、C、F 为变量</p><p>命名规则：大小写字母、数字、下划线和汉字等字符及组合</p><p>注意事项：首字符不能是数字、不能与保留字相同</p><p>保留字（关键字）</p><p>被编程语言内部定义并保留使用的标识符</p><p><img src="https://s3.ax1x.com/2021/01/06/sVtm7t.png" alt="image-20210106181500451"></p><h3 id="数据的表现形式"><a href="#数据的表现形式" class="headerlink" title="数据的表现形式"></a>数据的表现形式</h3><p>供计算机理解数据的形式</p><ul><li><p>整数类型   10011101</p></li><li><p>字符串类型 “10,011,101”  单引号和双引号相同</p></li><li><p>列表类型  [10,011,101]   表达的是三个数字</p></li></ul><p> “请输入”的“请”是第0个字符</p><p><img src="https://s3.ax1x.com/2021/01/06/sVUaSU.png" alt="image-20210106182910519"></p><h3 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a>字符串的使用</h3><p>使用[]获取字符串中的一个或多个字符</p><ul><li><p>索引：返回字符串中单个字符  &lt;字符串&gt;[M] </p><div class="hljs code-wrapper"><pre><code> “请输入带有符号的温度值：”[0] 或者 TemStr[-1]</code></pre></div></li><li><p>切片：返回字符串中一段字符子串  &lt;字符串&gt;[M:N]</p></li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">TempStr = <span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span><br>TempStr[-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;：&#x27;</span><br><span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>[<span class="hljs-number">0</span>]<br><span class="hljs-string">&#x27;请&#x27;</span><br><span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]     <span class="hljs-comment">#不到第四个字符“ 0 1 2 3</span><br><span class="hljs-string">&#x27;请输入带&#x27;</span><br></code></pre></div></td></tr></table></figure><ul><li>列表类型  [10,011,101]</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>整数、浮点数、列表类型</p><p>[‘F’,’f’]  表示两个元素’F‘和’f‘</p>   <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:    <span class="hljs-comment">#in 判断一个元素是否在列表中</span><br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#TempConvert.py   </span><br>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)<br><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:   <br>    <br>分析：   <br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)<br>请输入带有符号的温度值：20F<br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr[-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;F&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr[-<span class="hljs-number">2</span>]<br><span class="hljs-string">&#x27;0&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr[-<span class="hljs-number">3</span>]<br><span class="hljs-string">&#x27;2&#x27;</span><br><br></code></pre></div></td></tr></table></figure><h3 id="语句与函数"><a href="#语句与函数" class="headerlink" title="语句与函数"></a>语句与函数</h3><ul><li><p>赋值语句（右边的数据类型影响左边，相当于用数据来定义变量）</p></li><li><p>分支语句   如条件判断语句</p></li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">语法结构：<br><br><span class="hljs-keyword">if</span> 条件判断内容 ：      <span class="hljs-comment">#如果条件为True则执行冒号后的语句</span><br>   执行语句            <span class="hljs-comment">#如果条件为false则跳过冒号后的语句</span><br>    <br>示例：<br><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:   <br>    C = (<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) - <span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;：.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))<br>  <br></code></pre></div></td></tr></table></figure><ul><li><p>冒号及后续缩进用来表示后续语句与条件的所属关系，千万不能少</p></li><li><p>函数 </p><p>python类似数学中的函数，y=f（x）</p></li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入格式错误&quot;</span>)  <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;输入格式错误&quot;</span><br></code></pre></div></td></tr></table></figure><div class="hljs code-wrapper"><pre><code>    函数采用  &lt;函数名&gt;(&lt;参数&gt;)  方式使用</code></pre></div><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])  <span class="hljs-comment">#TempStr[0:-1]是参数</span><br></code></pre></div></td></tr></table></figure><p>回顾</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#TempConvert.py   </span><br>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)<br><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:   <br>    C = (<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) - <span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;：.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))<br><span class="hljs-keyword">elif</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:<br>    F = <span class="hljs-number">1.8</span> *<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) + <span class="hljs-number">32</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="hljs-built_in">format</span>(F))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入格式错误&quot;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><ul><li>input（）函数的使用格式：</li></ul><p>&lt;变量&gt; = input（&lt;提示信息字符串&gt;）</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)   <br><span class="hljs-comment">#TempStr保存用户输入的信息，以 字符串 的形式保存到变量中</span><br></code></pre></div></td></tr></table></figure><ul><li>print函数的格式化使用方法</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;：.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))  <span class="hljs-comment">#暂且记忆</span><br><br>&#123;&#125; 表示槽，后续遍历填充到槽中<br>&#123;:<span class="hljs-number">.2</span>f&#125;表示将变量C填充到这个位置时取小数点后<span class="hljs-number">2</span>位<br></code></pre></div></td></tr></table></figure><ul><li>eval()  去掉参数最外侧引号并执行余下语句的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;1 + 2&quot;</span>)  <span class="hljs-comment">#去掉双引号，变成python了可理解的语句，固结果为3</span><br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;&quot;1 + 2&quot;&#x27;</span>)  <span class="hljs-comment">#去掉双引号，输出一个单引号的字符串</span><br><span class="hljs-string">&#x27;1 + 2&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;print(&quot;Hello&quot;)&#x27;</span>)<br>Hello<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>)<br>请输入带有符号的温度值：<span class="hljs-number">200</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><span class="hljs-number">200</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(TempStr[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><span class="hljs-number">200</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;12.3&quot;</span>)<br><span class="hljs-number">12.3</span><br></code></pre></div></td></tr></table></figure><h3 id="温度转换代码分析"><a href="#温度转换代码分析" class="headerlink" title="温度转换代码分析"></a>温度转换代码分析</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#TempConvert.py                         #注释，此行不运行</span><br>TempStr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入带有符号的温度值：&quot;</span>) <span class="hljs-comment">#用户输入的字符串将保存在TempStr中，input内为提示信息</span><br><span class="hljs-keyword">if</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:            <span class="hljs-comment">#判断TempStr的最后一个字符是否为列表类型F和f中的一个，为true则执行4、5行语句</span><br>    C = (<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) - <span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span>        <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;：.2f&#125;C&quot;</span>.<span class="hljs-built_in">format</span>(C))<br><span class="hljs-keyword">elif</span> TempStr[-<span class="hljs-number">1</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:          <span class="hljs-comment">#判断TempStr的最后以一个字符是否为C和c中的一个，为true则执行7、8行语句</span><br>    F = <span class="hljs-number">1.8</span> *<span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]) + <span class="hljs-number">32</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换后的温度是&#123;:.2f&#125;F&quot;</span>.<span class="hljs-built_in">format</span>(F))<br><span class="hljs-keyword">else</span>:                                   <span class="hljs-comment">#默认执行：后的语句</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入格式错误&quot;</span>)<br><br>===============================================================================    <br>    <br><span class="hljs-comment">#如果输入82F，则为什么eval(TempStr[0:-1])的结果是不包含F，为82？</span><br><br>   因为TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]表示从<span class="hljs-number">0</span>号元素开始，且不到-<span class="hljs-number">1</span>号元素的字符串，这里-<span class="hljs-number">1</span>号元素就是F<br>    <br>=================================================================================  <br><br><span class="hljs-meta">&gt;&gt;&gt; </span>TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;300&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(TempStr[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])<br><span class="hljs-number">300</span><br><br><br>template = <span class="hljs-string">&quot;零一二三四五六七八九&quot;</span><br><br>s = <span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span>(template[<span class="hljs-built_in">eval</span>(c)], end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#获得用户输入的一个正整数输入，输出该数字对应的中文字符表示。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬</span><br><br><span class="hljs-comment">#0到9对应的中文字符分别是：零一二三四五六七八九‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬</span><br><br>输入示例<span class="hljs-number">1</span>‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬<br><br><span class="hljs-number">123</span><br><br>输出示例<span class="hljs-number">1</span>‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬<br><br>一二三<br>输入示例<span class="hljs-number">2</span>‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬<br><br><span class="hljs-number">9876543210</span><br><br>输出示例<span class="hljs-number">2</span>‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬<br><br>九八七六五四三二一零<br><br><span class="hljs-comment">#代码：</span><br>template = <span class="hljs-string">&quot;零一二三四五六七八九&quot;</span><br><br>s = <span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span>(template[<span class="hljs-built_in">eval</span>(c)], end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（一）Python简单介绍与安装</title>
    <link href="/2021/10/02/Python%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85(%E4%B8%80)/"/>
    <url>/2021/10/02/Python%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h2 id="Python语言程序设计"><a href="#Python语言程序设计" class="headerlink" title="Python语言程序设计"></a>Python语言程序设计</h2><ul><li>源代码人类可理解</li><li>目标代码 计算机直接执行</li></ul><h2 id="1-编译与解释"><a href="#1-编译与解释" class="headerlink" title="1.编译与解释"></a>1.编译与解释</h2><p>编译  将源代码在转换为目标代码，转换完知乎不需要源代码参与</p><p>解释 每次都需要源代码参与</p><h2 id="2-编程语言分类"><a href="#2-编程语言分类" class="headerlink" title="2.编程语言分类"></a>2.编程语言分类</h2><ul><li><p>根据执行方式不同，编程语言分为两类</p><p>静态语言  使用编译执行的语言 如C、java</p><p>脚本语言  使用解释执行的编程语言 如python、JavaScript、php</p></li><li><p>优势</p><p>静态语言   编译器一次性生成慕白哦迪阿敏，优化更充分  程序运行速度更快</p><p>脚本语言   执行程序时需要源代码，维护更灵活，易跨多个操作系统平台</p></li></ul><h2 id="3-python语言简介"><a href="#3-python语言简介" class="headerlink" title="3.python语言简介"></a>3.python语言简介</h2><ul><li><p>input  process  output</p><p>输入是程序的开始</p></li><li><p>python  蟒蛇  PSF拥有 非盈利组织  保护python开放、开源和发展</p><p>创始人 guido van rossum </p></li></ul><h2 id="4-下载配置python"><a href="#4-下载配置python" class="headerlink" title="4. 下载配置python"></a>4. 下载配置python</h2><p>​    下载配置python  <a href="https://www.python.org/">https://www.python.org/</a></p><p>​    pycharm环境：<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p><p>​    pycharm配置使用：<a href="https://blog.csdn.net/ling_mochen/article/details/79314118">https://blog.csdn.net/ling_mochen/article/details/79314118</a></p><h2 id="5-编程两种方式"><a href="#5-编程两种方式" class="headerlink" title="5.编程两种方式"></a>5.编程两种方式</h2><ul><li>交互式  对每个输入语句即时运行结果 ，适合语法练习</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#示例一：计算圆面积</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>r = <span class="hljs-number">25</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>area = <span class="hljs-number">3.1415</span> * r * r<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(area)<br><span class="hljs-number">1963.4375000000002</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(area))<br><span class="hljs-number">1963.44</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#示例二：画同心圆</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> turtle<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.pensize(<span class="hljs-number">2</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.circle(<span class="hljs-number">10</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.circle(<span class="hljs-number">40</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.circle(<span class="hljs-number">80</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>turtle.circle(<span class="hljs-number">160</span>)<br></code></pre></div></td></tr></table></figure><ul><li>文件式 批量执行一组语句并运行结果，编程的主要方法</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#示例一：计算圆面积</span><br>r = <span class="hljs-number">25</span><br>area = <span class="hljs-number">3.1415</span> * r * r<br><span class="hljs-built_in">print</span>(area)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(area))<br><br>==输出===<br><span class="hljs-number">1963.4375000000002</span><br><span class="hljs-number">1963.44</span><br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#示例二：画同心圆</span><br><span class="hljs-keyword">import</span> turtle<br>turtle.pensize(<span class="hljs-number">2</span>)<br>turtle.circle(<span class="hljs-number">10</span>)<br>turtle.circle(<span class="hljs-number">40</span>)<br>turtle.circle(<span class="hljs-number">80</span>)<br>turtle.circle(<span class="hljs-number">160</span>)<br>===输出===<br>同心圆<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo写作格式与技巧</title>
    <link href="/2021/10/01/Hexo%E6%8A%80%E5%B7%A7%E4%B8%8E%E5%86%99%E4%BD%9C/"/>
    <url>/2021/10/01/Hexo%E6%8A%80%E5%B7%A7%E4%B8%8E%E5%86%99%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>更多详请查看<a href="https://hexo.io/docs/">Hexo文档</a>、<a href="https://hexo.fluid-dev.com/docs/start/">Fluid主题文档</a>、<a href="https://hexo.fluid-dev.com/">Fluid主题展示和功能介绍</a></p><h1 id="Hexo写作流程"><a href="#Hexo写作流程" class="headerlink" title="Hexo写作流程"></a>Hexo写作流程</h1><h2 id="创建新帖"><a href="#创建新帖" class="headerlink" title="创建新帖"></a>创建新帖</h2><ul><li><p>方法一</p><p>要创建新帖子或新页面，您可以运行以下命令：</p>  <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new [layout] &lt;title&gt;<br></code></pre></div></td></tr></table></figure><p><code>post</code>是默认值<code>layout</code>，但您可以提供自己的。您可以通过编辑 中的<code>default_layout</code>设置来更改默认布局<code>_config.yml</code>。</p><p>Hexo 中有 3 种默认布局：<code>post</code>,<code>page</code>和<code>draft</code>. 他们每个人创建的文件都保存到不同的路径。新创建的帖子将保存到该<code>source/_posts</code>文件夹中。</p><p><img src="https://i.loli.net/2021/10/02/h2Bjabc7RuN1UXS.png"></p><p>如果您不希望使用主题处理文章（帖子/页面），请将<code>layout: false</code>其设置为头版。有关更多详细信息，请参阅<a href="https://hexo.io/docs/front-matter#Layout">本节</a>。</p></li><li><p>方法二</p><p>直接在目录下找 \source_posts,并在文件夹中添加写好的.md文件</p></li></ul><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br>也可简写为：<br>$ hexo g<br></code></pre></div></td></tr></table></figure><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><p>这一步也可以跳过，用于查看在本地查看生成的静态网页的效果，因为部署到服务器需要一定的时间，所以一般在本地先查看。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><p>这一步通常需要一定的时间，具体时间不等，需要多次刷新查看。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br>可简写为：<br>$ hexo d<br></code></pre></div></td></tr></table></figure><h2 id="清楚缓存"><a href="#清楚缓存" class="headerlink" title="清楚缓存"></a>清楚缓存</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo clean<br></code></pre></div></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p>更多命令查看<a href="https://hexo.io/zh-cn/docs/commands.html">Hexo指令</a></p><h1 id="Hexo写作"><a href="#Hexo写作" class="headerlink" title="Hexo写作"></a>Hexo写作</h1><h2 id="文档名称"><a href="#文档名称" class="headerlink" title="文档名称"></a>文档名称</h2><ul><li>通常情况下Hexo 使用帖子标题作为其文件名。您可以编辑<code>new_post_name</code>设置<code>_config.yml</code>以更改默认文件名。例如，<code>:year-:month-:day-:title.md</code>将使用帖子创建日期作为文件名的前缀。您可以使用以下占位符：<img src="https://i.loli.net/2021/10/02/SxLoZitAIg1dfXH.png" alt="image-20211002100532390"></li></ul><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>之前，我们提到了 Hexo 中的一个特殊布局：<code>draft</code>. 使用此布局初始化的帖子将保存到该<code>source/_drafts</code>文件夹中。您可以使用该<code>publish</code>命令将草稿移动到<code>source/_posts</code>文件夹中。<code>publish</code>与<code>new</code>命令的工作方式类似。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo publish [布局] &lt;title&gt;<br></code></pre></div></td></tr></table></figure><p>默认情况下不显示草稿。您可以<code>--draft</code>在运行 Hexo 时添加该选项或启用该<code>render_drafts</code>设置<code>_config.yml</code>以渲染草稿。</p><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><p>创建帖子时，Hexo 将根据文件<code>scaffolds</code>夹中的相应文件构建文件。例如：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo 新照片“我的相册”<br></code></pre></div></td></tr></table></figure><p>当您运行此命令时，Hexo 将尝试<code>photo.md</code>在<code>scaffolds</code>文件夹中查找并基于它构建帖子。脚手架中提供以下占位符：</p><p><img src="https://i.loli.net/2021/10/02/KHGzyM5OVckYCDS.png" alt="image-20211002103859285"></p><p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/96774636">Hexo文章的Scaffolds脚手架</a></p><h2 id="支持格式"><a href="#支持格式" class="headerlink" title="支持格式"></a>支持格式</h2><p>以任何格式编写的 Hexo 支持帖子，只要安装了相应的渲染器插件即可。</p><p>例如，Hexo默认已安装<code>hexo-renderer-marked</code>并<code>hexo-renderer-ejs</code>安装，因此您可以<code>markdown</code>在<code>ejs</code>. 如果您已经<code>hexo-renderer-pug</code>安装，那么您甚至可以用 pug 模板语言编写您的帖子。</p><p>您可以重命名您的文章和改变文件扩展名<code>.md</code>来<code>.ejs</code>，然后HEXO将使用<code>hexo-renderer-ejs</code>来呈现文件，这样做对其他格式。</p><h2 id="文章头"><a href="#文章头" class="headerlink" title="文章头"></a>文章头</h2><p>Front-matter 是文件开头的 YAML 或 JSON 块，用于为您的作品配置设置。以 YAML 编写时，前面的内容以三个破折号结尾，以 JSON 编写时以三个分号结尾。</p><p>YAML</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-string">标题：</span> <span class="hljs-string">Hello</span>  <span class="hljs-string">World</span><br><span class="hljs-string">日期：</span> <span class="hljs-number">2013</span> <span class="hljs-string">/7/13</span>  <span class="hljs-number">20</span> <span class="hljs-string">:46:25</span> <br><span class="hljs-meta">---</span><br></code></pre></div></td></tr></table></figure><p>JSON</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span>, <br><span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2013/7/13 20:46:25&quot;</span> <br>;;;<br></code></pre></div></td></tr></table></figure><p>markdown</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo写作格式</span>      <span class="hljs-string">//题目</span><br><span class="hljs-attr">date:</span>    <span class="hljs-string">//日期</span><br><span class="hljs-attr">tags:</span>             <span class="hljs-string">//标签</span><br><span class="hljs-attr">categories:</span>              <span class="hljs-string">//分类</span><br><span class="hljs-attr">index_img:</span>               <span class="hljs-string">//文章图片</span><br><span class="hljs-attr">description:</span>             <span class="hljs-string">//这是显示在首页的概述，正文内容均会被隐藏。</span><br><span class="hljs-meta">---</span><br></code></pre></div></td></tr></table></figure><p>文章内容对应下方的位置，不设置title的话默认是文章内容，不是文件名</p><p><img src="https://i.loli.net/2021/10/02/2TnRSVeqIvltUFb.png" alt="image-20211002101243201"></p><p>更多格式如下：</p><p><img src="https://i.loli.net/2021/10/02/GE95OrNfeWax3hI.png" alt="image-20211002104846366"></p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>默认布局为<code>post</code>，根据 中<a href="https://hexo.io/docs/configuration#Writing"><code>default_layout</code></a>设置的值<code>_config.yml</code>。当文章中的布局被禁用 ( <code>layout: false</code>) 时，它将不会使用主题进行处理。但是，它仍然会被任何可用的渲染器渲染：如果一篇文章是用 Markdown 编写的，并且安装了 Markdown 渲染器（如默认的<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>），它将被渲染为 HTML。</p><p>无论布局如何，<a href="https://hexo.io/docs/tag-plugins">标签插件</a>总是被处理，除非被<code>disableNunjucks</code>设置或<a href="https://hexo.io/api/renderer#Disable-Nunjucks-tags">渲染器</a>禁用。</p><h2 id="类别和标签"><a href="#类别和标签" class="headerlink" title="类别和标签"></a>类别和标签</h2><p>只有帖子支持使用类别和标签。类别按顺序应用于帖子，从而形成分类和子分类的层次结构。标签都定义在同一层级上，因此它们出现的顺序并不重要。</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">类别：<br><span class="hljs-bullet">- </span>运动<br><span class="hljs-bullet">- </span>棒球<br>标签：<br><span class="hljs-bullet">- </span>受伤<br><span class="hljs-bullet">- </span>格斗<br><span class="hljs-bullet">- </span>令人震惊<br></code></pre></div></td></tr></table></figure><p>如果要应用多个类别层次结构，请使用名称列表而不是单个名称。如果 Hexo 在帖子上看到任何以这种方式定义的类别，它将将该帖子的每个类别视为自己独立的层次结构。</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">类别：<br><span class="hljs-bullet">- </span>[体育，棒球] <br><span class="hljs-bullet">- </span>[美国职棒大联盟，美国 联盟，波士顿 红 红袜] <br><span class="hljs-bullet">- </span>[美国职棒大联盟，美国的 同盟，新的 纽约 洋基队] <br><span class="hljs-bullet">- </span>对抗<br></code></pre></div></td></tr></table></figure><h1 id="Hexo语法"><a href="#Hexo语法" class="headerlink" title="Hexo语法"></a>Hexo语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ul><li>首先fluid不支持[toc]显示整个文章的目录</li></ul><p>标题的语法与markdown无区别，如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/*<br><span class="hljs-meta">#</span><span class="bash"> 一级标题</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 二级标题</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## 三级标题</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">### 四级标题</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#### 五级标题</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">##### 六级标题</span></span><br>(In addition: do not foget the space behind #.)<br>*/<br></code></pre></div></td></tr></table></figure><h2 id="字体Typeface"><a href="#字体Typeface" class="headerlink" title="字体Typeface"></a>字体Typeface</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">加粗  **内容**</span><br><span class="hljs-comment">代码高亮显示  ==内容==</span><br><span class="hljs-comment">删除线  ~~内容~~</span><br><span class="hljs-comment">斜体  *内容*</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p>加粗 ：  <strong>加粗的内容</strong></p><p>代码高亮显示：  ==高亮的内容==</p><p>删除线：  <del>有删除线的内容</del></p><p>斜体： <em>斜体内容</em></p><h2 id="引用Quote"><a href="#引用Quote" class="headerlink" title="引用Quote"></a>引用Quote</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">&gt;引用内容</span><br><span class="hljs-comment">&gt;&gt;引用内容</span><br><span class="hljs-comment">&gt;&gt;&gt;yy内容</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><blockquote><p>内容</p><blockquote><p>内容</p></blockquote><blockquote><blockquote><p>内容</p></blockquote></blockquote></blockquote><h2 id="分割线Lines"><a href="#分割线Lines" class="headerlink" title="分割线Lines"></a>分割线Lines</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">分割线1： </span><br><span class="hljs-comment">---</span><br><span class="hljs-comment">分割线2：</span><br><span class="hljs-comment">***</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p>分割线1： </p><hr><p>分割线2：</p><hr><h2 id="图像Picture"><a href="#图像Picture" class="headerlink" title="图像Picture"></a>图像Picture</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//插入在线图片||本地图片 #注意必须用英文#</span><br>![图片名字](图片路径<span class="hljs-keyword">or</span>地址)<br>    如：![](C:\Users\Husile\Desktop\=\心理学\民大\<span class="hljs-number">98E1376</span>B2FA94D942168E531C228FECA.jpg)<br></code></pre></div></td></tr></table></figure><h5 id="插入本地图片"><a href="#插入本地图片" class="headerlink" title="插入本地图片"></a>插入本地图片</h5><p><a href="https://imgchr.com/i/DViYRA"><img src="https://s3.ax1x.com/2020/11/17/DViYRA.gif" alt="DViYRA.gif"></a></p><ul><li>利用==图床==工具，可将本地图片保存到云并生成相应连接</li></ul><p>插入网络链接图片</p><p><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1141259048,554497535&fm=26&gp=0.jpg" alt="test"></p><h2 id="超链接Hyperlink"><a href="#超链接Hyperlink" class="headerlink" title="超链接Hyperlink"></a>超链接Hyperlink</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//超链接语法</span><br>[名字](地址链接)<br>如：[我的给github](https:<span class="hljs-comment">//github.com/Bsheepcoder/New_thread_learn/tree/master)</span><br></code></pre></div></td></tr></table></figure><h5 id="超链接语法："><a href="#超链接语法：" class="headerlink" title="超链接语法："></a>超链接语法：</h5><p><a href="https://github.com/Bsheepcoder/New_thread_learn/tree/master">我的给github</a></p><h2 id="列表Listing"><a href="#列表Listing" class="headerlink" title="列表Listing"></a>列表Listing</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//无序列表 · 这种</span><br>- 内容<br>- 内容<br><span class="hljs-comment">//有序(1+.+名称)   要加空格</span><br>    <span class="hljs-number">1.</span> 哈哈<br>    <span class="hljs-number">2.</span> 嘻嘻<br></code></pre></div></td></tr></table></figure><h5 id="无序："><a href="#无序：" class="headerlink" title="无序："></a>无序：</h5><ul><li>内容1</li><li>内容2</li></ul><h5 id="有序："><a href="#有序：" class="headerlink" title="有序："></a>有序：</h5><ol><li>内容</li><li>内容</li><li></li></ol><h2 id="表格Tabulation"><a href="#表格Tabulation" class="headerlink" title="表格Tabulation"></a>表格Tabulation</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//表格代码很复杂，一般不用语言写</span><br>| <span class="hljs-number">1</span>    | <span class="hljs-number">0</span>    | <span class="hljs-number">0</span>    |<br>| ---- | ---- | ---- |<br>| <span class="hljs-number">0</span>    | <span class="hljs-number">1</span>    | <span class="hljs-number">0</span>    |<br>| <span class="hljs-number">0</span>    | <span class="hljs-number">0</span>    | <span class="hljs-number">1</span>    |<br>    <span class="hljs-comment">//直接右键插入/ctrl t</span><br></code></pre></div></td></tr></table></figure><table><thead><tr><th align="center">1</th><th align="center">0</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr></tbody></table><h2 id="另In-addition"><a href="#另In-addition" class="headerlink" title="另In addition"></a>另In addition</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//常用的快捷键也很好用</span><br>    <br>    ctrl <span class="hljs-number">1</span>  ~ <span class="hljs-number">6</span>     标题<br>    ctrl shift k/m  代码块或公式块<br>    ctrl t          插入表格  <br></code></pre></div></td></tr></table></figure><h2 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h2><ul><li><p><strong>问题原因</strong>：远程库与本地库不一致造成的，在hint中也有提示把远程库同步到本地库就可以了。</p><p><strong>解决办法</strong>：使用命令行：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git pull --rebase origin master<br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190103111754961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RpZXRpbWUxOTQz,size_16,color_FFFFFF,t_70" alt="运行图象"></p><p>成功后即可push</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/30/hello-world/"/>
    <url>/2021/09/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
